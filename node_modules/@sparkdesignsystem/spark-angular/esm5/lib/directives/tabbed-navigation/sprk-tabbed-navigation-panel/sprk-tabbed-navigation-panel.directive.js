import { __decorate, __metadata } from "tslib";
import { Directive, ElementRef, Input, OnInit } from '@angular/core';
var SprkTabbedNavigationPanelDirective = /** @class */ (function () {
    /**
     * @ignore
     */
    function SprkTabbedNavigationPanelDirective(ref) {
        this.ref = ref;
    }
    /**
     * @ignore
     */
    SprkTabbedNavigationPanelDirective.prototype.getClasses = function () {
        var classArray = ['sprk-c-Tabs__content'];
        if (!this.defaultActive) {
            classArray.push('sprk-u-HideWhenJs');
        }
        if (this.additionalClasses) {
            this.additionalClasses.split(' ').forEach(function (className) {
                classArray.push(className);
            });
        }
        return classArray;
    };
    SprkTabbedNavigationPanelDirective.prototype.ngOnInit = function () {
        var _this = this;
        this.ref.nativeElement.setAttribute('role', 'tabpanel');
        this.ref.nativeElement.setAttribute('tabindex', '0');
        this.getClasses().forEach(function (item) {
            _this.ref.nativeElement.classList.add(item);
        });
    };
    SprkTabbedNavigationPanelDirective.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], SprkTabbedNavigationPanelDirective.prototype, "additionalClasses", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Boolean)
    ], SprkTabbedNavigationPanelDirective.prototype, "defaultActive", void 0);
    SprkTabbedNavigationPanelDirective = __decorate([
        Directive({
            selector: '[sprkTabbedNavigationPanel]'
        }),
        __metadata("design:paramtypes", [ElementRef])
    ], SprkTabbedNavigationPanelDirective);
    return SprkTabbedNavigationPanelDirective;
}());
export { SprkTabbedNavigationPanelDirective };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3Byay10YWJiZWQtbmF2aWdhdGlvbi1wYW5lbC5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9Ac3BhcmtkZXNpZ25zeXN0ZW0vc3BhcmstYW5ndWxhci8iLCJzb3VyY2VzIjpbImxpYi9kaXJlY3RpdmVzL3RhYmJlZC1uYXZpZ2F0aW9uL3NwcmstdGFiYmVkLW5hdmlnYXRpb24tcGFuZWwvc3Byay10YWJiZWQtbmF2aWdhdGlvbi1wYW5lbC5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsVUFBVSxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFLckU7SUEwQ0U7O09BRUc7SUFDSCw0Q0FBbUIsR0FBZTtRQUFmLFFBQUcsR0FBSCxHQUFHLENBQVk7SUFBRyxDQUFDO0lBOUJ0Qzs7T0FFRztJQUNILHVEQUFVLEdBQVY7UUFDRSxJQUFNLFVBQVUsR0FBYSxDQUFDLHNCQUFzQixDQUFDLENBQUM7UUFFdEQsSUFBSSxDQUFDLElBQUksQ0FBQyxhQUFhLEVBQUU7WUFDdkIsVUFBVSxDQUFDLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDO1NBQ3RDO1FBRUQsSUFBSSxJQUFJLENBQUMsaUJBQWlCLEVBQUU7WUFDMUIsSUFBSSxDQUFDLGlCQUFpQixDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxPQUFPLENBQUMsVUFBQSxTQUFTO2dCQUNqRCxVQUFVLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO1lBQzdCLENBQUMsQ0FBQyxDQUFDO1NBQ0o7UUFFRCxPQUFPLFVBQVUsQ0FBQztJQUNwQixDQUFDO0lBRUQscURBQVEsR0FBUjtRQUFBLGlCQU9DO1FBTkMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxhQUFhLENBQUMsWUFBWSxDQUFDLE1BQU0sRUFBRSxVQUFVLENBQUMsQ0FBQztRQUN4RCxJQUFJLENBQUMsR0FBRyxDQUFDLGFBQWEsQ0FBQyxZQUFZLENBQUMsVUFBVSxFQUFFLEdBQUcsQ0FBQyxDQUFDO1FBRXJELElBQUksQ0FBQyxVQUFVLEVBQUUsQ0FBQyxPQUFPLENBQUMsVUFBQSxJQUFJO1lBQzVCLEtBQUksQ0FBQyxHQUFHLENBQUMsYUFBYSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDN0MsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDOztnQkFJdUIsVUFBVTs7SUF0Q2xDO1FBREMsS0FBSyxFQUFFOztpRkFDa0I7SUFNMUI7UUFEQyxLQUFLLEVBQUU7OzZFQUNlO0lBYlosa0NBQWtDO1FBSDlDLFNBQVMsQ0FBQztZQUNULFFBQVEsRUFBRSw2QkFBNkI7U0FDeEMsQ0FBQzt5Q0E4Q3dCLFVBQVU7T0E3Q3ZCLGtDQUFrQyxDQThDOUM7SUFBRCx5Q0FBQztDQUFBLEFBOUNELElBOENDO1NBOUNZLGtDQUFrQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERpcmVjdGl2ZSwgRWxlbWVudFJlZiwgSW5wdXQsIE9uSW5pdCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5ARGlyZWN0aXZlKHtcbiAgc2VsZWN0b3I6ICdbc3Bya1RhYmJlZE5hdmlnYXRpb25QYW5lbF0nXG59KVxuZXhwb3J0IGNsYXNzIFNwcmtUYWJiZWROYXZpZ2F0aW9uUGFuZWxEaXJlY3RpdmUgaW1wbGVtZW50cyBPbkluaXQge1xuICAvKipcbiAgICogRXhwZWN0cyBhIHNwYWNlIHNlcGFyYXRlZCBzdHJpbmdcbiAgICogb2YgY2xhc3NlcyB0byBiZSBhZGRlZCB0byB0aGVcbiAgICogZWxlbWVudC5cbiAgICovXG4gIEBJbnB1dCgpXG4gIGFkZGl0aW9uYWxDbGFzc2VzOiBzdHJpbmc7XG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBQYW5lbCB3aWxsXG4gICAqIGJlIHNldCBhcyB0aGUgYWN0aXZlIFBhbmVsIG9uIHJlbmRlci5cbiAgICovXG4gIEBJbnB1dCgpXG4gIGRlZmF1bHRBY3RpdmU6IGJvb2xlYW47XG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGdldENsYXNzZXMoKTogc3RyaW5nW10ge1xuICAgIGNvbnN0IGNsYXNzQXJyYXk6IHN0cmluZ1tdID0gWydzcHJrLWMtVGFic19fY29udGVudCddO1xuXG4gICAgaWYgKCF0aGlzLmRlZmF1bHRBY3RpdmUpIHtcbiAgICAgIGNsYXNzQXJyYXkucHVzaCgnc3Byay11LUhpZGVXaGVuSnMnKTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5hZGRpdGlvbmFsQ2xhc3Nlcykge1xuICAgICAgdGhpcy5hZGRpdGlvbmFsQ2xhc3Nlcy5zcGxpdCgnICcpLmZvckVhY2goY2xhc3NOYW1lID0+IHtcbiAgICAgICAgY2xhc3NBcnJheS5wdXNoKGNsYXNzTmFtZSk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gY2xhc3NBcnJheTtcbiAgfVxuXG4gIG5nT25Jbml0KCk6IHZvaWQge1xuICAgIHRoaXMucmVmLm5hdGl2ZUVsZW1lbnQuc2V0QXR0cmlidXRlKCdyb2xlJywgJ3RhYnBhbmVsJyk7XG4gICAgdGhpcy5yZWYubmF0aXZlRWxlbWVudC5zZXRBdHRyaWJ1dGUoJ3RhYmluZGV4JywgJzAnKTtcblxuICAgIHRoaXMuZ2V0Q2xhc3NlcygpLmZvckVhY2goaXRlbSA9PiB7XG4gICAgICB0aGlzLnJlZi5uYXRpdmVFbGVtZW50LmNsYXNzTGlzdC5hZGQoaXRlbSk7XG4gICAgfSk7XG4gIH1cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGNvbnN0cnVjdG9yKHB1YmxpYyByZWY6IEVsZW1lbnRSZWYpIHt9XG59XG4iXX0=