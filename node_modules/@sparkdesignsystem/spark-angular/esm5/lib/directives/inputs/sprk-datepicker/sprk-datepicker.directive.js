import { __assign, __decorate, __metadata } from "tslib";
import { Directive, ElementRef, Input, OnInit } from '@angular/core';
import TinyDatePicker from 'tiny-date-picker';
var SprkDatepickerDirective = /** @class */ (function () {
    /**
     * @ignore
     */
    function SprkDatepickerDirective(ref) {
        this.ref = ref;
    }
    SprkDatepickerDirective.prototype.ngOnInit = function () {
        var _this = this;
        var input = this.ref.nativeElement;
        var tdpConfig = {
            mode: 'dp-below',
            lang: {
                days: ['S', 'M', 'T', 'W', 'T', 'F', 'S']
            },
            min: '01/1/2008',
            max: '01/1/2068',
            format: function (date) {
                return date
                    .toLocaleDateString('en-US', {
                    month: '2-digit',
                    day: '2-digit',
                    year: 'numeric'
                })
                    .replace(/[^ -~]/g, '');
            }
        };
        if (TinyDatePicker) {
            TinyDatePicker(input, __assign(__assign({}, tdpConfig), this.sprkDatePickerConfig)).on('select', function () {
                var event;
                if (typeof (Event) === 'function') {
                    event = new Event('input');
                }
                else {
                    event = document.createEvent('Event');
                    event.initEvent('input', true, true);
                }
                _this.ref.nativeElement.dispatchEvent(event);
                _this.ref.nativeElement.focus();
            });
        }
    };
    SprkDatepickerDirective.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], SprkDatepickerDirective.prototype, "sprkDatePickerConfig", void 0);
    SprkDatepickerDirective = __decorate([
        Directive({
            selector: '[sprkDatepicker]'
        }),
        __metadata("design:paramtypes", [ElementRef])
    ], SprkDatepickerDirective);
    return SprkDatepickerDirective;
}());
export { SprkDatepickerDirective };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3Byay1kYXRlcGlja2VyLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BzcGFya2Rlc2lnbnN5c3RlbS9zcGFyay1hbmd1bGFyLyIsInNvdXJjZXMiOlsibGliL2RpcmVjdGl2ZXMvaW5wdXRzL3NwcmstZGF0ZXBpY2tlci9zcHJrLWRhdGVwaWNrZXIuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLFVBQVUsRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3JFLE9BQU8sY0FBYyxNQUFNLGtCQUFrQixDQUFDO0FBSzlDO0lBQ0U7O09BRUc7SUFDSCxpQ0FBbUIsR0FBZTtRQUFmLFFBQUcsR0FBSCxHQUFHLENBQVk7SUFBRyxDQUFDO0lBVXRDLDBDQUFRLEdBQVI7UUFBQSxpQkFzQ0M7UUFyQ0MsSUFBTSxLQUFLLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxhQUFhLENBQUM7UUFDckMsSUFBTSxTQUFTLEdBQUc7WUFDaEIsSUFBSSxFQUFFLFVBQVU7WUFDaEIsSUFBSSxFQUFFO2dCQUNKLElBQUksRUFBRSxDQUFDLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsQ0FBQzthQUMxQztZQUNELEdBQUcsRUFBRSxXQUFXO1lBQ2hCLEdBQUcsRUFBRSxXQUFXO1lBQ2hCLE1BQU0sRUFBRSxVQUFBLElBQUk7Z0JBQ1YsT0FBQSxJQUFJO3FCQUNELGtCQUFrQixDQUFDLE9BQU8sRUFBRTtvQkFDM0IsS0FBSyxFQUFFLFNBQVM7b0JBQ2hCLEdBQUcsRUFBRSxTQUFTO29CQUNkLElBQUksRUFBRSxTQUFTO2lCQUNoQixDQUFDO3FCQUNELE9BQU8sQ0FBQyxTQUFTLEVBQUUsRUFBRSxDQUFDO1lBTnpCLENBTXlCO1NBQzVCLENBQUM7UUFFRixJQUFJLGNBQWMsRUFBRTtZQUNsQixjQUFjLENBQUMsS0FBSyx3QkFDZixTQUFTLEdBQ1QsSUFBSSxDQUFDLG9CQUFvQixFQUM1QixDQUFDLEVBQUUsQ0FBQyxRQUFRLEVBQUU7Z0JBRWQsSUFBSSxLQUFLLENBQUM7Z0JBRVYsSUFBSSxPQUFNLENBQUMsS0FBSyxDQUFDLEtBQUssVUFBVSxFQUFFO29CQUNoQyxLQUFLLEdBQUcsSUFBSSxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUM7aUJBQzVCO3FCQUFNO29CQUNMLEtBQUssR0FBRyxRQUFRLENBQUMsV0FBVyxDQUFDLE9BQU8sQ0FBQyxDQUFDO29CQUN0QyxLQUFLLENBQUMsU0FBUyxDQUFDLE9BQU8sRUFBRSxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUM7aUJBQ3RDO2dCQUVELEtBQUksQ0FBQyxHQUFHLENBQUMsYUFBYSxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUMsQ0FBQztnQkFDNUMsS0FBSSxDQUFDLEdBQUcsQ0FBQyxhQUFhLENBQUMsS0FBSyxFQUFFLENBQUM7WUFDakMsQ0FBQyxDQUFDLENBQUM7U0FDSjtJQUNILENBQUM7O2dCQWhEdUIsVUFBVTs7SUFRbEM7UUFEQyxLQUFLLEVBQUU7O3lFQUNxQjtJQVpsQix1QkFBdUI7UUFIbkMsU0FBUyxDQUFDO1lBQ1QsUUFBUSxFQUFFLGtCQUFrQjtTQUM3QixDQUFDO3lDQUt3QixVQUFVO09BSnZCLHVCQUF1QixDQXFEbkM7SUFBRCw4QkFBQztDQUFBLEFBckRELElBcURDO1NBckRZLHVCQUF1QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERpcmVjdGl2ZSwgRWxlbWVudFJlZiwgSW5wdXQsIE9uSW5pdCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IFRpbnlEYXRlUGlja2VyIGZyb20gJ3RpbnktZGF0ZS1waWNrZXInO1xuXG5ARGlyZWN0aXZlKHtcbiAgc2VsZWN0b3I6ICdbc3Bya0RhdGVwaWNrZXJdJ1xufSlcbmV4cG9ydCBjbGFzcyBTcHJrRGF0ZXBpY2tlckRpcmVjdGl2ZSBpbXBsZW1lbnRzIE9uSW5pdCB7XG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBjb25zdHJ1Y3RvcihwdWJsaWMgcmVmOiBFbGVtZW50UmVmKSB7fVxuXG4gIC8qKlxuICAgKiBFeHBvc2VzIGNvbmZpZ3VyYXRpb24gcHJvdmlkZWRcbiAgICogYnkgYHRpbnktZGF0ZS1waWNrZXJgLFxuICAgKiBzZWUgW2dpdGh1Yl0oaHR0cHM6Ly9naXRodWIuY29tL2NocmlzZGF2aWVzL3RpbnktZGF0ZS1waWNrZXIpIGZvciBkb2N1bWVudGF0aW9uLlxuICAgKi9cbiAgQElucHV0KClcbiAgc3Bya0RhdGVQaWNrZXJDb25maWc6IG9iamVjdDtcblxuICBuZ09uSW5pdCgpOiB2b2lkIHtcbiAgICBjb25zdCBpbnB1dCA9IHRoaXMucmVmLm5hdGl2ZUVsZW1lbnQ7XG4gICAgY29uc3QgdGRwQ29uZmlnID0ge1xuICAgICAgbW9kZTogJ2RwLWJlbG93JyxcbiAgICAgIGxhbmc6IHtcbiAgICAgICAgZGF5czogWydTJywgJ00nLCAnVCcsICdXJywgJ1QnLCAnRicsICdTJ11cbiAgICAgIH0sXG4gICAgICBtaW46ICcwMS8xLzIwMDgnLFxuICAgICAgbWF4OiAnMDEvMS8yMDY4JyxcbiAgICAgIGZvcm1hdDogZGF0ZSA9PlxuICAgICAgICBkYXRlXG4gICAgICAgICAgLnRvTG9jYWxlRGF0ZVN0cmluZygnZW4tVVMnLCB7XG4gICAgICAgICAgICBtb250aDogJzItZGlnaXQnLFxuICAgICAgICAgICAgZGF5OiAnMi1kaWdpdCcsXG4gICAgICAgICAgICB5ZWFyOiAnbnVtZXJpYydcbiAgICAgICAgICB9KVxuICAgICAgICAgIC5yZXBsYWNlKC9bXiAtfl0vZywgJycpXG4gICAgfTtcblxuICAgIGlmIChUaW55RGF0ZVBpY2tlcikge1xuICAgICAgVGlueURhdGVQaWNrZXIoaW5wdXQsIHtcbiAgICAgICAgLi4udGRwQ29uZmlnLFxuICAgICAgICAuLi50aGlzLnNwcmtEYXRlUGlja2VyQ29uZmlnXG4gICAgICB9KS5vbignc2VsZWN0JywgKCkgPT4ge1xuXG4gICAgICAgIGxldCBldmVudDtcblxuICAgICAgICBpZiAodHlwZW9mKEV2ZW50KSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgIGV2ZW50ID0gbmV3IEV2ZW50KCdpbnB1dCcpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGV2ZW50ID0gZG9jdW1lbnQuY3JlYXRlRXZlbnQoJ0V2ZW50Jyk7XG4gICAgICAgICAgZXZlbnQuaW5pdEV2ZW50KCdpbnB1dCcsIHRydWUsIHRydWUpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5yZWYubmF0aXZlRWxlbWVudC5kaXNwYXRjaEV2ZW50KGV2ZW50KTtcbiAgICAgICAgdGhpcy5yZWYubmF0aXZlRWxlbWVudC5mb2N1cygpO1xuICAgICAgfSk7XG4gICAgfVxuICB9XG59XG4iXX0=