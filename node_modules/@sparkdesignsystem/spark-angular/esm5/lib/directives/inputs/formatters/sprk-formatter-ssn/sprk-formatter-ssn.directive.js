import { __decorate, __metadata } from "tslib";
import { Directive, ElementRef, HostListener } from '@angular/core';
var SprkFormatterSsnDirective = /** @class */ (function () {
    function SprkFormatterSsnDirective(ref) {
        this.ref = ref;
    }
    SprkFormatterSsnDirective.prototype.onFocus = function (value) {
        this.ref.nativeElement.value = this.formatSSN(value);
    };
    SprkFormatterSsnDirective.prototype.formatSSN = function (value) {
        var m = value.match(/(^(?!666|000|9\d{2})\d{3}([-]{0,1})(?!00)\d{2}\1(?!0{4})\2\d{4}$)|^$/);
        if (m) {
            var val_1 = value.trim().replace(/[ -]/g, '');
            var newVal_1 = '';
            var sizes = [3, 2, 4];
            sizes.forEach(function (size) {
                if (val_1.length > size) {
                    newVal_1 += val_1.substr(0, size) + "-";
                    val_1 = val_1.substr(size);
                }
            });
            newVal_1 += val_1;
            return newVal_1;
        }
        return value;
    };
    SprkFormatterSsnDirective.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    __decorate([
        HostListener('input', ['$event.target.value']),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [Object]),
        __metadata("design:returntype", void 0)
    ], SprkFormatterSsnDirective.prototype, "onFocus", null);
    SprkFormatterSsnDirective = __decorate([
        Directive({
            selector: '[sprkFormatterSsn]'
        }),
        __metadata("design:paramtypes", [ElementRef])
    ], SprkFormatterSsnDirective);
    return SprkFormatterSsnDirective;
}());
export { SprkFormatterSsnDirective };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3Byay1mb3JtYXR0ZXItc3NuLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BzcGFya2Rlc2lnbnN5c3RlbS9zcGFyay1hbmd1bGFyLyIsInNvdXJjZXMiOlsibGliL2RpcmVjdGl2ZXMvaW5wdXRzL2Zvcm1hdHRlcnMvc3Byay1mb3JtYXR0ZXItc3NuL3NwcmstZm9ybWF0dGVyLXNzbi5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsVUFBVSxFQUFFLFlBQVksRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUtwRTtJQUNFLG1DQUFtQixHQUFlO1FBQWYsUUFBRyxHQUFILEdBQUcsQ0FBWTtJQUFHLENBQUM7SUFHdEMsMkNBQU8sR0FBUCxVQUFRLEtBQUs7UUFDWCxJQUFJLENBQUMsR0FBRyxDQUFDLGFBQWEsQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUN2RCxDQUFDO0lBRUQsNkNBQVMsR0FBVCxVQUFVLEtBQUs7UUFDYixJQUFNLENBQUMsR0FBRyxLQUFLLENBQUMsS0FBSyxDQUNuQixzRUFBc0UsQ0FDdkUsQ0FBQztRQUNGLElBQUksQ0FBQyxFQUFFO1lBQ0wsSUFBSSxLQUFHLEdBQUcsS0FBSyxDQUFDLElBQUksRUFBRSxDQUFDLE9BQU8sQ0FBQyxPQUFPLEVBQUUsRUFBRSxDQUFDLENBQUM7WUFDNUMsSUFBSSxRQUFNLEdBQUcsRUFBRSxDQUFDO1lBQ2hCLElBQU0sS0FBSyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztZQUV4QixLQUFLLENBQUMsT0FBTyxDQUFDLFVBQUEsSUFBSTtnQkFDaEIsSUFBSSxLQUFHLENBQUMsTUFBTSxHQUFHLElBQUksRUFBRTtvQkFDckIsUUFBTSxJQUFPLEtBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxNQUFHLENBQUM7b0JBQ3BDLEtBQUcsR0FBRyxLQUFHLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDO2lCQUN4QjtZQUNILENBQUMsQ0FBQyxDQUFDO1lBRUgsUUFBTSxJQUFJLEtBQUcsQ0FBQztZQUNkLE9BQU8sUUFBTSxDQUFDO1NBQ2Y7UUFDRCxPQUFPLEtBQUssQ0FBQztJQUNmLENBQUM7O2dCQTNCdUIsVUFBVTs7SUFHbEM7UUFEQyxZQUFZLENBQUMsT0FBTyxFQUFFLENBQUMscUJBQXFCLENBQUMsQ0FBQzs7Ozs0REFHOUM7SUFOVSx5QkFBeUI7UUFIckMsU0FBUyxDQUFDO1lBQ1QsUUFBUSxFQUFFLG9CQUFvQjtTQUMvQixDQUFDO3lDQUV3QixVQUFVO09BRHZCLHlCQUF5QixDQTZCckM7SUFBRCxnQ0FBQztDQUFBLEFBN0JELElBNkJDO1NBN0JZLHlCQUF5QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERpcmVjdGl2ZSwgRWxlbWVudFJlZiwgSG9zdExpc3RlbmVyIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbkBEaXJlY3RpdmUoe1xuICBzZWxlY3RvcjogJ1tzcHJrRm9ybWF0dGVyU3NuXSdcbn0pXG5leHBvcnQgY2xhc3MgU3Bya0Zvcm1hdHRlclNzbkRpcmVjdGl2ZSB7XG4gIGNvbnN0cnVjdG9yKHB1YmxpYyByZWY6IEVsZW1lbnRSZWYpIHt9XG5cbiAgQEhvc3RMaXN0ZW5lcignaW5wdXQnLCBbJyRldmVudC50YXJnZXQudmFsdWUnXSlcbiAgb25Gb2N1cyh2YWx1ZSkge1xuICAgIHRoaXMucmVmLm5hdGl2ZUVsZW1lbnQudmFsdWUgPSB0aGlzLmZvcm1hdFNTTih2YWx1ZSk7XG4gIH1cblxuICBmb3JtYXRTU04odmFsdWUpOiBzdHJpbmcge1xuICAgIGNvbnN0IG0gPSB2YWx1ZS5tYXRjaChcbiAgICAgIC8oXig/ITY2NnwwMDB8OVxcZHsyfSlcXGR7M30oWy1dezAsMX0pKD8hMDApXFxkezJ9XFwxKD8hMHs0fSlcXDJcXGR7NH0kKXxeJC9cbiAgICApO1xuICAgIGlmIChtKSB7XG4gICAgICBsZXQgdmFsID0gdmFsdWUudHJpbSgpLnJlcGxhY2UoL1sgLV0vZywgJycpO1xuICAgICAgbGV0IG5ld1ZhbCA9ICcnO1xuICAgICAgY29uc3Qgc2l6ZXMgPSBbMywgMiwgNF07XG5cbiAgICAgIHNpemVzLmZvckVhY2goc2l6ZSA9PiB7XG4gICAgICAgIGlmICh2YWwubGVuZ3RoID4gc2l6ZSkge1xuICAgICAgICAgIG5ld1ZhbCArPSBgJHt2YWwuc3Vic3RyKDAsIHNpemUpfS1gO1xuICAgICAgICAgIHZhbCA9IHZhbC5zdWJzdHIoc2l6ZSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuXG4gICAgICBuZXdWYWwgKz0gdmFsO1xuICAgICAgcmV0dXJuIG5ld1ZhbDtcbiAgICB9XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9XG59XG4iXX0=