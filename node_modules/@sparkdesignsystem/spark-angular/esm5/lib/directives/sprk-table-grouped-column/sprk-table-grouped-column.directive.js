import { __decorate, __metadata } from "tslib";
import { Directive, ElementRef, Input, OnInit } from '@angular/core';
var SprkTableGroupedColumnDirective = /** @class */ (function () {
    /**
     * @ignore
     */
    function SprkTableGroupedColumnDirective(ref) {
        this.ref = ref;
    }
    /**
     * @ignore
     */
    SprkTableGroupedColumnDirective.prototype.getClasses = function () {
        var classArray = ['sprk-b-Table__grouped-column'];
        if (this.additionalClasses) {
            this.additionalClasses.split(' ').forEach(function (className) {
                classArray.push(className);
            });
        }
        return classArray;
    };
    SprkTableGroupedColumnDirective.prototype.ngOnInit = function () {
        var _this = this;
        this.getClasses().forEach(function (className) {
            _this.ref.nativeElement.classList.add(className);
        });
    };
    SprkTableGroupedColumnDirective.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], SprkTableGroupedColumnDirective.prototype, "additionalClasses", void 0);
    SprkTableGroupedColumnDirective = __decorate([
        Directive({
            selector: '[sprkTableGroupedColumn]'
        }),
        __metadata("design:paramtypes", [ElementRef])
    ], SprkTableGroupedColumnDirective);
    return SprkTableGroupedColumnDirective;
}());
export { SprkTableGroupedColumnDirective };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3Byay10YWJsZS1ncm91cGVkLWNvbHVtbi5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9Ac3BhcmtkZXNpZ25zeXN0ZW0vc3BhcmstYW5ndWxhci8iLCJzb3VyY2VzIjpbImxpYi9kaXJlY3RpdmVzL3NwcmstdGFibGUtZ3JvdXBlZC1jb2x1bW4vc3Byay10YWJsZS1ncm91cGVkLWNvbHVtbi5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsVUFBVSxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFLckU7SUEyQkU7O09BRUc7SUFDSCx5Q0FBbUIsR0FBZTtRQUFmLFFBQUcsR0FBSCxHQUFHLENBQVk7SUFBRyxDQUFDO0lBckJ0Qzs7T0FFRztJQUNILG9EQUFVLEdBQVY7UUFDRSxJQUFNLFVBQVUsR0FBRyxDQUFDLDhCQUE4QixDQUFDLENBQUM7UUFDcEQsSUFBSSxJQUFJLENBQUMsaUJBQWlCLEVBQUU7WUFDMUIsSUFBSSxDQUFDLGlCQUFpQixDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxPQUFPLENBQUMsVUFBQSxTQUFTO2dCQUNqRCxVQUFVLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO1lBQzdCLENBQUMsQ0FBQyxDQUFDO1NBQ0o7UUFDRCxPQUFPLFVBQVUsQ0FBQztJQUNwQixDQUFDO0lBRUQsa0RBQVEsR0FBUjtRQUFBLGlCQUlDO1FBSEMsSUFBSSxDQUFDLFVBQVUsRUFBRSxDQUFDLE9BQU8sQ0FBQyxVQUFBLFNBQVM7WUFDakMsS0FBSSxDQUFDLEdBQUcsQ0FBQyxhQUFhLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUMsQ0FBQztRQUNsRCxDQUFDLENBQUMsQ0FBQztJQUNMLENBQUM7O2dCQUl1QixVQUFVOztJQXZCbEM7UUFEQyxLQUFLLEVBQUU7OzhFQUNrQjtJQVBmLCtCQUErQjtRQUgzQyxTQUFTLENBQUM7WUFDVCxRQUFRLEVBQUUsMEJBQTBCO1NBQ3JDLENBQUM7eUNBK0J3QixVQUFVO09BOUJ2QiwrQkFBK0IsQ0ErQjNDO0lBQUQsc0NBQUM7Q0FBQSxBQS9CRCxJQStCQztTQS9CWSwrQkFBK0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEaXJlY3RpdmUsIEVsZW1lbnRSZWYsIElucHV0LCBPbkluaXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuQERpcmVjdGl2ZSh7XG4gIHNlbGVjdG9yOiAnW3NwcmtUYWJsZUdyb3VwZWRDb2x1bW5dJ1xufSlcbmV4cG9ydCBjbGFzcyBTcHJrVGFibGVHcm91cGVkQ29sdW1uRGlyZWN0aXZlIGltcGxlbWVudHMgT25Jbml0IHtcbiAvKipcbiAgKiBFeHBlY3RzIGEgc3BhY2Ugc2VwYXJhdGVkIHN0cmluZ1xuICAqIG9mIGNsYXNzZXMgdG8gYmUgYWRkZWQgdG8gdGhlXG4gICogZWxlbWVudC5cbiAgKi9cbiAgQElucHV0KClcbiAgYWRkaXRpb25hbENsYXNzZXM6IHN0cmluZztcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgZ2V0Q2xhc3NlcygpOiBzdHJpbmdbXSB7XG4gICAgY29uc3QgY2xhc3NBcnJheSA9IFsnc3Byay1iLVRhYmxlX19ncm91cGVkLWNvbHVtbiddO1xuICAgIGlmICh0aGlzLmFkZGl0aW9uYWxDbGFzc2VzKSB7XG4gICAgICB0aGlzLmFkZGl0aW9uYWxDbGFzc2VzLnNwbGl0KCcgJykuZm9yRWFjaChjbGFzc05hbWUgPT4ge1xuICAgICAgICBjbGFzc0FycmF5LnB1c2goY2xhc3NOYW1lKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gY2xhc3NBcnJheTtcbiAgfVxuXG4gIG5nT25Jbml0KCk6IHZvaWQge1xuICAgIHRoaXMuZ2V0Q2xhc3NlcygpLmZvckVhY2goY2xhc3NOYW1lID0+IHtcbiAgICAgIHRoaXMucmVmLm5hdGl2ZUVsZW1lbnQuY2xhc3NMaXN0LmFkZChjbGFzc05hbWUpO1xuICAgIH0pO1xuICB9XG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBjb25zdHJ1Y3RvcihwdWJsaWMgcmVmOiBFbGVtZW50UmVmKSB7fVxufVxuIl19