import { __decorate, __metadata } from "tslib";
import { Component, Input, ContentChildren, QueryList } from '@angular/core';
import { SprkListItemComponent } from '../sprk-list-item/sprk-list-item.component';
var SprkOrderedListComponent = /** @class */ (function () {
    function SprkOrderedListComponent() {
    }
    /**
     * @ignore
     */
    SprkOrderedListComponent.prototype.getClasses = function () {
        var classArray = ['sprk-b-List'];
        switch (this.listType) {
            case 'indented':
                classArray.push('sprk-b-List--indented');
                break;
            case 'bare':
                classArray.push('sprk-b-List--bare');
                break;
            default:
                break;
        }
        if (this.additionalClasses) {
            this.additionalClasses.split(' ').forEach(function (className) {
                classArray.push(className);
            });
        }
        return classArray.join(' ');
    };
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], SprkOrderedListComponent.prototype, "listType", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], SprkOrderedListComponent.prototype, "additionalClasses", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], SprkOrderedListComponent.prototype, "idString", void 0);
    __decorate([
        ContentChildren(SprkListItemComponent),
        __metadata("design:type", QueryList)
    ], SprkOrderedListComponent.prototype, "items", void 0);
    SprkOrderedListComponent = __decorate([
        Component({
            selector: 'sprk-ordered-list',
            template: "\n    <ol [ngClass]=\"getClasses()\" [attr.data-id]=\"idString\">\n      <li\n        *ngFor=\"let item of items\"\n        [attr.data-analytics]=\"item.analyticsString\"\n        [attr.data-id]=\"item.idString\"\n        [ngClass]=\"item.additionalClasses\"\n      >\n        <ng-container [ngTemplateOutlet]=\"item.content\"></ng-container>\n      </li>\n    </ol>\n  "
        }),
        __metadata("design:paramtypes", [])
    ], SprkOrderedListComponent);
    return SprkOrderedListComponent;
}());
export { SprkOrderedListComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3Byay1vcmRlcmVkLWxpc3QuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHNwYXJrZGVzaWduc3lzdGVtL3NwYXJrLWFuZ3VsYXIvIiwic291cmNlcyI6WyJsaWIvY29tcG9uZW50cy9zcHJrLW9yZGVyZWQtbGlzdC9zcHJrLW9yZGVyZWQtbGlzdC5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFFLGVBQWUsRUFBRSxTQUFTLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDN0UsT0FBTyxFQUFFLHFCQUFxQixFQUFFLE1BQU0sNENBQTRDLENBQUM7QUFpQm5GO0lBMERFO0lBQWUsQ0FBQztJQXpCaEI7O09BRUc7SUFDSCw2Q0FBVSxHQUFWO1FBQ0UsSUFBTSxVQUFVLEdBQWEsQ0FBQyxhQUFhLENBQUMsQ0FBQztRQUU3QyxRQUFRLElBQUksQ0FBQyxRQUFRLEVBQUU7WUFDckIsS0FBSyxVQUFVO2dCQUNiLFVBQVUsQ0FBQyxJQUFJLENBQUMsdUJBQXVCLENBQUMsQ0FBQztnQkFDekMsTUFBTTtZQUNSLEtBQUssTUFBTTtnQkFDVCxVQUFVLENBQUMsSUFBSSxDQUFDLG1CQUFtQixDQUFDLENBQUM7Z0JBQ3JDLE1BQU07WUFDUjtnQkFDRSxNQUFNO1NBQ1Q7UUFFRCxJQUFJLElBQUksQ0FBQyxpQkFBaUIsRUFBRTtZQUMxQixJQUFJLENBQUMsaUJBQWlCLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxVQUFBLFNBQVM7Z0JBQ2pELFVBQVUsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7WUFDN0IsQ0FBQyxDQUFDLENBQUM7U0FDSjtRQUVELE9BQU8sVUFBVSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUM5QixDQUFDO0lBbkREO1FBREMsS0FBSyxFQUFFOzs4REFDUztJQU9qQjtRQURDLEtBQUssRUFBRTs7dUVBQ2tCO0lBVTFCO1FBREMsS0FBSyxFQUFFOzs4REFDUztJQU11QjtRQUF2QyxlQUFlLENBQUMscUJBQXFCLENBQUM7a0NBQVEsU0FBUzsyREFFdEQ7SUEvQlMsd0JBQXdCO1FBZnBDLFNBQVMsQ0FBQztZQUNULFFBQVEsRUFBRSxtQkFBbUI7WUFDN0IsUUFBUSxFQUFFLG9YQVdUO1NBQ0YsQ0FBQzs7T0FDVyx3QkFBd0IsQ0EyRHBDO0lBQUQsK0JBQUM7Q0FBQSxBQTNERCxJQTJEQztTQTNEWSx3QkFBd0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIElucHV0LCBDb250ZW50Q2hpbGRyZW4sIFF1ZXJ5TGlzdCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgU3Bya0xpc3RJdGVtQ29tcG9uZW50IH0gZnJvbSAnLi4vc3Byay1saXN0LWl0ZW0vc3Byay1saXN0LWl0ZW0uY29tcG9uZW50JztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnc3Byay1vcmRlcmVkLWxpc3QnLFxuICB0ZW1wbGF0ZTogYFxuICAgIDxvbCBbbmdDbGFzc109XCJnZXRDbGFzc2VzKClcIiBbYXR0ci5kYXRhLWlkXT1cImlkU3RyaW5nXCI+XG4gICAgICA8bGlcbiAgICAgICAgKm5nRm9yPVwibGV0IGl0ZW0gb2YgaXRlbXNcIlxuICAgICAgICBbYXR0ci5kYXRhLWFuYWx5dGljc109XCJpdGVtLmFuYWx5dGljc1N0cmluZ1wiXG4gICAgICAgIFthdHRyLmRhdGEtaWRdPVwiaXRlbS5pZFN0cmluZ1wiXG4gICAgICAgIFtuZ0NsYXNzXT1cIml0ZW0uYWRkaXRpb25hbENsYXNzZXNcIlxuICAgICAgPlxuICAgICAgICA8bmctY29udGFpbmVyIFtuZ1RlbXBsYXRlT3V0bGV0XT1cIml0ZW0uY29udGVudFwiPjwvbmctY29udGFpbmVyPlxuICAgICAgPC9saT5cbiAgICA8L29sPlxuICBgXG59KVxuZXhwb3J0IGNsYXNzIFNwcmtPcmRlcmVkTGlzdENvbXBvbmVudCB7XG4gIC8qKlxuICAgKiBXaWxsIGNhdXNlIHRoZSBhcHByb3ByaWF0ZSB2YXJpYW50IHR5cGUgdG8gcmVuZGVyLlxuICAgKiBDYW4gYmUgYGJhcmVgIG9yIGBpbmRlbnRlZGAuXG4gICAqL1xuICBASW5wdXQoKVxuICBsaXN0VHlwZTogc3RyaW5nO1xuICAvKipcbiAgICogRXhwZWN0cyBhIHNwYWNlIHNlcGFyYXRlZCBzdHJpbmdcbiAgICogb2YgY2xhc3NlcyB0byBiZSBhZGRlZCB0byB0aGVcbiAgICogY29tcG9uZW50LlxuICAgKi9cbiAgQElucHV0KClcbiAgYWRkaXRpb25hbENsYXNzZXM6IHN0cmluZztcbiAgLyoqXG4gICAqIFRoZSB2YWx1ZSBzdXBwbGllZCB3aWxsIGJlIGFzc2lnbmVkXG4gICAqIHRvIHRoZSBgZGF0YS1pZGAgYXR0cmlidXRlIG9uIHRoZVxuICAgKiBjb21wb25lbnQuIFRoaXMgaXMgaW50ZW5kZWQgdG8gYmVcbiAgICogdXNlZCBhcyBhIHNlbGVjdG9yIGZvciBhdXRvbWF0ZWRcbiAgICogdG9vbHMuIFRoaXMgdmFsdWUgc2hvdWxkIGJlIHVuaXF1ZVxuICAgKiBwZXIgcGFnZS5cbiAgICovXG4gIEBJbnB1dCgpXG4gIGlkU3RyaW5nOiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIFRoaXMgY29tcG9uZW50IGV4cGVjdHMgY2hpbGRyZW5cbiAgICogY29tcG9uZW50cyBvZiBgPHNwcmstbGlzdC1pdGVtPjwvPHNwcmstbGlzdC1pdGVtPmAuXG4gICAqL1xuICBAQ29udGVudENoaWxkcmVuKFNwcmtMaXN0SXRlbUNvbXBvbmVudCkgaXRlbXM6IFF1ZXJ5TGlzdDxcbiAgICBTcHJrTGlzdEl0ZW1Db21wb25lbnRcbiAgPjtcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgZ2V0Q2xhc3NlcygpOiBzdHJpbmcge1xuICAgIGNvbnN0IGNsYXNzQXJyYXk6IHN0cmluZ1tdID0gWydzcHJrLWItTGlzdCddO1xuXG4gICAgc3dpdGNoICh0aGlzLmxpc3RUeXBlKSB7XG4gICAgICBjYXNlICdpbmRlbnRlZCc6XG4gICAgICAgIGNsYXNzQXJyYXkucHVzaCgnc3Byay1iLUxpc3QtLWluZGVudGVkJyk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAnYmFyZSc6XG4gICAgICAgIGNsYXNzQXJyYXkucHVzaCgnc3Byay1iLUxpc3QtLWJhcmUnKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICBicmVhaztcbiAgICB9XG5cbiAgICBpZiAodGhpcy5hZGRpdGlvbmFsQ2xhc3Nlcykge1xuICAgICAgdGhpcy5hZGRpdGlvbmFsQ2xhc3Nlcy5zcGxpdCgnICcpLmZvckVhY2goY2xhc3NOYW1lID0+IHtcbiAgICAgICAgY2xhc3NBcnJheS5wdXNoKGNsYXNzTmFtZSk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gY2xhc3NBcnJheS5qb2luKCcgJyk7XG4gIH1cbiAgY29uc3RydWN0b3IoKSB7fVxufVxuIl19