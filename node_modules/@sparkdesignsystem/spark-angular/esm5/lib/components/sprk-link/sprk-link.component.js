import { __decorate, __metadata } from "tslib";
import { Component, Input } from '@angular/core';
import { Router } from '@angular/router';
var SprkLinkComponent = /** @class */ (function () {
    /**
     * @ignore
     */
    function SprkLinkComponent(router) {
        this.router = router;
        /**
         * By default, the component determines if
         * the `href` is an external or internal link
         * by looking for the `:` character in the
         * `href` string. If external link functionality
         * is desired with an `href` value that contains
         * a `:` set this input to true. This overrides
         * the default and avoids using the Angular Router.
         */
        this.isExternal = false;
    }
    SprkLinkComponent.prototype.ngOnInit = function () {
        // This message is split up like this so that we can keep the line
        // length down in the editor while also logging a single unformatted
        // line of text in the console.
        var message = 'Spark Design System Warning: Spark Link has been ' +
            'refactored to be an Angular Directive. The old Angular Component ' +
            'version has been deprecated. This version will be permanently removed ' +
            'from Spark in our Summer 2020 release. To update to the new version, ' +
            'replace any instance of the <sprk-link> component in your codebase with ' +
            'the new Directive syntax.';
        console.warn(message);
        // Sets the default href if none provided
        if (this.href === '' || this.href === null || this.href === undefined) {
            this.href = '#';
            return;
        }
        // Build jump link's href
        if (this.isJumpLink(this.href)) {
            this.href = "" + this.getPathWithoutHash(this.router.url) + this.href;
        }
    };
    /**
     * @ignore
     */
    SprkLinkComponent.prototype.isExternalLink = function (value) {
        return new RegExp('^.*:', 'i').test(value);
    };
    /**
     * @ignore
     */
    SprkLinkComponent.prototype.isJumpLinkWithPage = function (value) {
        return new RegExp('^.*#.+', 'i').test(value);
    };
    /**
     * @ignore
     */
    SprkLinkComponent.prototype.isJumpLink = function (value) {
        return new RegExp('^#.+', 'i').test(value);
    };
    /**
     * @ignore
     */
    SprkLinkComponent.prototype.isNoActionLink = function (value) {
        return value === '#';
    };
    /**
     * @ignore
     */
    SprkLinkComponent.prototype.getPathWithoutHash = function (value) {
        return value.split('#')[0];
    };
    /**
     * @ignore
     */
    SprkLinkComponent.prototype.scrollToId = function () {
        var elementID = this.href.split('#').pop();
        var element = document.getElementById(elementID);
        if (element) {
            element.scrollIntoView();
        }
    };
    /**
     * @ignore
     */
    SprkLinkComponent.prototype.handleClick = function (event) {
        // Let browser handle route if external Link
        if (this.isExternalLink(this.href) || this.isExternal) {
            return;
        }
        event.preventDefault();
        // Prevent default and return
        if (this.isNoActionLink(this.href)) {
            return;
        }
        else if (this.isJumpLinkWithPage(this.href)) {
            if (this.getPathWithoutHash(this.href) ===
                this.getPathWithoutHash(this.router.url)) {
                this.scrollToId();
            }
            else {
                this.router.navigateByUrl(this.href);
            }
        }
        else {
            this.router.navigateByUrl(this.href);
        }
    };
    /**
     * @ignore
     */
    SprkLinkComponent.prototype.getClasses = function () {
        var classArray = [];
        switch (this.linkType) {
            case 'unstyled':
                break;
            case 'simple':
                classArray.push('sprk-b-Link sprk-b-Link--simple');
                break;
            case 'plain':
                classArray.push('sprk-b-Link sprk-b-Link--plain');
                break;
            case 'icon':
                classArray.push('sprk-b-Link sprk-b-Link--simple sprk-b-Link--has-icon');
                break;
            default:
                classArray.push('sprk-b-Link');
                break;
        }
        if (this.isDisabled) {
            classArray.push('sprk-b-Link--disabled');
        }
        if (this.additionalClasses) {
            this.additionalClasses.split(' ').forEach(function (className) {
                classArray.push(className);
            });
        }
        return classArray.join(' ');
    };
    SprkLinkComponent.ctorParameters = function () { return [
        { type: Router }
    ]; };
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], SprkLinkComponent.prototype, "linkType", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], SprkLinkComponent.prototype, "href", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], SprkLinkComponent.prototype, "idString", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], SprkLinkComponent.prototype, "role", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], SprkLinkComponent.prototype, "id", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], SprkLinkComponent.prototype, "ariaControls", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], SprkLinkComponent.prototype, "ariaLabelledby", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], SprkLinkComponent.prototype, "ariaSelected", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], SprkLinkComponent.prototype, "ariaHidden", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], SprkLinkComponent.prototype, "ariaCurrent", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], SprkLinkComponent.prototype, "ariaExpanded", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], SprkLinkComponent.prototype, "ariaHasPopUp", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], SprkLinkComponent.prototype, "ariaLabel", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], SprkLinkComponent.prototype, "analyticsString", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], SprkLinkComponent.prototype, "target", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], SprkLinkComponent.prototype, "additionalClasses", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Boolean)
    ], SprkLinkComponent.prototype, "isDisabled", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], SprkLinkComponent.prototype, "isExternal", void 0);
    SprkLinkComponent = __decorate([
        Component({
            selector: 'sprk-link',
            template: "\n    <a\n      (click)=\"handleClick($event)\"\n      [ngClass]=\"getClasses()\"\n      [href]=\"href\"\n      [attr.data-analytics]=\"analyticsString\"\n      [attr.target]=\"target\"\n      [attr.data-id]=\"idString\"\n      [attr.disabled]=\"isDisabled\"\n      [attr.aria-controls]=\"ariaControls\"\n      [attr.aria-label]=\"ariaLabel\"\n      [attr.aria-labelledby]=\"ariaLabelledby\"\n      [attr.aria-haspopup]=\"ariaHasPopUp\"\n      [attr.role]=\"role\"\n      [attr.id]=\"id\"\n      [attr.aria-current]=\"ariaCurrent\"\n      [attr.aria-expanded]=\"ariaExpanded\"\n      [attr.aria-hidden]=\"ariaHidden\"\n      [attr.aria-selected]=\"ariaSelected\"\n    >\n      <ng-content></ng-content>\n    </a>\n  "
        })
        /**
         * @deprecate This component will be removed in
         * a future release in favor of the `sprkLink` directive.
         * Please use the Spark Link
         * directive.
         */
        ,
        __metadata("design:paramtypes", [Router])
    ], SprkLinkComponent);
    return SprkLinkComponent;
}());
export { SprkLinkComponent };
//# sourceMappingURL=data:application/json;base64,