import { __decorate, __metadata } from "tslib";
import { Component, Input, Output, ElementRef, HostListener, EventEmitter } from '@angular/core';
var SprkDropdownComponent = /** @class */ (function () {
    /**
     * @ignore
     */
    function SprkDropdownComponent(ref) {
        this.ref = ref;
        /**
         * The variant of the Dropdown to render.
         */
        this.dropdownType = 'base';
        /**
         * If `true`, the Dropdown will be open when rendered.
         */
        this.isOpen = false;
        /**
         * The event that is
         * emitted from the Dropdown when a choice
         * is clicked. The event contains the value
         * of the choice that was clicked.
         */
        this.choiceMade = new EventEmitter();
    }
    /**
     * @ignore
     */
    SprkDropdownComponent.prototype.toggle = function (event) {
        event.preventDefault();
        this.isOpen = !this.isOpen;
    };
    SprkDropdownComponent.prototype.onClick = function (event) {
        if (!this.ref.nativeElement.contains(event.target) ||
            event.target.classList.contains('sprk-c-MastheadMask')) {
            this.hideDropdown();
        }
    };
    SprkDropdownComponent.prototype.onFocusin = function (event) {
        /* istanbul ignore else: angular focus event isnt setting e.target */
        if (!this.ref.nativeElement.contains(event.target) ||
            event.target.classList.contains('sprk-c-MastheadMask')) {
            this.hideDropdown();
        }
    };
    /**
     * @ignore
     */
    SprkDropdownComponent.prototype.choiceClick = function (event) {
        this.clearActiveChoices();
        var choiceIndex = event.currentTarget.getAttribute('data-sprk-dropdown-choice-index');
        var clickedChoice = this.choices[choiceIndex];
        if (this.dropdownType === 'informational' ||
            this.dropdownType === 'mastheadSelector') {
            this.setActiveChoice(event);
            this.updateTriggerText(event);
        }
        this.hideDropdown();
        this.choiceMade.emit(clickedChoice['value']);
    };
    /**
     * @ignore
     */
    SprkDropdownComponent.prototype.setActiveChoice = function (event) {
        var choiceIndex = event.currentTarget.getAttribute('data-sprk-dropdown-choice-index');
        this.choices[choiceIndex]['active'] = true;
    };
    /**
     * @ignore
     */
    SprkDropdownComponent.prototype.updateTriggerText = function (event) {
        var choiceIndex = event.currentTarget.getAttribute('data-sprk-dropdown-choice-index');
        this.triggerText = this.choices[choiceIndex]['value'];
    };
    /**
     * @ignore
     */
    SprkDropdownComponent.prototype.clearActiveChoices = function () {
        this.choices.forEach(function (choice) {
            choice['active'] = false;
        });
    };
    /**
     * @ignore
     */
    SprkDropdownComponent.prototype.hideDropdown = function () {
        this.isOpen = false;
    };
    /**
     * @ignore
     */
    SprkDropdownComponent.prototype.getClasses = function () {
        var classArray = ['sprk-c-Dropdown'];
        if (this.additionalClasses) {
            this.additionalClasses.split(' ').forEach(function (className) {
                classArray.push(className);
            });
        }
        return classArray.join(' ');
    };
    /**
     * @ignore
     */
    SprkDropdownComponent.prototype.getTriggerClasses = function () {
        var classArray = [];
        if (this.additionalTriggerClasses) {
            this.additionalTriggerClasses.split(' ').forEach(function (className) {
                classArray.push(className);
            });
        }
        return classArray.join(' ');
    };
    /**
     * @ignore
     */
    SprkDropdownComponent.prototype.getTriggerTextClasses = function () {
        var classArray = [''];
        if (this.additionalTriggerTextClasses) {
            this.additionalTriggerTextClasses.split(' ').forEach(function (className) {
                classArray.push(className);
            });
        }
        return classArray.join(' ');
    };
    SprkDropdownComponent.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], SprkDropdownComponent.prototype, "dropdownType", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], SprkDropdownComponent.prototype, "additionalClasses", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], SprkDropdownComponent.prototype, "additionalIconClasses", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], SprkDropdownComponent.prototype, "additionalTriggerClasses", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], SprkDropdownComponent.prototype, "additionalTriggerTextClasses", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], SprkDropdownComponent.prototype, "idString", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], SprkDropdownComponent.prototype, "analyticsString", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], SprkDropdownComponent.prototype, "isOpen", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], SprkDropdownComponent.prototype, "title", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], SprkDropdownComponent.prototype, "selector", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Array)
    ], SprkDropdownComponent.prototype, "choices", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], SprkDropdownComponent.prototype, "triggerIconType", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], SprkDropdownComponent.prototype, "triggerText", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], SprkDropdownComponent.prototype, "screenReaderText", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], SprkDropdownComponent.prototype, "choiceMade", void 0);
    __decorate([
        HostListener('document:click', ['$event']),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [Object]),
        __metadata("design:returntype", void 0)
    ], SprkDropdownComponent.prototype, "onClick", null);
    __decorate([
        HostListener('document:focusin', ['$event']),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [Object]),
        __metadata("design:returntype", void 0)
    ], SprkDropdownComponent.prototype, "onFocusin", null);
    SprkDropdownComponent = __decorate([
        Component({
            selector: 'sprk-dropdown',
            template: "\n    <div\n      [ngClass]=\"{\n        'sprk-c-MastheadMask': isOpen && dropdownType === 'mastheadSelector'\n      }\"\n    >\n      <div [ngClass]=\"{ 'sprk-o-Box': dropdownType === 'mastheadSelector' }\">\n        <a\n          sprkLink\n          [ngClass]=\"getTriggerClasses()\"\n          (click)=\"toggle($event)\"\n          [idString]=\"idString\"\n          [analyticsString]=\"analyticsString\"\n          aria-haspopup=\"listbox\"\n          href=\"#\"\n          [attr.aria-label]=\"triggerText ? triggerText : (screenReaderText || 'Choose One')\"\n        >\n          <span [ngClass]=\"getTriggerTextClasses()\">{{ triggerText }}</span>\n          <span class=\"sprk-u-ScreenReaderText\">{{ screenReaderText }}</span>\n          <sprk-icon\n            [iconType]=\"triggerIconType\"\n            additionalClasses=\"sprk-u-mls sprk-c-Icon--stroke-current-color {{\n              additionalIconClasses\n            }}\"\n          ></sprk-icon>\n        </a>\n      </div>\n\n      <div [ngClass]=\"getClasses()\" *ngIf=\"isOpen\">\n        <div\n          class=\"sprk-c-Dropdown__header\"\n          *ngIf=\"dropdownType === 'mastheadSelector' || title || selector\"\n        >\n          <h2 class=\"sprk-c-Dropdown__title sprk-b-TypeBodyTwo\" *ngIf=\"title\">\n            {{ title }}\n          </h2>\n\n          <a\n            sprkLink\n            *ngIf=\"selector && !title\"\n            variant=\"plain\"\n            class=\"sprk-o-Stack sprk-o-Stack--split@xxs sprk-o-Stack--center-column sprk-u-Width-100\"\n            (click)=\"toggle($event)\"\n            [attr.aria-label]=\"title\"\n            href=\"#\"\n          >\n            <span\n              class=\"sprk-c-Dropdown__title sprk-b-TypeBodyTwo sprk-o-Stack__item sprk-o-Stack__item--flex@xxs\"\n              >{{ selector }}</span\n            >\n            <sprk-icon\n              [iconType]=\"triggerIconType\"\n              additionalClasses=\"sprk-c-Icon--stroke-current-color sprk-u-mls sprk-c-Icon--toggle sprk-Stack__item {{\n                additionalIconClasses\n              }}\"\n            ></sprk-icon>\n          </a>\n        </div>\n\n        <ul\n          class=\"sprk-c-Dropdown__links\"\n          role=\"listbox\"\n          [attr.aria-label]=\"title ? title : (screenReaderText || 'My Choices')\"\n        >\n          <li\n            class=\"sprk-c-Dropdown__item\"\n            *ngFor=\"let choice of choices; let i = index\"\n            [attr.data-sprk-dropdown-choice-index]=\"i\"\n            (click)=\"choiceClick($event)\"\n            [attr.aria-selected]=\"choice.active\"\n            role=\"option\"\n          >\n            <div *ngIf=\"choice.content; then content; else link\"></div>\n            <ng-template #link>\n              <a\n                sprkLink\n                variant=\"unstyled\"\n                [attr.href]=\"choice.href\"\n                [analyticsString]=\"choice.analyticsString\"\n                [ngClass]=\"{\n                  'sprk-c-Dropdown__link': true,\n                  'sprk-c-Dropdown__link--active': choice.active\n                }\"\n                [attr.aria-label]=\"choice.text\"\n                >{{ choice.text }}\n              </a>\n            </ng-template>\n            <ng-template #content>\n              <a\n                sprkLink\n                variant=\"unstyled\"\n                [attr.href]=\"choice.href\"\n                [analyticsString]=\"choice.analyticsString\"\n                [ngClass]=\"{\n                  'sprk-c-Dropdown__link': true,\n                  'sprk-c-Dropdown__link--active': choice.active\n                }\"\n                [attr.aria-label]=\"choice.content.title\"\n              >\n                <p class=\"sprk-b-TypeBodyOne\">{{ choice.content.title }}</p>\n                <p>{{ choice.content.infoLine1 }}</p>\n                <p>{{ choice.content.infoLine2 }}</p>\n              </a>\n            </ng-template>\n          </li>\n        </ul>\n        <ng-content select=\"[sprkDropdownFooter]\"></ng-content>\n      </div>\n    </div>\n  "
        }),
        __metadata("design:paramtypes", [ElementRef])
    ], SprkDropdownComponent);
    return SprkDropdownComponent;
}());
export { SprkDropdownComponent };
//# sourceMappingURL=data:application/json;base64,