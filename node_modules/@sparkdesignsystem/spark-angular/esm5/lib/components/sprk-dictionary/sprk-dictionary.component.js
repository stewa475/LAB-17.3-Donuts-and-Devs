import { __decorate, __metadata } from "tslib";
import { Component, Input } from '@angular/core';
var SprkDictionaryComponent = /** @class */ (function () {
    function SprkDictionaryComponent() {
        /**
         * The collection of key-value pairs to be rendered
         * into the component.
         */
        this.data = {};
        /**
         * Determines the variant of the dictionary component to render.
         * The only available option is `striped`.
         * Supplying no value will cause the base variant to be used.
         */
        this.dictionaryType = 'base';
        /**
         * @ignore
         * Used to grab all the keys from
         * objects.
         */
        this.objectKeys = Object.keys;
    }
    /**
     * @ignore
     */
    SprkDictionaryComponent.prototype.getClasses = function () {
        var classArray = ['sprk-c-Dictionary'];
        if (this.dictionaryType === 'striped') {
            classArray.push('sprk-c-Dictionary--striped');
        }
        if (this.additionalClasses) {
            this.additionalClasses.split(' ').forEach(function (className) {
                classArray.push(className);
            });
        }
        return classArray.join(' ');
    };
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], SprkDictionaryComponent.prototype, "data", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], SprkDictionaryComponent.prototype, "dictionaryType", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], SprkDictionaryComponent.prototype, "additionalClasses", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], SprkDictionaryComponent.prototype, "idString", void 0);
    SprkDictionaryComponent = __decorate([
        Component({
            selector: 'sprk-dictionary',
            template: "\n    <div [ngClass]=\"getClasses()\" [attr.data-id]=\"idString\">\n      <dl class=\"sprk-c-Dictionary__keyvaluepairs\">\n        <div\n          *ngFor=\"let key of objectKeys(data)\"\n          class=\"sprk-c-Dictionary__keyvaluepair\"\n        >\n          <dt\n            class=\"sprk-c-Dictionary__key sprk-b-Label sprk-b-Label--no-input\"\n          >\n            {{ key }}\n          </dt>\n          <dd class=\"sprk-c-Dictionary__value\">{{ data[key] }}</dd>\n        </div>\n      </dl>\n    </div>\n  "
        })
    ], SprkDictionaryComponent);
    return SprkDictionaryComponent;
}());
export { SprkDictionaryComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3Byay1kaWN0aW9uYXJ5LmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BzcGFya2Rlc2lnbnN5c3RlbS9zcGFyay1hbmd1bGFyLyIsInNvdXJjZXMiOlsibGliL2NvbXBvbmVudHMvc3Byay1kaWN0aW9uYXJ5L3NwcmstZGljdGlvbmFyeS5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBc0JqRDtJQUFBO1FBQ0U7OztXQUdHO1FBRUgsU0FBSSxHQUFXLEVBQUUsQ0FBQztRQUNsQjs7OztXQUlHO1FBRUgsbUJBQWMsR0FBRyxNQUFNLENBQUM7UUFrQnhCOzs7O1dBSUc7UUFDSCxlQUFVLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQztJQW9CM0IsQ0FBQztJQWxCQzs7T0FFRztJQUNILDRDQUFVLEdBQVY7UUFDRSxJQUFNLFVBQVUsR0FBYSxDQUFDLG1CQUFtQixDQUFDLENBQUM7UUFFbkQsSUFBSSxJQUFJLENBQUMsY0FBYyxLQUFLLFNBQVMsRUFBRTtZQUNyQyxVQUFVLENBQUMsSUFBSSxDQUFDLDRCQUE0QixDQUFDLENBQUM7U0FDL0M7UUFFRCxJQUFJLElBQUksQ0FBQyxpQkFBaUIsRUFBRTtZQUMxQixJQUFJLENBQUMsaUJBQWlCLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxVQUFBLFNBQVM7Z0JBQ2pELFVBQVUsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7WUFDN0IsQ0FBQyxDQUFDLENBQUM7U0FDSjtRQUVELE9BQU8sVUFBVSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUM5QixDQUFDO0lBakREO1FBREMsS0FBSyxFQUFFOzt5REFDVTtJQU9sQjtRQURDLEtBQUssRUFBRTs7bUVBQ2dCO0lBT3hCO1FBREMsS0FBSyxFQUFFOztzRUFDa0I7SUFVMUI7UUFEQyxLQUFLLEVBQUU7OzZEQUNTO0lBOUJOLHVCQUF1QjtRQXBCbkMsU0FBUyxDQUFDO1lBQ1QsUUFBUSxFQUFFLGlCQUFpQjtZQUMzQixRQUFRLEVBQUUscWdCQWdCVDtTQUNGLENBQUM7T0FDVyx1QkFBdUIsQ0F3RG5DO0lBQUQsOEJBQUM7Q0FBQSxBQXhERCxJQXdEQztTQXhEWSx1QkFBdUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIElucHV0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ3NwcmstZGljdGlvbmFyeScsXG4gIHRlbXBsYXRlOiBgXG4gICAgPGRpdiBbbmdDbGFzc109XCJnZXRDbGFzc2VzKClcIiBbYXR0ci5kYXRhLWlkXT1cImlkU3RyaW5nXCI+XG4gICAgICA8ZGwgY2xhc3M9XCJzcHJrLWMtRGljdGlvbmFyeV9fa2V5dmFsdWVwYWlyc1wiPlxuICAgICAgICA8ZGl2XG4gICAgICAgICAgKm5nRm9yPVwibGV0IGtleSBvZiBvYmplY3RLZXlzKGRhdGEpXCJcbiAgICAgICAgICBjbGFzcz1cInNwcmstYy1EaWN0aW9uYXJ5X19rZXl2YWx1ZXBhaXJcIlxuICAgICAgICA+XG4gICAgICAgICAgPGR0XG4gICAgICAgICAgICBjbGFzcz1cInNwcmstYy1EaWN0aW9uYXJ5X19rZXkgc3Byay1iLUxhYmVsIHNwcmstYi1MYWJlbC0tbm8taW5wdXRcIlxuICAgICAgICAgID5cbiAgICAgICAgICAgIHt7IGtleSB9fVxuICAgICAgICAgIDwvZHQ+XG4gICAgICAgICAgPGRkIGNsYXNzPVwic3Byay1jLURpY3Rpb25hcnlfX3ZhbHVlXCI+e3sgZGF0YVtrZXldIH19PC9kZD5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2RsPlxuICAgIDwvZGl2PlxuICBgXG59KVxuZXhwb3J0IGNsYXNzIFNwcmtEaWN0aW9uYXJ5Q29tcG9uZW50IHtcbiAgLyoqXG4gICAqIFRoZSBjb2xsZWN0aW9uIG9mIGtleS12YWx1ZSBwYWlycyB0byBiZSByZW5kZXJlZFxuICAgKiBpbnRvIHRoZSBjb21wb25lbnQuXG4gICAqL1xuICBASW5wdXQoKVxuICBkYXRhOiBvYmplY3QgPSB7fTtcbiAgLyoqXG4gICAqIERldGVybWluZXMgdGhlIHZhcmlhbnQgb2YgdGhlIGRpY3Rpb25hcnkgY29tcG9uZW50IHRvIHJlbmRlci5cbiAgICogVGhlIG9ubHkgYXZhaWxhYmxlIG9wdGlvbiBpcyBgc3RyaXBlZGAuXG4gICAqIFN1cHBseWluZyBubyB2YWx1ZSB3aWxsIGNhdXNlIHRoZSBiYXNlIHZhcmlhbnQgdG8gYmUgdXNlZC5cbiAgICovXG4gIEBJbnB1dCgpXG4gIGRpY3Rpb25hcnlUeXBlID0gJ2Jhc2UnO1xuICAvKipcbiAgICogRXhwZWN0cyBhIHNwYWNlIHNlcGFyYXRlZCBzdHJpbmdcbiAgICogb2YgY2xhc3NlcyB0byBiZSBhZGRlZCB0byB0aGVcbiAgICogY29tcG9uZW50LlxuICAgKi9cbiAgQElucHV0KClcbiAgYWRkaXRpb25hbENsYXNzZXM6IHN0cmluZztcbiAgLyoqXG4gICAqIFRoZSB2YWx1ZSBzdXBwbGllZCB3aWxsIGJlIGFzc2lnbmVkXG4gICAqIHRvIHRoZSBgZGF0YS1pZGAgYXR0cmlidXRlIG9uIHRoZVxuICAgKiBjb21wb25lbnQuIFRoaXMgaXMgaW50ZW5kZWQgdG8gYmVcbiAgICogdXNlZCBhcyBhIHNlbGVjdG9yIGZvciBhdXRvbWF0ZWRcbiAgICogdG9vbHMuIFRoaXMgdmFsdWUgc2hvdWxkIGJlIHVuaXF1ZVxuICAgKiBwZXIgcGFnZS5cbiAgICovXG4gIEBJbnB1dCgpXG4gIGlkU3RyaW5nOiBzdHJpbmc7XG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqIFVzZWQgdG8gZ3JhYiBhbGwgdGhlIGtleXMgZnJvbVxuICAgKiBvYmplY3RzLlxuICAgKi9cbiAgb2JqZWN0S2V5cyA9IE9iamVjdC5rZXlzO1xuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBnZXRDbGFzc2VzKCk6IHN0cmluZyB7XG4gICAgY29uc3QgY2xhc3NBcnJheTogc3RyaW5nW10gPSBbJ3NwcmstYy1EaWN0aW9uYXJ5J107XG5cbiAgICBpZiAodGhpcy5kaWN0aW9uYXJ5VHlwZSA9PT0gJ3N0cmlwZWQnKSB7XG4gICAgICBjbGFzc0FycmF5LnB1c2goJ3NwcmstYy1EaWN0aW9uYXJ5LS1zdHJpcGVkJyk7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuYWRkaXRpb25hbENsYXNzZXMpIHtcbiAgICAgIHRoaXMuYWRkaXRpb25hbENsYXNzZXMuc3BsaXQoJyAnKS5mb3JFYWNoKGNsYXNzTmFtZSA9PiB7XG4gICAgICAgIGNsYXNzQXJyYXkucHVzaChjbGFzc05hbWUpO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGNsYXNzQXJyYXkuam9pbignICcpO1xuICB9XG59XG4iXX0=