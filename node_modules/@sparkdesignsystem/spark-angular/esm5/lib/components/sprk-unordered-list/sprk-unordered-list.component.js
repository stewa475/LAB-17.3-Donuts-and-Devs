import { __decorate, __metadata } from "tslib";
import { Component, Input, ContentChildren, QueryList } from '@angular/core';
import { SprkListItemComponent } from '../sprk-list-item/sprk-list-item.component';
var SprkUnorderedListComponent = /** @class */ (function () {
    function SprkUnorderedListComponent() {
    }
    /**
     * @ignore
     */
    SprkUnorderedListComponent.prototype.getClasses = function () {
        var classArray = [''];
        switch (this.listType) {
            case 'indented':
                classArray.push('sprk-b-List');
                classArray.push('sprk-b-List--indented');
                break;
            case 'bare':
                classArray.push('sprk-b-List');
                classArray.push('sprk-b-List--bare');
                break;
            case 'horizontal':
                classArray.push('sprk-o-HorizontalList');
                break;
            default:
                break;
        }
        if (this.additionalClasses) {
            this.additionalClasses.split(' ').forEach(function (className) {
                classArray.push(className);
            });
        }
        return classArray.join(' ');
    };
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], SprkUnorderedListComponent.prototype, "listType", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], SprkUnorderedListComponent.prototype, "additionalClasses", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], SprkUnorderedListComponent.prototype, "idString", void 0);
    __decorate([
        ContentChildren(SprkListItemComponent),
        __metadata("design:type", QueryList)
    ], SprkUnorderedListComponent.prototype, "items", void 0);
    SprkUnorderedListComponent = __decorate([
        Component({
            selector: 'sprk-unordered-list',
            template: "\n    <ul [ngClass]=\"getClasses()\" [attr.data-id]=\"idString\">\n      <li\n        *ngFor=\"let item of items\"\n        [attr.data-analytics]=\"item.analyticsString\"\n        [attr.data-id]=\"item.idString\"\n        [ngClass]=\"item.additionalClasses\"\n      >\n        <ng-container [ngTemplateOutlet]=\"item.content\"></ng-container>\n      </li>\n    </ul>\n  "
        }),
        __metadata("design:paramtypes", [])
    ], SprkUnorderedListComponent);
    return SprkUnorderedListComponent;
}());
export { SprkUnorderedListComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3Byay11bm9yZGVyZWQtbGlzdC5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9Ac3BhcmtkZXNpZ25zeXN0ZW0vc3BhcmstYW5ndWxhci8iLCJzb3VyY2VzIjpbImxpYi9jb21wb25lbnRzL3NwcmstdW5vcmRlcmVkLWxpc3Qvc3Byay11bm9yZGVyZWQtbGlzdC5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFFLGVBQWUsRUFBRSxTQUFTLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDN0UsT0FBTyxFQUFFLHFCQUFxQixFQUFFLE1BQU0sNENBQTRDLENBQUM7QUFpQm5GO0lBK0RFO0lBQWUsQ0FBQztJQTlCaEI7O09BRUc7SUFDSCwrQ0FBVSxHQUFWO1FBQ0UsSUFBTSxVQUFVLEdBQWEsQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUVsQyxRQUFRLElBQUksQ0FBQyxRQUFRLEVBQUU7WUFDckIsS0FBSyxVQUFVO2dCQUNiLFVBQVUsQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUM7Z0JBQy9CLFVBQVUsQ0FBQyxJQUFJLENBQUMsdUJBQXVCLENBQUMsQ0FBQztnQkFDekMsTUFBTTtZQUNSLEtBQUssTUFBTTtnQkFDVCxVQUFVLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDO2dCQUMvQixVQUFVLENBQUMsSUFBSSxDQUFDLG1CQUFtQixDQUFDLENBQUM7Z0JBQ3JDLE1BQU07WUFDUixLQUFLLFlBQVk7Z0JBQ2YsVUFBVSxDQUFDLElBQUksQ0FBQyx1QkFBdUIsQ0FBQyxDQUFDO2dCQUN6QyxNQUFNO1lBQ1I7Z0JBQ0UsTUFBTTtTQUNUO1FBRUQsSUFBSSxJQUFJLENBQUMsaUJBQWlCLEVBQUU7WUFDMUIsSUFBSSxDQUFDLGlCQUFpQixDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxPQUFPLENBQUMsVUFBQSxTQUFTO2dCQUNqRCxVQUFVLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO1lBQzdCLENBQUMsQ0FBQyxDQUFDO1NBQ0o7UUFFRCxPQUFPLFVBQVUsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDOUIsQ0FBQztJQXhERDtRQURDLEtBQUssRUFBRTs7Z0VBQ1M7SUFPakI7UUFEQyxLQUFLLEVBQUU7O3lFQUNrQjtJQVUxQjtRQURDLEtBQUssRUFBRTs7Z0VBQ1M7SUFNdUI7UUFBdkMsZUFBZSxDQUFDLHFCQUFxQixDQUFDO2tDQUFRLFNBQVM7NkRBRXREO0lBL0JTLDBCQUEwQjtRQWZ0QyxTQUFTLENBQUM7WUFDVCxRQUFRLEVBQUUscUJBQXFCO1lBQy9CLFFBQVEsRUFBRSxvWEFXVDtTQUNGLENBQUM7O09BQ1csMEJBQTBCLENBZ0V0QztJQUFELGlDQUFDO0NBQUEsQUFoRUQsSUFnRUM7U0FoRVksMEJBQTBCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBJbnB1dCwgQ29udGVudENoaWxkcmVuLCBRdWVyeUxpc3QgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFNwcmtMaXN0SXRlbUNvbXBvbmVudCB9IGZyb20gJy4uL3NwcmstbGlzdC1pdGVtL3NwcmstbGlzdC1pdGVtLmNvbXBvbmVudCc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ3NwcmstdW5vcmRlcmVkLWxpc3QnLFxuICB0ZW1wbGF0ZTogYFxuICAgIDx1bCBbbmdDbGFzc109XCJnZXRDbGFzc2VzKClcIiBbYXR0ci5kYXRhLWlkXT1cImlkU3RyaW5nXCI+XG4gICAgICA8bGlcbiAgICAgICAgKm5nRm9yPVwibGV0IGl0ZW0gb2YgaXRlbXNcIlxuICAgICAgICBbYXR0ci5kYXRhLWFuYWx5dGljc109XCJpdGVtLmFuYWx5dGljc1N0cmluZ1wiXG4gICAgICAgIFthdHRyLmRhdGEtaWRdPVwiaXRlbS5pZFN0cmluZ1wiXG4gICAgICAgIFtuZ0NsYXNzXT1cIml0ZW0uYWRkaXRpb25hbENsYXNzZXNcIlxuICAgICAgPlxuICAgICAgICA8bmctY29udGFpbmVyIFtuZ1RlbXBsYXRlT3V0bGV0XT1cIml0ZW0uY29udGVudFwiPjwvbmctY29udGFpbmVyPlxuICAgICAgPC9saT5cbiAgICA8L3VsPlxuICBgXG59KVxuZXhwb3J0IGNsYXNzIFNwcmtVbm9yZGVyZWRMaXN0Q29tcG9uZW50IHtcbiAgLyoqXG4gICAqIFRoaXMgdmFsdWUgZGV0ZXJtaW5lcyB3aGF0IExpc3QgdmFyaWFudCBpcyByZW5kZXJlZC5cbiAgICogQ2FuIGJlIGBiYXJlYCBvciBgaW5kZW50ZWRgLlxuICAgKi9cbiAgQElucHV0KClcbiAgbGlzdFR5cGU6IHN0cmluZztcbiAgLyoqXG4gICAqIEV4cGVjdHMgYSBzcGFjZSBzZXBhcmF0ZWQgc3RyaW5nXG4gICAqIG9mIGNsYXNzZXMgdG8gYmUgYWRkZWQgdG8gdGhlXG4gICAqIGNvbXBvbmVudC5cbiAgICovXG4gIEBJbnB1dCgpXG4gIGFkZGl0aW9uYWxDbGFzc2VzOiBzdHJpbmc7XG4gIC8qKlxuICAgKiBUaGUgdmFsdWUgc3VwcGxpZWQgd2lsbCBiZSBhc3NpZ25lZFxuICAgKiB0byB0aGUgYGRhdGEtaWRgIGF0dHJpYnV0ZSBvbiB0aGVcbiAgICogY29tcG9uZW50LiBUaGlzIGlzIGludGVuZGVkIHRvIGJlXG4gICAqIHVzZWQgYXMgYSBzZWxlY3RvciBmb3IgYXV0b21hdGVkXG4gICAqIHRvb2xzLiBUaGlzIHZhbHVlIHNob3VsZCBiZSB1bmlxdWVcbiAgICogcGVyIHBhZ2UuXG4gICAqL1xuICBASW5wdXQoKVxuICBpZFN0cmluZzogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBUaGlzIGNvbXBvbmVudCBleHBlY3RzIGNoaWxkcmVuIGA8c3Byay1saXN0LWl0ZW0+PC9zcHJrLWxpc3QtaXRlbT5gXG4gICAqIGNvbXBvbmVudHMuXG4gICAqL1xuICBAQ29udGVudENoaWxkcmVuKFNwcmtMaXN0SXRlbUNvbXBvbmVudCkgaXRlbXM6IFF1ZXJ5TGlzdDxcbiAgICBTcHJrTGlzdEl0ZW1Db21wb25lbnRcbiAgPjtcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgZ2V0Q2xhc3NlcygpOiBzdHJpbmcge1xuICAgIGNvbnN0IGNsYXNzQXJyYXk6IHN0cmluZ1tdID0gWycnXTtcblxuICAgIHN3aXRjaCAodGhpcy5saXN0VHlwZSkge1xuICAgICAgY2FzZSAnaW5kZW50ZWQnOlxuICAgICAgICBjbGFzc0FycmF5LnB1c2goJ3NwcmstYi1MaXN0Jyk7XG4gICAgICAgIGNsYXNzQXJyYXkucHVzaCgnc3Byay1iLUxpc3QtLWluZGVudGVkJyk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAnYmFyZSc6XG4gICAgICAgIGNsYXNzQXJyYXkucHVzaCgnc3Byay1iLUxpc3QnKTtcbiAgICAgICAgY2xhc3NBcnJheS5wdXNoKCdzcHJrLWItTGlzdC0tYmFyZScpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ2hvcml6b250YWwnOlxuICAgICAgICBjbGFzc0FycmF5LnB1c2goJ3Nwcmstby1Ib3Jpem9udGFsTGlzdCcpO1xuICAgICAgICBicmVhaztcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIGJyZWFrO1xuICAgIH1cblxuICAgIGlmICh0aGlzLmFkZGl0aW9uYWxDbGFzc2VzKSB7XG4gICAgICB0aGlzLmFkZGl0aW9uYWxDbGFzc2VzLnNwbGl0KCcgJykuZm9yRWFjaChjbGFzc05hbWUgPT4ge1xuICAgICAgICBjbGFzc0FycmF5LnB1c2goY2xhc3NOYW1lKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHJldHVybiBjbGFzc0FycmF5LmpvaW4oJyAnKTtcbiAgfVxuICBjb25zdHJ1Y3RvcigpIHt9XG59XG4iXX0=