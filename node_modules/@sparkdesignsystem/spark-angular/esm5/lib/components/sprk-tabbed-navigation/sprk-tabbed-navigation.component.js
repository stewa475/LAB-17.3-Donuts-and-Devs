import { __decorate, __metadata } from "tslib";
import { AfterContentInit, Component, ContentChildren, ElementRef, HostListener, Input, QueryList } from '@angular/core';
import * as _ from 'lodash';
import { SprkTabbedNavigationPanelDirective } from '../../directives/tabbed-navigation/sprk-tabbed-navigation-panel/sprk-tabbed-navigation-panel.directive';
import { SprkTabbedNavigationTabDirective } from '../../directives/tabbed-navigation/sprk-tabbed-navigation-tab/sprk-tabbed-navigation-tab.directive';
var SprkTabbedNavigationComponent = /** @class */ (function () {
    /**
     * @ignore
     */
    function SprkTabbedNavigationComponent(ref) {
        this.ref = ref;
        /**
         * @ignore
         */
        this.componentID = _.uniqueId();
        /**
         * @ignore
         */
        this.activeClass = 'sprk-c-Tabs__button--active';
        this.ariaOrientation(window.innerWidth, this.ref.nativeElement);
    }
    /**
     * @ignore
     */
    SprkTabbedNavigationComponent.prototype.onClick = function ($event) {
        if ($event.target.classList.contains('sprk-c-Tabs__button')) {
            var activePanel = this.panels.find(function (panel) {
                return (panel.ref.nativeElement.id ===
                    $event.target.getAttribute('aria-controls'));
            });
            this.resetTabs(this.tabs.map(function (tab) { return tab.ref.nativeElement; }), this.panels.map(function (panel) { return panel.ref.nativeElement; }), this.activeClass);
            this.setActiveTab($event.target, activePanel.ref.nativeElement, this.activeClass);
        }
    };
    /**
     * @ignore
     */
    SprkTabbedNavigationComponent.prototype.onResize = function () {
        this.ariaOrientation(window.innerWidth, this.ref.nativeElement);
    };
    /**
     * @ignore
     */
    SprkTabbedNavigationComponent.prototype.onKeydown = function ($event) {
        var isTabsButton = $event.target.classList.contains('sprk-c-Tabs__button');
        if (!isTabsButton) {
            return;
        }
        var keys = {
            end: 35,
            home: 36,
            left: 37,
            up: 38,
            right: 39,
            down: 40,
            tab: 9
        };
        var tabElements = this.tabs.map(function (tab) { return tab.ref.nativeElement; });
        var panelElements = this.panels.map(function (panel) { return panel.ref.nativeElement; });
        if ($event.keyCode === keys.left || $event.keyCode === keys.up) {
            this.incrementTab(tabElements, panelElements, this.activeClass, -1);
        }
        else if ($event.keyCode === keys.right || $event.keyCode === keys.down) {
            this.incrementTab(tabElements, panelElements, this.activeClass, 1);
        }
        else if ($event.keyCode === keys.tab) {
            if ($event.target.getAttribute('role') === 'tab') {
                $event.preventDefault();
                panelElements[this.getActiveTabIndex(tabElements, this.activeClass)].focus();
            }
        }
        else if ($event.keyCode === keys.home) {
            this.goToEndTab(tabElements, panelElements, this.activeClass, -1);
        }
        else if ($event.keyCode === keys.end) {
            this.goToEndTab(tabElements, panelElements, this.activeClass, 1);
        }
    };
    /**
     * @ignore
     */
    SprkTabbedNavigationComponent.prototype.getClasses = function () {
        var classArray = ['sprk-c-Tabs'];
        if (this.additionalClasses) {
            this.additionalClasses.split(' ').forEach(function (className) {
                classArray.push(className);
            });
        }
        return classArray.join(' ');
    };
    /**
     * @ignore
     */
    SprkTabbedNavigationComponent.prototype.ngAfterContentInit = function () {
        var _this = this;
        var tabIDs = [];
        var panelIDs = [];
        if (this.tabs && this.panels) {
            this.tabs.forEach(function (tab, index) {
                var tabID = "tabbed-navigation-" + _this.componentID + "-tab-" + index;
                var panelID = "tabbed-navigation-" + _this.componentID + "-panel-" + index;
                tab.ref.nativeElement.setAttribute('id', tabID);
                tab.ref.nativeElement.setAttribute('aria-controls', panelID);
                tabIDs.push(tabID);
                panelIDs.push(panelID);
            });
            tabIDs = tabIDs.reverse();
            panelIDs = panelIDs.reverse();
            this.panels.forEach(function (panel) {
                panel.ref.nativeElement.setAttribute('id', panelIDs.pop());
                panel.ref.nativeElement.setAttribute('aria-labelledby', tabIDs.pop());
            });
        }
    };
    /**
     * @ignore
     */
    SprkTabbedNavigationComponent.prototype.ariaOrientation = function (width, element) {
        // switch aria-orientation on mobile (based on _tabs.scss breakpoint)
        if (width <= 736) {
            element.setAttribute('aria-orientation', 'vertical');
        }
        else {
            element.setAttribute('aria-orientation', 'horizontal');
        }
    };
    /**
     * @ignore
     */
    SprkTabbedNavigationComponent.prototype.getActiveTabIndex = function (tabs, activeClass) {
        var activeIndex = null;
        tabs.forEach(function (tab, index) {
            if (tab.classList.contains(activeClass || 'sprk-c-Tabs__button--active')) {
                activeIndex = index;
            }
        });
        return activeIndex;
    };
    /**
     * @ignore
     */
    SprkTabbedNavigationComponent.prototype.resetTabs = function (tabs, tabpanels, activeClass) {
        tabs.forEach(function (tab) {
            tab.classList.remove(activeClass || 'sprk-c-Tabs__button--active');
            tab.removeAttribute('tabindex');
            tab.setAttribute('aria-selected', 'false');
            tabpanels.forEach(function (panel) {
                panel.classList.add('sprk-u-HideWhenJs');
            });
        });
    };
    /**
     * @ignore
     */
    SprkTabbedNavigationComponent.prototype.incrementTab = function (tabs, tabpanels, activeClass, direction) {
        var activeIndex = this.getActiveTabIndex(tabs, activeClass);
        var foundNewIndex = false;
        // Start looking for the next available tab
        while (foundNewIndex === false) {
            // if the next tab would be off the left of the tabstrip
            if (activeIndex + direction < 0) {
                // loop to the end and keep looking
                activeIndex = tabs.length;
                // if the next tab would be off the right of the tabstrip
            }
            else if (activeIndex + direction >= tabs.length) {
                // loop back to the beginning and keep looking
                activeIndex = -1;
                // If the next tab is not disabled
            }
            else if (!tabs[activeIndex + direction].hasAttribute('disabled')) {
                // move to the next tab
                activeIndex += direction;
                // stop looking for the correct tab
                foundNewIndex = true;
            }
            else {
                // move to the next tab and keep looking
                activeIndex += direction;
            }
        }
        // deselect all tabs
        this.resetTabs(tabs, tabpanels, activeClass);
        // select the correct tab
        this.setActiveTab(tabs[activeIndex], tabpanels[activeIndex], activeClass);
    };
    SprkTabbedNavigationComponent.prototype.goToEndTab = function (tabs, tabpanels, activeClass, direction) {
        var newActiveIndex;
        // if direction is positive, go to the right-most tab
        if (direction > 0) {
            newActiveIndex = tabs.length - 1;
            // else go to the left-most tab
        }
        else {
            newActiveIndex = 0;
        }
        var foundNewIndex = false;
        // step through the tabs until we find one that isn't disabled
        while (foundNewIndex === false) {
            // if this tab is not disabled
            if (!tabs[newActiveIndex].hasAttribute('disabled')) {
                // stop looking for the correct tab
                foundNewIndex = true;
                // else step one tab away from the end and keep looking
            }
            else {
                newActiveIndex -= direction;
            }
        }
        this.resetTabs(tabs, tabpanels, activeClass);
        this.setActiveTab(tabs[newActiveIndex], tabpanels[newActiveIndex], activeClass);
    };
    /**
     * @ignore
     */
    SprkTabbedNavigationComponent.prototype.setActiveTab = function (tab, tabpanel, activeClass) {
        tab.classList.add(activeClass || 'sprk-c-Tabs__button--active');
        tab.setAttribute('tabindex', '0');
        tab.setAttribute('aria-selected', 'true');
        if (tabpanel) {
            tabpanel.classList.remove('sprk-u-HideWhenJs');
        }
        tab.focus();
    };
    SprkTabbedNavigationComponent.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], SprkTabbedNavigationComponent.prototype, "additionalClasses", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], SprkTabbedNavigationComponent.prototype, "idString", void 0);
    __decorate([
        ContentChildren(SprkTabbedNavigationTabDirective),
        __metadata("design:type", QueryList)
    ], SprkTabbedNavigationComponent.prototype, "tabs", void 0);
    __decorate([
        ContentChildren(SprkTabbedNavigationPanelDirective),
        __metadata("design:type", QueryList)
    ], SprkTabbedNavigationComponent.prototype, "panels", void 0);
    __decorate([
        HostListener('click', ['$event']),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [Object]),
        __metadata("design:returntype", void 0)
    ], SprkTabbedNavigationComponent.prototype, "onClick", null);
    __decorate([
        HostListener('window:resize'),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", []),
        __metadata("design:returntype", void 0)
    ], SprkTabbedNavigationComponent.prototype, "onResize", null);
    __decorate([
        HostListener('keydown', ['$event']),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [Object]),
        __metadata("design:returntype", void 0)
    ], SprkTabbedNavigationComponent.prototype, "onKeydown", null);
    SprkTabbedNavigationComponent = __decorate([
        Component({
            selector: 'sprk-tabbed-navigation',
            template: "\n    <div [ngClass]=\"getClasses()\" [attr.data-id]=\"idString\">\n      <div class=\"sprk-c-Tabs__buttons\" role=\"tablist\">\n        <ng-content select=\"[sprkTabbedNavigationTab]\"></ng-content>\n      </div>\n      <ng-content select=\"[sprkTabbedNavigationPane]\"></ng-content>\n      <ng-content></ng-content>\n    </div>\n  "
        }),
        __metadata("design:paramtypes", [ElementRef])
    ], SprkTabbedNavigationComponent);
    return SprkTabbedNavigationComponent;
}());
export { SprkTabbedNavigationComponent };
//# sourceMappingURL=data:application/json;base64,