import { __decorate, __metadata } from "tslib";
import { Component, Input } from '@angular/core';
import * as _ from 'lodash';
import { toggleAnimations } from '../sprk-toggle/sprk-toggle-animations';
var SprkAccordionItemComponent = /** @class */ (function () {
    function SprkAccordionItemComponent() {
        /**
         * The Accordion item will use this to decide
         * if it should be open or closed on first render.
         * (Interacting with the toggle will override this input.)
         */
        this.isOpen = false;
        /**
         * The name of the icon to use for
         * a closed Accordion item.
         */
        this.iconTypeClosed = 'chevron-up-circle-two-color';
        /**
         * The name of the icon to use for
         * an open Accordion item.
         */
        this.iconTypeOpen = 'chevron-up-circle-two-color';
        /**
         * @ignore
         */
        this.componentID = _.uniqueId();
        /**
         * @ignore
         */
        this.accordion_controls_id = "accordionHeading__" + this.componentID;
        /**
         * @ignore
         */
        this.currentIconType = this.iconTypeClosed;
        /**
         * @ignore
         */
        this.iconStateClass = '';
        /**
         * @ignore
         */
        this.animState = 'closed';
    }
    /**
     * @ignore
     */
    SprkAccordionItemComponent.prototype.accordionState = function () {
        this.isOpen === false
            ? (this.animState = 'closed')
            : (this.animState = 'open');
        this.isOpen === false
            ? (this.currentIconType = this.iconTypeClosed)
            : (this.currentIconType = this.iconTypeOpen);
        this.isOpen === false
            ? (this.iconStateClass = '')
            : (this.iconStateClass = 'sprk-c-Icon--open');
    };
    /**
     * @ignore
     */
    SprkAccordionItemComponent.prototype.toggleAccordion = function (event) {
        event.preventDefault();
        this.isOpen = !this.isOpen;
        this.accordionState();
    };
    /**
     * @ignore
     */
    SprkAccordionItemComponent.prototype.getClasses = function () {
        var classArray = [
            'sprk-c-Accordion__item',
            'sprk-u-Overflow--hidden'
        ];
        if (this.isOpen) {
            classArray.push('sprk-c-Accordion__item--open');
        }
        if (this.isActive) {
            classArray.push('sprk-c-Accordion__item--active');
        }
        if (this.additionalClasses) {
            this.additionalClasses.split(' ').forEach(function (className) {
                classArray.push(className);
            });
        }
        return classArray.join(' ');
    };
    /**
     * @ignore
     */
    SprkAccordionItemComponent.prototype.getHeadingClasses = function () {
        var classArray = ['sprk-c-Accordion__heading'];
        if (this.additionalHeadingClasses) {
            this.additionalHeadingClasses.split(' ').forEach(function (className) {
                classArray.push(className);
            });
        }
        return classArray.join(' ');
    };
    SprkAccordionItemComponent.prototype.ngOnInit = function () {
        this.accordionState();
    };
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], SprkAccordionItemComponent.prototype, "title", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], SprkAccordionItemComponent.prototype, "analyticsString", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], SprkAccordionItemComponent.prototype, "idString", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], SprkAccordionItemComponent.prototype, "additionalClasses", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], SprkAccordionItemComponent.prototype, "additionalHeadingClasses", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], SprkAccordionItemComponent.prototype, "isOpen", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Boolean)
    ], SprkAccordionItemComponent.prototype, "isActive", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], SprkAccordionItemComponent.prototype, "iconTypeClosed", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], SprkAccordionItemComponent.prototype, "iconTypeOpen", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], SprkAccordionItemComponent.prototype, "leadingIcon", void 0);
    SprkAccordionItemComponent = __decorate([
        Component({
            selector: 'sprk-accordion-item',
            template: "\n    <li [ngClass]=\"getClasses()\">\n      <button\n        sprkLink\n        variant=\"unstyled\"\n        href=\"#\"\n        [attr.aria-controls]=\"accordion_controls_id\"\n        [attr.aria-expanded]=\"isOpen\"\n        class=\"sprk-c-Accordion__summary\"\n        [analyticsString]=\"analyticsString\"\n        [idString]=\"idString\"\n        (click)=\"toggleAccordion($event)\"\n      >\n        <span [ngClass]=\"getHeadingClasses()\">\n          <sprk-icon\n            [iconType]=\"leadingIcon\"\n            additionalClasses=\"sprk-c-Icon--stroke-current-color sprk-c-Icon--l sprk-u-mrs\"\n            *ngIf=\"leadingIcon\"\n          ></sprk-icon>\n          {{ title }}\n        </span>\n\n        <sprk-icon\n          additionalClasses=\"sprk-c-Accordion__icon sprk-c-Icon--toggle sprk-c-Icon--l {{\n            iconStateClass\n          }}\"\n          [iconType]=\"currentIconType\"\n        ></sprk-icon>\n      </button>\n\n      <div [@toggleContent]=\"animState\">\n        <div\n          [id]=\"accordion_controls_id\"\n          class=\"sprk-c-Accordion__content sprk-b-TypeBodyTwo\"\n        >\n          <ng-content></ng-content>\n        </div>\n      </div>\n    </li>\n  ",
            animations: [toggleAnimations.toggleContent]
        })
    ], SprkAccordionItemComponent);
    return SprkAccordionItemComponent;
}());
export { SprkAccordionItemComponent };
//# sourceMappingURL=data:application/json;base64,