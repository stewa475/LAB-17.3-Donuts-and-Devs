import { __decorate, __metadata } from "tslib";
import { Component, Input } from '@angular/core';
var SprkTableComponent = /** @class */ (function () {
    function SprkTableComponent() {
    }
    /**
     * @ignore
     */
    SprkTableComponent.prototype.getClasses = function () {
        var classArray = ['sprk-b-TableContainer'];
        if (this.additionalClasses) {
            this.additionalClasses.split(' ').forEach(function (className) {
                classArray.push(className);
            });
        }
        return classArray.join(' ');
    };
    /**
     * @ignore
     */
    SprkTableComponent.prototype.getTableClasses = function () {
        var classArray = [
            'sprk-b-Table',
            'sprk-b-Table--spacing-medium',
        ];
        if (this.additionalTableClasses) {
            this.additionalTableClasses.split(' ').forEach(function (className) {
                classArray.push(className);
            });
        }
        return classArray.join(' ');
    };
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], SprkTableComponent.prototype, "additionalClasses", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], SprkTableComponent.prototype, "additionalTableClasses", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], SprkTableComponent.prototype, "idString", void 0);
    SprkTableComponent = __decorate([
        Component({
            selector: 'sprk-table',
            template: "\n    <div [ngClass]=\"getClasses()\" [attr.data-id]=\"idString\">\n      <table [ngClass]=\"getTableClasses()\">\n        <ng-content></ng-content>\n      </table>\n    </div>\n  "
        })
    ], SprkTableComponent);
    return SprkTableComponent;
}());
export { SprkTableComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3Byay10YWJsZS5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9Ac3BhcmtkZXNpZ25zeXN0ZW0vc3BhcmstYW5ndWxhci8iLCJzb3VyY2VzIjpbImxpYi9jb21wb25lbnRzL3NwcmstdGFibGUvc3Byay10YWJsZS5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBWWpEO0lBQUE7SUEwREEsQ0FBQztJQWhDQzs7T0FFRztJQUNILHVDQUFVLEdBQVY7UUFDRSxJQUFNLFVBQVUsR0FBYSxDQUFDLHVCQUF1QixDQUFDLENBQUM7UUFFdkQsSUFBSSxJQUFJLENBQUMsaUJBQWlCLEVBQUU7WUFDMUIsSUFBSSxDQUFDLGlCQUFpQixDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxPQUFPLENBQUMsVUFBQSxTQUFTO2dCQUNqRCxVQUFVLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO1lBQzdCLENBQUMsQ0FBQyxDQUFDO1NBQ0o7UUFFRCxPQUFPLFVBQVUsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDOUIsQ0FBQztJQUVEOztPQUVHO0lBQ0gsNENBQWUsR0FBZjtRQUNFLElBQU0sVUFBVSxHQUFhO1lBQzNCLGNBQWM7WUFDZCw4QkFBOEI7U0FDL0IsQ0FBQztRQUVGLElBQUksSUFBSSxDQUFDLHNCQUFzQixFQUFFO1lBQy9CLElBQUksQ0FBQyxzQkFBc0IsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsT0FBTyxDQUFDLFVBQUEsU0FBUztnQkFDdEQsVUFBVSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQztZQUM3QixDQUFDLENBQUMsQ0FBQztTQUNKO1FBRUQsT0FBTyxVQUFVLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQzlCLENBQUM7SUFsREQ7UUFEQyxLQUFLLEVBQUU7O2lFQUNrQjtJQU8xQjtRQURDLEtBQUssRUFBRTs7c0VBQ3VCO0lBVS9CO1FBREMsS0FBSyxFQUFFOzt3REFDUztJQXhCTixrQkFBa0I7UUFWOUIsU0FBUyxDQUFDO1lBQ1QsUUFBUSxFQUFFLFlBQVk7WUFDdEIsUUFBUSxFQUFFLHNMQU1UO1NBQ0YsQ0FBQztPQUNXLGtCQUFrQixDQTBEOUI7SUFBRCx5QkFBQztDQUFBLEFBMURELElBMERDO1NBMURZLGtCQUFrQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgSW5wdXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnc3Byay10YWJsZScsXG4gIHRlbXBsYXRlOiBgXG4gICAgPGRpdiBbbmdDbGFzc109XCJnZXRDbGFzc2VzKClcIiBbYXR0ci5kYXRhLWlkXT1cImlkU3RyaW5nXCI+XG4gICAgICA8dGFibGUgW25nQ2xhc3NdPVwiZ2V0VGFibGVDbGFzc2VzKClcIj5cbiAgICAgICAgPG5nLWNvbnRlbnQ+PC9uZy1jb250ZW50PlxuICAgICAgPC90YWJsZT5cbiAgICA8L2Rpdj5cbiAgYFxufSlcbmV4cG9ydCBjbGFzcyBTcHJrVGFibGVDb21wb25lbnQge1xuICAvKipcbiAgICogRXhwZWN0cyBhIHNwYWNlIHNlcGFyYXRlZCBzdHJpbmdcbiAgICogb2YgY2xhc3NlcyB0byBiZSBhZGRlZCB0byB0aGVcbiAgICogY29tcG9uZW50IGNvbnRhaW5lciBlbGVtZW50LlxuICAgKi9cbiAgQElucHV0KClcbiAgYWRkaXRpb25hbENsYXNzZXM6IHN0cmluZztcbiAgLyoqXG4gICAqIEV4cGVjdHMgYSBzcGFjZSBzZXBhcmF0ZWQgc3RyaW5nXG4gICAqIG9mIGNsYXNzZXMgdG8gYmUgYWRkZWQgdG8gdGhlXG4gICAqIGB0YWJsZWAgZWxlbWVudC5cbiAgICovXG4gIEBJbnB1dCgpXG4gIGFkZGl0aW9uYWxUYWJsZUNsYXNzZXM6IHN0cmluZztcbiAgLyoqXG4gICAqIFRoZSB2YWx1ZSBzdXBwbGllZCB3aWxsIGJlIGFzc2lnbmVkXG4gICAqIHRvIHRoZSBgZGF0YS1pZGAgYXR0cmlidXRlIG9uIHRoZVxuICAgKiBjb21wb25lbnQuIFRoaXMgaXMgaW50ZW5kZWQgdG8gYmVcbiAgICogdXNlZCBhcyBhIHNlbGVjdG9yIGZvciBhdXRvbWF0ZWRcbiAgICogdG9vbHMuIFRoaXMgdmFsdWUgc2hvdWxkIGJlIHVuaXF1ZVxuICAgKiBwZXIgcGFnZS5cbiAgICovXG4gIEBJbnB1dCgpXG4gIGlkU3RyaW5nOiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGdldENsYXNzZXMoKTogc3RyaW5nIHtcbiAgICBjb25zdCBjbGFzc0FycmF5OiBzdHJpbmdbXSA9IFsnc3Byay1iLVRhYmxlQ29udGFpbmVyJ107XG5cbiAgICBpZiAodGhpcy5hZGRpdGlvbmFsQ2xhc3Nlcykge1xuICAgICAgdGhpcy5hZGRpdGlvbmFsQ2xhc3Nlcy5zcGxpdCgnICcpLmZvckVhY2goY2xhc3NOYW1lID0+IHtcbiAgICAgICAgY2xhc3NBcnJheS5wdXNoKGNsYXNzTmFtZSk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gY2xhc3NBcnJheS5qb2luKCcgJyk7XG4gIH1cblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgZ2V0VGFibGVDbGFzc2VzKCk6IHN0cmluZyB7XG4gICAgY29uc3QgY2xhc3NBcnJheTogc3RyaW5nW10gPSBbXG4gICAgICAnc3Byay1iLVRhYmxlJyxcbiAgICAgICdzcHJrLWItVGFibGUtLXNwYWNpbmctbWVkaXVtJyxcbiAgICBdO1xuXG4gICAgaWYgKHRoaXMuYWRkaXRpb25hbFRhYmxlQ2xhc3Nlcykge1xuICAgICAgdGhpcy5hZGRpdGlvbmFsVGFibGVDbGFzc2VzLnNwbGl0KCcgJykuZm9yRWFjaChjbGFzc05hbWUgPT4ge1xuICAgICAgICBjbGFzc0FycmF5LnB1c2goY2xhc3NOYW1lKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHJldHVybiBjbGFzc0FycmF5LmpvaW4oJyAnKTtcbiAgfVxufVxuIl19