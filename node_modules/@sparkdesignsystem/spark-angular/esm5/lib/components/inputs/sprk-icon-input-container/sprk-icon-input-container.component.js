import { __decorate, __metadata } from "tslib";
import { Component, ContentChild, Input } from '@angular/core';
import * as _ from 'lodash';
import { SprkFieldErrorDirective } from '../../../directives/inputs/sprk-field-error/sprk-field-error.directive';
import { SprkInputDirective } from '../../../directives/inputs/sprk-input/sprk-input.directive';
import { SprkLabelDirective } from '../../../directives/inputs/sprk-label/sprk-label.directive';
var SprkIconInputContainerComponent = /** @class */ (function () {
    function SprkIconInputContainerComponent() {
        /**
         * @ignore
         */
        this.id = _.uniqueId();
        /**
         * @ignore
         */
        this.input_id = "input_" + this.id;
        /**
         * @ignore
         */
        this.error_id = "error_" + this.id;
    }
    /**
     * @ignore
     */
    SprkIconInputContainerComponent.prototype.getIconContainerClasses = function () {
        var classArray = ['sprk-b-InputContainer__icon-container'];
        if (this.iconContainerClasses) {
            this.iconContainerClasses.split(' ').forEach(function (className) {
                classArray.push(className);
            });
        }
        return classArray.join(' ');
    };
    /**
     * @ignore
     */
    SprkIconInputContainerComponent.prototype.getClasses = function () {
        var classArray = ['sprk-b-InputContainer'];
        if (this.additionalClasses) {
            this.additionalClasses.split(' ').forEach(function (className) {
                classArray.push(className);
            });
        }
        return classArray.join(' ');
    };
    SprkIconInputContainerComponent.prototype.ngOnInit = function () {
        if (this.label && this.input) {
            this.label.ref.nativeElement.setAttribute('for', this.input_id);
            this.input.ref.nativeElement.id = this.input_id;
        }
        if (this.input && this.error) {
            this.input.ref.nativeElement.setAttribute('aria-describedby', this.error_id);
            this.error.ref.nativeElement.id = this.error_id;
        }
    };
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], SprkIconInputContainerComponent.prototype, "additionalClasses", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], SprkIconInputContainerComponent.prototype, "iconContainerClasses", void 0);
    __decorate([
        ContentChild(SprkLabelDirective, { static: true }),
        __metadata("design:type", SprkLabelDirective)
    ], SprkIconInputContainerComponent.prototype, "label", void 0);
    __decorate([
        ContentChild(SprkInputDirective, { static: true }),
        __metadata("design:type", SprkInputDirective)
    ], SprkIconInputContainerComponent.prototype, "input", void 0);
    __decorate([
        ContentChild(SprkFieldErrorDirective, { static: true }),
        __metadata("design:type", SprkFieldErrorDirective)
    ], SprkIconInputContainerComponent.prototype, "error", void 0);
    SprkIconInputContainerComponent = __decorate([
        Component({
            selector: 'sprk-icon-input-container',
            template: "\n    <div [ngClass]=\"getClasses()\">\n      <div [ngClass]=\"getIconContainerClasses()\">\n        <ng-content select=\"[sprkLabel]\"></ng-content>\n        <ng-content select=\"[sprk-input-icon]\"></ng-content>\n        <ng-content select=\"[sprkInput]\"></ng-content>\n      </div>\n      <ng-content select=\"sprk-selection-item-container\"></ng-content>\n      <ng-content select=\"[sprkHelperText]\"></ng-content>\n      <ng-content select=\"[sprkFieldError]\"></ng-content>\n    </div>\n  "
        })
    ], SprkIconInputContainerComponent);
    return SprkIconInputContainerComponent;
}());
export { SprkIconInputContainerComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3Byay1pY29uLWlucHV0LWNvbnRhaW5lci5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9Ac3BhcmtkZXNpZ25zeXN0ZW0vc3BhcmstYW5ndWxhci8iLCJzb3VyY2VzIjpbImxpYi9jb21wb25lbnRzL2lucHV0cy9zcHJrLWljb24taW5wdXQtY29udGFpbmVyL3NwcmstaWNvbi1pbnB1dC1jb250YWluZXIuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLFlBQVksRUFBRSxLQUFLLEVBQVUsTUFBTSxlQUFlLENBQUM7QUFDdkUsT0FBTyxLQUFLLENBQUMsTUFBTSxRQUFRLENBQUM7QUFDNUIsT0FBTyxFQUFFLHVCQUF1QixFQUFFLE1BQU0sd0VBQXdFLENBQUM7QUFDakgsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sNERBQTRELENBQUM7QUFDaEcsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sNERBQTRELENBQUM7QUFpQmhHO0lBQUE7UUFtQ0U7O1dBRUc7UUFDSCxPQUFFLEdBQUcsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDO1FBQ2xCOztXQUVHO1FBQ0gsYUFBUSxHQUFHLFdBQVMsSUFBSSxDQUFDLEVBQUksQ0FBQztRQUM5Qjs7V0FFRztRQUNILGFBQVEsR0FBRyxXQUFTLElBQUksQ0FBQyxFQUFJLENBQUM7SUE0Q2hDLENBQUM7SUEzQ0M7O09BRUc7SUFDSCxpRUFBdUIsR0FBdkI7UUFDRSxJQUFNLFVBQVUsR0FBYSxDQUFDLHVDQUF1QyxDQUFDLENBQUM7UUFFdkUsSUFBSSxJQUFJLENBQUMsb0JBQW9CLEVBQUU7WUFDN0IsSUFBSSxDQUFDLG9CQUFvQixDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxPQUFPLENBQUMsVUFBQSxTQUFTO2dCQUNwRCxVQUFVLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO1lBQzdCLENBQUMsQ0FBQyxDQUFDO1NBQ0o7UUFFRCxPQUFPLFVBQVUsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDOUIsQ0FBQztJQUVEOztPQUVHO0lBQ0gsb0RBQVUsR0FBVjtRQUNFLElBQU0sVUFBVSxHQUFhLENBQUMsdUJBQXVCLENBQUMsQ0FBQztRQUV2RCxJQUFJLElBQUksQ0FBQyxpQkFBaUIsRUFBRTtZQUMxQixJQUFJLENBQUMsaUJBQWlCLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxVQUFBLFNBQVM7Z0JBQ2pELFVBQVUsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7WUFDN0IsQ0FBQyxDQUFDLENBQUM7U0FDSjtRQUVELE9BQU8sVUFBVSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUM5QixDQUFDO0lBRUQsa0RBQVEsR0FBUjtRQUNFLElBQUksSUFBSSxDQUFDLEtBQUssSUFBSSxJQUFJLENBQUMsS0FBSyxFQUFFO1lBQzVCLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLGFBQWEsQ0FBQyxZQUFZLENBQUMsS0FBSyxFQUFFLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztZQUNoRSxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxhQUFhLENBQUMsRUFBRSxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUM7U0FDakQ7UUFDRCxJQUFJLElBQUksQ0FBQyxLQUFLLElBQUksSUFBSSxDQUFDLEtBQUssRUFBRTtZQUM1QixJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxhQUFhLENBQUMsWUFBWSxDQUN2QyxrQkFBa0IsRUFDbEIsSUFBSSxDQUFDLFFBQVEsQ0FDZCxDQUFDO1lBQ0YsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsYUFBYSxDQUFDLEVBQUUsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDO1NBQ2pEO0lBQ0gsQ0FBQztJQWxGRDtRQURDLEtBQUssRUFBRTs7OEVBQ2tCO0lBTzFCO1FBREMsS0FBSyxFQUFFOztpRkFDcUI7SUFPN0I7UUFEQyxZQUFZLENBQUMsa0JBQWtCLEVBQUUsRUFBRSxNQUFNLEVBQUUsSUFBSSxFQUFFLENBQUM7a0NBQzVDLGtCQUFrQjtrRUFBQztJQU0xQjtRQURDLFlBQVksQ0FBQyxrQkFBa0IsRUFBRSxFQUFFLE1BQU0sRUFBRSxJQUFJLEVBQUUsQ0FBQztrQ0FDNUMsa0JBQWtCO2tFQUFDO0lBTTFCO1FBREMsWUFBWSxDQUFDLHVCQUF1QixFQUFFLEVBQUUsTUFBTSxFQUFFLElBQUksRUFBRSxDQUFDO2tDQUNqRCx1QkFBdUI7a0VBQUM7SUFqQ3BCLCtCQUErQjtRQWYzQyxTQUFTLENBQUM7WUFDVCxRQUFRLEVBQUUsMkJBQTJCO1lBQ3JDLFFBQVEsRUFBRSxtZkFXVDtTQUNGLENBQUM7T0FDVywrQkFBK0IsQ0EwRjNDO0lBQUQsc0NBQUM7Q0FBQSxBQTFGRCxJQTBGQztTQTFGWSwrQkFBK0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIENvbnRlbnRDaGlsZCwgSW5wdXQsIE9uSW5pdCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0ICogYXMgXyBmcm9tICdsb2Rhc2gnO1xuaW1wb3J0IHsgU3Bya0ZpZWxkRXJyb3JEaXJlY3RpdmUgfSBmcm9tICcuLi8uLi8uLi9kaXJlY3RpdmVzL2lucHV0cy9zcHJrLWZpZWxkLWVycm9yL3NwcmstZmllbGQtZXJyb3IuZGlyZWN0aXZlJztcbmltcG9ydCB7IFNwcmtJbnB1dERpcmVjdGl2ZSB9IGZyb20gJy4uLy4uLy4uL2RpcmVjdGl2ZXMvaW5wdXRzL3NwcmstaW5wdXQvc3Byay1pbnB1dC5kaXJlY3RpdmUnO1xuaW1wb3J0IHsgU3Bya0xhYmVsRGlyZWN0aXZlIH0gZnJvbSAnLi4vLi4vLi4vZGlyZWN0aXZlcy9pbnB1dHMvc3Byay1sYWJlbC9zcHJrLWxhYmVsLmRpcmVjdGl2ZSc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ3NwcmstaWNvbi1pbnB1dC1jb250YWluZXInLFxuICB0ZW1wbGF0ZTogYFxuICAgIDxkaXYgW25nQ2xhc3NdPVwiZ2V0Q2xhc3NlcygpXCI+XG4gICAgICA8ZGl2IFtuZ0NsYXNzXT1cImdldEljb25Db250YWluZXJDbGFzc2VzKClcIj5cbiAgICAgICAgPG5nLWNvbnRlbnQgc2VsZWN0PVwiW3NwcmtMYWJlbF1cIj48L25nLWNvbnRlbnQ+XG4gICAgICAgIDxuZy1jb250ZW50IHNlbGVjdD1cIltzcHJrLWlucHV0LWljb25dXCI+PC9uZy1jb250ZW50PlxuICAgICAgICA8bmctY29udGVudCBzZWxlY3Q9XCJbc3Bya0lucHV0XVwiPjwvbmctY29udGVudD5cbiAgICAgIDwvZGl2PlxuICAgICAgPG5nLWNvbnRlbnQgc2VsZWN0PVwic3Byay1zZWxlY3Rpb24taXRlbS1jb250YWluZXJcIj48L25nLWNvbnRlbnQ+XG4gICAgICA8bmctY29udGVudCBzZWxlY3Q9XCJbc3Bya0hlbHBlclRleHRdXCI+PC9uZy1jb250ZW50PlxuICAgICAgPG5nLWNvbnRlbnQgc2VsZWN0PVwiW3NwcmtGaWVsZEVycm9yXVwiPjwvbmctY29udGVudD5cbiAgICA8L2Rpdj5cbiAgYFxufSlcbmV4cG9ydCBjbGFzcyBTcHJrSWNvbklucHV0Q29udGFpbmVyQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0IHtcbiAgLyoqXG4gICAqIEV4cGVjdHMgYSBzcGFjZSBzZXBhcmF0ZWQgc3RyaW5nXG4gICAqIG9mIGNsYXNzZXMgdG8gYmUgYWRkZWQgdG8gdGhlXG4gICAqIGNvbXBvbmVudC5cbiAgICovXG4gIEBJbnB1dCgpXG4gIGFkZGl0aW9uYWxDbGFzc2VzOiBzdHJpbmc7XG4gIC8qKlxuICAgKiBFeHBlY3RzIGEgc3BhY2Ugc2VwYXJhdGVkIHN0cmluZ1xuICAgKiBvZiBjbGFzc2VzIHRvIGJlIGFkZGVkIHRvIHRoZVxuICAgKiBpY29uIGNvbnRhaW5lci5cbiAgICovXG4gIEBJbnB1dCgpXG4gIGljb25Db250YWluZXJDbGFzc2VzOiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIFRoaXMgY29tcG9uZW50IGV4cGVjdHMgYSBjaGlsZCBsYWJlbCBlbGVtZW50XG4gICAqIHdpdGggdGhlIGBzcHJrTGFiZWxgIGRpcmVjdGl2ZS5cbiAgICovXG4gIEBDb250ZW50Q2hpbGQoU3Bya0xhYmVsRGlyZWN0aXZlLCB7IHN0YXRpYzogdHJ1ZSB9KVxuICBsYWJlbDogU3Bya0xhYmVsRGlyZWN0aXZlO1xuICAvKipcbiAgICogVGhpcyBjb21wb25lbnQgZXhwZWN0cyBhIGNoaWxkIGlucHV0IGVsZW1lbnRcbiAgICogd2l0aCB0aGUgYHNwcmtJbnB1dGAgZGlyZWN0aXZlLlxuICAgKi9cbiAgQENvbnRlbnRDaGlsZChTcHJrSW5wdXREaXJlY3RpdmUsIHsgc3RhdGljOiB0cnVlIH0pXG4gIGlucHV0OiBTcHJrSW5wdXREaXJlY3RpdmU7XG4gIC8qKlxuICAgKiBUaGlzIGNvbXBvbmVudCBleHBlY3RzIGEgY2hpbGQgZWxlbWVudFxuICAgKiB3aXRoIHRoZSBgc3Bya0ZpZWxkRXJyb3JgIGRpcmVjdGl2ZS5cbiAgICovXG4gIEBDb250ZW50Q2hpbGQoU3Bya0ZpZWxkRXJyb3JEaXJlY3RpdmUsIHsgc3RhdGljOiB0cnVlIH0pXG4gIGVycm9yOiBTcHJrRmllbGRFcnJvckRpcmVjdGl2ZTtcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgaWQgPSBfLnVuaXF1ZUlkKCk7XG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBpbnB1dF9pZCA9IGBpbnB1dF8ke3RoaXMuaWR9YDtcbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGVycm9yX2lkID0gYGVycm9yXyR7dGhpcy5pZH1gO1xuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgZ2V0SWNvbkNvbnRhaW5lckNsYXNzZXMoKTogc3RyaW5nIHtcbiAgICBjb25zdCBjbGFzc0FycmF5OiBzdHJpbmdbXSA9IFsnc3Byay1iLUlucHV0Q29udGFpbmVyX19pY29uLWNvbnRhaW5lciddO1xuXG4gICAgaWYgKHRoaXMuaWNvbkNvbnRhaW5lckNsYXNzZXMpIHtcbiAgICAgIHRoaXMuaWNvbkNvbnRhaW5lckNsYXNzZXMuc3BsaXQoJyAnKS5mb3JFYWNoKGNsYXNzTmFtZSA9PiB7XG4gICAgICAgIGNsYXNzQXJyYXkucHVzaChjbGFzc05hbWUpO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGNsYXNzQXJyYXkuam9pbignICcpO1xuICB9XG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGdldENsYXNzZXMoKTogc3RyaW5nIHtcbiAgICBjb25zdCBjbGFzc0FycmF5OiBzdHJpbmdbXSA9IFsnc3Byay1iLUlucHV0Q29udGFpbmVyJ107XG5cbiAgICBpZiAodGhpcy5hZGRpdGlvbmFsQ2xhc3Nlcykge1xuICAgICAgdGhpcy5hZGRpdGlvbmFsQ2xhc3Nlcy5zcGxpdCgnICcpLmZvckVhY2goY2xhc3NOYW1lID0+IHtcbiAgICAgICAgY2xhc3NBcnJheS5wdXNoKGNsYXNzTmFtZSk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gY2xhc3NBcnJheS5qb2luKCcgJyk7XG4gIH1cblxuICBuZ09uSW5pdCgpOiB2b2lkIHtcbiAgICBpZiAodGhpcy5sYWJlbCAmJiB0aGlzLmlucHV0KSB7XG4gICAgICB0aGlzLmxhYmVsLnJlZi5uYXRpdmVFbGVtZW50LnNldEF0dHJpYnV0ZSgnZm9yJywgdGhpcy5pbnB1dF9pZCk7XG4gICAgICB0aGlzLmlucHV0LnJlZi5uYXRpdmVFbGVtZW50LmlkID0gdGhpcy5pbnB1dF9pZDtcbiAgICB9XG4gICAgaWYgKHRoaXMuaW5wdXQgJiYgdGhpcy5lcnJvcikge1xuICAgICAgdGhpcy5pbnB1dC5yZWYubmF0aXZlRWxlbWVudC5zZXRBdHRyaWJ1dGUoXG4gICAgICAgICdhcmlhLWRlc2NyaWJlZGJ5JyxcbiAgICAgICAgdGhpcy5lcnJvcl9pZFxuICAgICAgKTtcbiAgICAgIHRoaXMuZXJyb3IucmVmLm5hdGl2ZUVsZW1lbnQuaWQgPSB0aGlzLmVycm9yX2lkO1xuICAgIH1cbiAgfVxufVxuIl19