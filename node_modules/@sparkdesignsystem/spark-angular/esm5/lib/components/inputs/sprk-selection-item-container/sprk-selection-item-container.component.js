import { __decorate, __metadata } from "tslib";
import { Component, ContentChild, Input, OnInit, Renderer2 } from '@angular/core';
import uniqueId from 'lodash/uniqueId';
import { SprkSelectionInputDirective } from '../../../directives/inputs/sprk-selection-input/sprk-selection-input.directive';
import { SprkSelectionLabelDirective } from '../../../directives/inputs/sprk-selection-label/sprk-selection-label.directive';
var SprkSelectionItemContainerComponent = /** @class */ (function () {
    function SprkSelectionItemContainerComponent(renderer) {
        this.renderer = renderer;
    }
    /**
     * @ignore
     */
    SprkSelectionItemContainerComponent.prototype.getClasses = function () {
        var classArray = ['sprk-b-SelectionContainer'];
        if (this.additionalClasses) {
            this.additionalClasses.split(' ').forEach(function (className) {
                classArray.push(className);
            });
        }
        return classArray.join(' ');
    };
    /**
     * @ignore
     */
    SprkSelectionItemContainerComponent.prototype.addInputTypeClasses = function () {
        var inputType = this.input.ref.nativeElement.type;
        if (inputType === 'checkbox') {
            this.renderer.addClass(this.input.ref.nativeElement, 'sprk-b-Checkbox__input');
            this.renderer.addClass(this.label.ref.nativeElement, 'sprk-b-Checkbox__label');
        }
        if (inputType === 'radio') {
            this.renderer.addClass(this.input.ref.nativeElement, 'sprk-b-Radio__input');
            this.renderer.addClass(this.label.ref.nativeElement, 'sprk-b-Radio__label');
        }
    };
    /**
     * @ignore
     */
    SprkSelectionItemContainerComponent.prototype.generateIdForInput = function () {
        var inputId = this.input.ref.nativeElement.id;
        var labelFor = this.label.ref.nativeElement.htmlFor;
        // Warn if 'for' exists but the 'id' does not
        if (labelFor && !inputId) {
            console.warn("Spark Design System Warning - The value of 'for' (" + labelFor + ") on the label expects a matching 'id' on the input.");
            return;
        }
        // Warn if 'for' and 'id' both exist but don't match
        if (inputId && labelFor && inputId !== labelFor) {
            console.warn("Spark Design System Warning - The value of 'for' (" + labelFor + ") on the label should match the 'id' on the input (" + inputId + ").");
            return;
        }
        // If we don't have a valid id, generate one with lodash
        if (!inputId) {
            inputId = uniqueId("sprk_input_");
            this.renderer.setProperty(this.input.ref.nativeElement, 'id', inputId);
            this.renderer.setAttribute(this.label.ref.nativeElement, 'for', inputId);
        }
    };
    SprkSelectionItemContainerComponent.prototype.ngOnInit = function () {
        if (this.label && this.input) {
            this.generateIdForInput();
            this.addInputTypeClasses();
        }
    };
    SprkSelectionItemContainerComponent.ctorParameters = function () { return [
        { type: Renderer2 }
    ]; };
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], SprkSelectionItemContainerComponent.prototype, "additionalClasses", void 0);
    __decorate([
        ContentChild(SprkSelectionLabelDirective, { static: true }),
        __metadata("design:type", SprkSelectionLabelDirective)
    ], SprkSelectionItemContainerComponent.prototype, "label", void 0);
    __decorate([
        ContentChild(SprkSelectionInputDirective, { static: true }),
        __metadata("design:type", SprkSelectionInputDirective)
    ], SprkSelectionItemContainerComponent.prototype, "input", void 0);
    SprkSelectionItemContainerComponent = __decorate([
        Component({
            selector: 'sprk-selection-item-container',
            template: "\n    <div [ngClass]=\"getClasses()\">\n      <ng-content select=\"[sprkSelectionInput]\"></ng-content>\n      <ng-content select=\"[sprkSelectionLabel]\"></ng-content>\n      <ng-content></ng-content>\n    </div>\n  "
        }),
        __metadata("design:paramtypes", [Renderer2])
    ], SprkSelectionItemContainerComponent);
    return SprkSelectionItemContainerComponent;
}());
export { SprkSelectionItemContainerComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3Byay1zZWxlY3Rpb24taXRlbS1jb250YWluZXIuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHNwYXJrZGVzaWduc3lzdGVtL3NwYXJrLWFuZ3VsYXIvIiwic291cmNlcyI6WyJsaWIvY29tcG9uZW50cy9pbnB1dHMvc3Byay1zZWxlY3Rpb24taXRlbS1jb250YWluZXIvc3Byay1zZWxlY3Rpb24taXRlbS1jb250YWluZXIuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLFlBQVksRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFFLFNBQVMsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUNsRixPQUFPLFFBQVEsTUFBTSxpQkFBaUIsQ0FBQztBQUN2QyxPQUFPLEVBQUUsMkJBQTJCLEVBQUUsTUFBTSxnRkFBZ0YsQ0FBQztBQUM3SCxPQUFPLEVBQUUsMkJBQTJCLEVBQUUsTUFBTSxnRkFBZ0YsQ0FBQztBQVk3SDtJQUNFLDZDQUFxQixRQUFtQjtRQUFuQixhQUFRLEdBQVIsUUFBUSxDQUFXO0lBQUcsQ0FBQztJQXNCNUM7O09BRUc7SUFDSCx3REFBVSxHQUFWO1FBQ0UsSUFBTSxVQUFVLEdBQWEsQ0FBQywyQkFBMkIsQ0FBQyxDQUFDO1FBRTNELElBQUksSUFBSSxDQUFDLGlCQUFpQixFQUFFO1lBQzFCLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsT0FBTyxDQUFDLFVBQUEsU0FBUztnQkFDakQsVUFBVSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQztZQUM3QixDQUFDLENBQUMsQ0FBQztTQUNKO1FBRUQsT0FBTyxVQUFVLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQzlCLENBQUM7SUFFRDs7T0FFRztJQUNILGlFQUFtQixHQUFuQjtRQUNFLElBQU0sU0FBUyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUM7UUFDcEQsSUFBSSxTQUFTLEtBQUssVUFBVSxFQUFFO1lBQzVCLElBQUksQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLGFBQWEsRUFBRSx3QkFBd0IsQ0FBQyxDQUFDO1lBQy9FLElBQUksQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLGFBQWEsRUFBRSx3QkFBd0IsQ0FBQyxDQUFDO1NBQ2hGO1FBQ0QsSUFBSSxTQUFTLEtBQUssT0FBTyxFQUFFO1lBQ3pCLElBQUksQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLGFBQWEsRUFBRSxxQkFBcUIsQ0FBQyxDQUFDO1lBQzVFLElBQUksQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLGFBQWEsRUFBRSxxQkFBcUIsQ0FBQyxDQUFDO1NBQzdFO0lBQ0gsQ0FBQztJQUVEOztPQUVHO0lBQ0gsZ0VBQWtCLEdBQWxCO1FBQ0UsSUFBSSxPQUFPLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsYUFBYSxDQUFDLEVBQUUsQ0FBQztRQUM5QyxJQUFNLFFBQVEsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxhQUFhLENBQUMsT0FBTyxDQUFDO1FBRXRELDZDQUE2QztRQUM3QyxJQUFJLFFBQVEsSUFBSSxDQUFDLE9BQU8sRUFBRTtZQUN4QixPQUFPLENBQUMsSUFBSSxDQUFDLHVEQUFxRCxRQUFRLHlEQUFzRCxDQUFDLENBQUM7WUFDbEksT0FBTztTQUNSO1FBRUQsb0RBQW9EO1FBQ3BELElBQUksT0FBTyxJQUFJLFFBQVEsSUFBSSxPQUFPLEtBQUssUUFBUSxFQUFFO1lBQy9DLE9BQU8sQ0FBQyxJQUFJLENBQ1YsdURBQXFELFFBQVEsMkRBQXNELE9BQU8sT0FBSSxDQUMvSCxDQUFDO1lBQ0YsT0FBTztTQUNSO1FBRUQsd0RBQXdEO1FBQ3hELElBQUksQ0FBQyxPQUFPLEVBQUU7WUFDWixPQUFPLEdBQUcsUUFBUSxDQUFDLGFBQWEsQ0FBQyxDQUFDO1lBQ2xDLElBQUksQ0FBQyxRQUFRLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLGFBQWEsRUFBRSxJQUFJLEVBQUUsT0FBTyxDQUFDLENBQUM7WUFDdkUsSUFBSSxDQUFDLFFBQVEsQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsYUFBYSxFQUFFLEtBQUssRUFBRSxPQUFPLENBQUMsQ0FBQztTQUMxRTtJQUNILENBQUM7SUFFRCxzREFBUSxHQUFSO1FBQ0UsSUFBSSxJQUFJLENBQUMsS0FBSyxJQUFJLElBQUksQ0FBQyxLQUFLLEVBQUU7WUFDNUIsSUFBSSxDQUFDLGtCQUFrQixFQUFFLENBQUM7WUFDMUIsSUFBSSxDQUFDLG1CQUFtQixFQUFFLENBQUM7U0FDNUI7SUFDSCxDQUFDOztnQkF0RjhCLFNBQVM7O0lBT3hDO1FBREMsS0FBSyxFQUFFOztrRkFDa0I7SUFPMUI7UUFEQyxZQUFZLENBQUMsMkJBQTJCLEVBQUUsRUFBRSxNQUFNLEVBQUUsSUFBSSxFQUFFLENBQUM7a0NBQ3JELDJCQUEyQjtzRUFBQztJQU1uQztRQURDLFlBQVksQ0FBQywyQkFBMkIsRUFBRSxFQUFFLE1BQU0sRUFBRSxJQUFJLEVBQUUsQ0FBQztrQ0FDckQsMkJBQTJCO3NFQUFDO0lBckJ4QixtQ0FBbUM7UUFWL0MsU0FBUyxDQUFDO1lBQ1QsUUFBUSxFQUFFLCtCQUErQjtZQUN6QyxRQUFRLEVBQUUsMk5BTVQ7U0FDRixDQUFDO3lDQUUrQixTQUFTO09BRDdCLG1DQUFtQyxDQXdGL0M7SUFBRCwwQ0FBQztDQUFBLEFBeEZELElBd0ZDO1NBeEZZLG1DQUFtQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgQ29udGVudENoaWxkLCBJbnB1dCwgT25Jbml0LCBSZW5kZXJlcjIgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB1bmlxdWVJZCBmcm9tICdsb2Rhc2gvdW5pcXVlSWQnO1xuaW1wb3J0IHsgU3Bya1NlbGVjdGlvbklucHV0RGlyZWN0aXZlIH0gZnJvbSAnLi4vLi4vLi4vZGlyZWN0aXZlcy9pbnB1dHMvc3Byay1zZWxlY3Rpb24taW5wdXQvc3Byay1zZWxlY3Rpb24taW5wdXQuZGlyZWN0aXZlJztcbmltcG9ydCB7IFNwcmtTZWxlY3Rpb25MYWJlbERpcmVjdGl2ZSB9IGZyb20gJy4uLy4uLy4uL2RpcmVjdGl2ZXMvaW5wdXRzL3Nwcmstc2VsZWN0aW9uLWxhYmVsL3Nwcmstc2VsZWN0aW9uLWxhYmVsLmRpcmVjdGl2ZSc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ3Nwcmstc2VsZWN0aW9uLWl0ZW0tY29udGFpbmVyJyxcbiAgdGVtcGxhdGU6IGBcbiAgICA8ZGl2IFtuZ0NsYXNzXT1cImdldENsYXNzZXMoKVwiPlxuICAgICAgPG5nLWNvbnRlbnQgc2VsZWN0PVwiW3NwcmtTZWxlY3Rpb25JbnB1dF1cIj48L25nLWNvbnRlbnQ+XG4gICAgICA8bmctY29udGVudCBzZWxlY3Q9XCJbc3Bya1NlbGVjdGlvbkxhYmVsXVwiPjwvbmctY29udGVudD5cbiAgICAgIDxuZy1jb250ZW50PjwvbmctY29udGVudD5cbiAgICA8L2Rpdj5cbiAgYFxufSlcbmV4cG9ydCBjbGFzcyBTcHJrU2VsZWN0aW9uSXRlbUNvbnRhaW5lckNvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCB7XG4gIGNvbnN0cnVjdG9yKCBwcml2YXRlIHJlbmRlcmVyOiBSZW5kZXJlcjIpIHt9XG4gIC8qKlxuICAgKiBFeHBlY3RzIGEgc3BhY2Ugc2VwYXJhdGVkIHN0cmluZ1xuICAgKiBvZiBjbGFzc2VzIHRvIGJlIGFkZGVkIHRvIHRoZVxuICAgKiBjb21wb25lbnQuXG4gICAqL1xuICBASW5wdXQoKVxuICBhZGRpdGlvbmFsQ2xhc3Nlczogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBUaGlzIGNvbXBvbmVudCBleHBlY3RzIGEgY2hpbGQgbGFiZWwgZWxlbWVudFxuICAgKiB3aXRoIHRoZSBgc3Bya1NlbGVjdGlvbkxhYmVsYCBkaXJlY3RpdmUuXG4gICAqL1xuICBAQ29udGVudENoaWxkKFNwcmtTZWxlY3Rpb25MYWJlbERpcmVjdGl2ZSwgeyBzdGF0aWM6IHRydWUgfSlcbiAgbGFiZWw6IFNwcmtTZWxlY3Rpb25MYWJlbERpcmVjdGl2ZTtcbiAgLyoqXG4gICAqIFRoaXMgY29tcG9uZW50IGV4cGVjdHMgYSBjaGlsZCBzZWxlY3Rpb24gaW5wdXRcbiAgICogd2l0aCB0aGUgYHNwcmtTZWxlY3Rpb25JbnB1dGAgZGlyZWN0aXZlLlxuICAgKi9cbiAgQENvbnRlbnRDaGlsZChTcHJrU2VsZWN0aW9uSW5wdXREaXJlY3RpdmUsIHsgc3RhdGljOiB0cnVlIH0pXG4gIGlucHV0OiBTcHJrU2VsZWN0aW9uSW5wdXREaXJlY3RpdmU7XG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGdldENsYXNzZXMoKTogc3RyaW5nIHtcbiAgICBjb25zdCBjbGFzc0FycmF5OiBzdHJpbmdbXSA9IFsnc3Byay1iLVNlbGVjdGlvbkNvbnRhaW5lciddO1xuXG4gICAgaWYgKHRoaXMuYWRkaXRpb25hbENsYXNzZXMpIHtcbiAgICAgIHRoaXMuYWRkaXRpb25hbENsYXNzZXMuc3BsaXQoJyAnKS5mb3JFYWNoKGNsYXNzTmFtZSA9PiB7XG4gICAgICAgIGNsYXNzQXJyYXkucHVzaChjbGFzc05hbWUpO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGNsYXNzQXJyYXkuam9pbignICcpO1xuICB9XG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGFkZElucHV0VHlwZUNsYXNzZXMoKTogdm9pZCB7XG4gICAgY29uc3QgaW5wdXRUeXBlID0gdGhpcy5pbnB1dC5yZWYubmF0aXZlRWxlbWVudC50eXBlO1xuICAgIGlmIChpbnB1dFR5cGUgPT09ICdjaGVja2JveCcpIHtcbiAgICAgIHRoaXMucmVuZGVyZXIuYWRkQ2xhc3ModGhpcy5pbnB1dC5yZWYubmF0aXZlRWxlbWVudCwgJ3NwcmstYi1DaGVja2JveF9faW5wdXQnKTtcbiAgICAgIHRoaXMucmVuZGVyZXIuYWRkQ2xhc3ModGhpcy5sYWJlbC5yZWYubmF0aXZlRWxlbWVudCwgJ3NwcmstYi1DaGVja2JveF9fbGFiZWwnKTtcbiAgICB9XG4gICAgaWYgKGlucHV0VHlwZSA9PT0gJ3JhZGlvJykge1xuICAgICAgdGhpcy5yZW5kZXJlci5hZGRDbGFzcyh0aGlzLmlucHV0LnJlZi5uYXRpdmVFbGVtZW50LCAnc3Byay1iLVJhZGlvX19pbnB1dCcpO1xuICAgICAgdGhpcy5yZW5kZXJlci5hZGRDbGFzcyh0aGlzLmxhYmVsLnJlZi5uYXRpdmVFbGVtZW50LCAnc3Byay1iLVJhZGlvX19sYWJlbCcpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBnZW5lcmF0ZUlkRm9ySW5wdXQoKTogdm9pZCB7XG4gICAgbGV0IGlucHV0SWQgPSB0aGlzLmlucHV0LnJlZi5uYXRpdmVFbGVtZW50LmlkO1xuICAgIGNvbnN0IGxhYmVsRm9yID0gdGhpcy5sYWJlbC5yZWYubmF0aXZlRWxlbWVudC5odG1sRm9yO1xuXG4gICAgLy8gV2FybiBpZiAnZm9yJyBleGlzdHMgYnV0IHRoZSAnaWQnIGRvZXMgbm90XG4gICAgaWYgKGxhYmVsRm9yICYmICFpbnB1dElkKSB7XG4gICAgICBjb25zb2xlLndhcm4oYFNwYXJrIERlc2lnbiBTeXN0ZW0gV2FybmluZyAtIFRoZSB2YWx1ZSBvZiAnZm9yJyAoJHtsYWJlbEZvcn0pIG9uIHRoZSBsYWJlbCBleHBlY3RzIGEgbWF0Y2hpbmcgJ2lkJyBvbiB0aGUgaW5wdXQuYCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy8gV2FybiBpZiAnZm9yJyBhbmQgJ2lkJyBib3RoIGV4aXN0IGJ1dCBkb24ndCBtYXRjaFxuICAgIGlmIChpbnB1dElkICYmIGxhYmVsRm9yICYmIGlucHV0SWQgIT09IGxhYmVsRm9yKSB7XG4gICAgICBjb25zb2xlLndhcm4oXG4gICAgICAgIGBTcGFyayBEZXNpZ24gU3lzdGVtIFdhcm5pbmcgLSBUaGUgdmFsdWUgb2YgJ2ZvcicgKCR7bGFiZWxGb3J9KSBvbiB0aGUgbGFiZWwgc2hvdWxkIG1hdGNoIHRoZSAnaWQnIG9uIHRoZSBpbnB1dCAoJHtpbnB1dElkfSkuYFxuICAgICAgKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvLyBJZiB3ZSBkb24ndCBoYXZlIGEgdmFsaWQgaWQsIGdlbmVyYXRlIG9uZSB3aXRoIGxvZGFzaFxuICAgIGlmICghaW5wdXRJZCkge1xuICAgICAgaW5wdXRJZCA9IHVuaXF1ZUlkKGBzcHJrX2lucHV0X2ApO1xuICAgICAgdGhpcy5yZW5kZXJlci5zZXRQcm9wZXJ0eSh0aGlzLmlucHV0LnJlZi5uYXRpdmVFbGVtZW50LCAnaWQnLCBpbnB1dElkKTtcbiAgICAgIHRoaXMucmVuZGVyZXIuc2V0QXR0cmlidXRlKHRoaXMubGFiZWwucmVmLm5hdGl2ZUVsZW1lbnQsICdmb3InLCBpbnB1dElkKTtcbiAgICB9XG4gIH1cblxuICBuZ09uSW5pdCgpOiB2b2lkIHtcbiAgICBpZiAodGhpcy5sYWJlbCAmJiB0aGlzLmlucHV0KSB7XG4gICAgICB0aGlzLmdlbmVyYXRlSWRGb3JJbnB1dCgpO1xuICAgICAgdGhpcy5hZGRJbnB1dFR5cGVDbGFzc2VzKCk7XG4gICAgfVxuICB9XG59XG4iXX0=