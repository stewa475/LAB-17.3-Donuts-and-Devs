import { __decorate, __metadata } from "tslib";
import { Component, Input } from '@angular/core';
import * as _ from 'lodash';
import { toggleAnimations } from '../../sprk-toggle/sprk-toggle-animations';
var SprkMastheadAccordionItemComponent = /** @class */ (function () {
    function SprkMastheadAccordionItemComponent() {
        /**
         * If `true`, the Masthead accordion item
         * will be open when it is rendered.
         */
        this.isOpen = false;
        /**
         * The name of the icon to use
         * for the clickable close icon.
         */
        this.iconTypeClosed = 'chevron-up-circle-two-color';
        /**
         * The name of the icon to use
         * for the clickable open icon.
         */
        this.iconTypeOpen = 'chevron-up-circle-two-color';
        /**
         * @ignore
         */
        this.componentID = _.uniqueId();
        /**
         * @ignore
         */
        this.accordion_controls_id = "accordionHeading__" + this.componentID;
        /**
         * @ignore
         */
        this.currentIconType = this.iconTypeClosed;
        /**
         * @ignore
         */
        this.iconStateClass = '';
        /**
         * @ignore
         */
        this.animState = 'closed';
    }
    /**
     * @ignore
     */
    SprkMastheadAccordionItemComponent.prototype.accordionState = function () {
        this.isOpen === false
            ? (this.animState = 'closed')
            : (this.animState = 'open');
        this.isOpen === false
            ? (this.currentIconType = this.iconTypeClosed)
            : (this.currentIconType = this.iconTypeOpen);
        this.isOpen === false
            ? (this.iconStateClass = '')
            : (this.iconStateClass = 'sprk-c-Icon--open');
    };
    /**
     * @ignore
     */
    SprkMastheadAccordionItemComponent.prototype.toggleAccordion = function (event) {
        event.preventDefault();
        this.isOpen = !this.isOpen;
        this.accordionState();
    };
    /**
     * @ignore
     */
    SprkMastheadAccordionItemComponent.prototype.getClasses = function () {
        var classArray = [
            'sprk-c-MastheadAccordion__item',
            'sprk-u-Overflow--hidden'
        ];
        if (this.isOpen) {
            classArray.push('sprk-c-MastheadAccordion__item--open');
        }
        if (this.isActive) {
            classArray.push('sprk-c-MastheadAccordion__item--active');
        }
        if (this.additionalClasses) {
            this.additionalClasses.split(' ').forEach(function (className) {
                classArray.push(className);
            });
        }
        return classArray.join(' ');
    };
    /**
     * @ignore
     */
    SprkMastheadAccordionItemComponent.prototype.getHeadingClasses = function () {
        var classArray = ['sprk-c-MastheadAccordion__heading'];
        if (this.additionalHeadingClasses) {
            this.additionalHeadingClasses.split(' ').forEach(function (className) {
                classArray.push(className);
            });
        }
        return classArray.join(' ');
    };
    SprkMastheadAccordionItemComponent.prototype.ngOnInit = function () {
        this.accordionState();
    };
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], SprkMastheadAccordionItemComponent.prototype, "title", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], SprkMastheadAccordionItemComponent.prototype, "analyticsString", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], SprkMastheadAccordionItemComponent.prototype, "idString", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], SprkMastheadAccordionItemComponent.prototype, "additionalClasses", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], SprkMastheadAccordionItemComponent.prototype, "additionalHeadingClasses", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], SprkMastheadAccordionItemComponent.prototype, "isOpen", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Boolean)
    ], SprkMastheadAccordionItemComponent.prototype, "isActive", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], SprkMastheadAccordionItemComponent.prototype, "iconTypeClosed", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], SprkMastheadAccordionItemComponent.prototype, "iconTypeOpen", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], SprkMastheadAccordionItemComponent.prototype, "leadingIcon", void 0);
    SprkMastheadAccordionItemComponent = __decorate([
        Component({
            selector: 'sprk-masthead-accordion-item',
            template: "\n    <li [ngClass]=\"getClasses()\">\n      <div\n        class=\"sprk-u-Position--relative sprk-o-Stack__item sprk-u-Width-100\"\n      >\n        <button\n          [attr.aria-controls]=\"accordion_controls_id\"\n          class=\"sprk-c-MastheadAccordion__summary\"\n          [attr.data-analytics]=\"analyticsString\"\n          [attr.data-id]=\"idString\"\n          (click)=\"toggleAccordion($event)\"\n          [attr.aria-expanded]=\"isOpen\"\n        >\n          <span [ngClass]=\"getHeadingClasses()\">\n            <sprk-icon\n              [iconType]=\"leadingIcon\"\n              additionalClasses=\"sprk-c-Icon--stroke-current-color sprk-c-Icon--l sprk-c-Icon--toggle sprk-u-mrs\"\n              *ngIf=\"leadingIcon\"\n            ></sprk-icon>\n            {{ title }}\n          </span>\n\n          <sprk-icon\n            additionalClasses=\"sprk-c-MastheadAccordion__icon sprk-c-Icon--stroke-current-color sprk-c-Icon--toggle {{\n              iconStateClass\n            }}\"\n            [iconType]=\"currentIconType\"\n          ></sprk-icon>\n        </button>\n      </div>\n\n      <div [@toggleContent]=\"animState\">\n        <div [id]=\"accordion_controls_id\"><ng-content></ng-content></div>\n      </div>\n    </li>\n  ",
            animations: [toggleAnimations.toggleContent]
        })
    ], SprkMastheadAccordionItemComponent);
    return SprkMastheadAccordionItemComponent;
}());
export { SprkMastheadAccordionItemComponent };
//# sourceMappingURL=data:application/json;base64,