import { __decorate, __metadata } from "tslib";
import { Component, ContentChild, Input, OnInit, Renderer2 } from '@angular/core';
import uniqueId from 'lodash/uniqueId';
import { SprkSelectionInputDirective } from '../../../directives/inputs/sprk-selection-input/sprk-selection-input.directive';
import { SprkSelectionLabelDirective } from '../../../directives/inputs/sprk-selection-label/sprk-selection-label.directive';
let SprkSelectionItemContainerComponent = class SprkSelectionItemContainerComponent {
    constructor(renderer) {
        this.renderer = renderer;
    }
    /**
     * @ignore
     */
    getClasses() {
        const classArray = ['sprk-b-SelectionContainer'];
        if (this.additionalClasses) {
            this.additionalClasses.split(' ').forEach(className => {
                classArray.push(className);
            });
        }
        return classArray.join(' ');
    }
    /**
     * @ignore
     */
    addInputTypeClasses() {
        const inputType = this.input.ref.nativeElement.type;
        if (inputType === 'checkbox') {
            this.renderer.addClass(this.input.ref.nativeElement, 'sprk-b-Checkbox__input');
            this.renderer.addClass(this.label.ref.nativeElement, 'sprk-b-Checkbox__label');
        }
        if (inputType === 'radio') {
            this.renderer.addClass(this.input.ref.nativeElement, 'sprk-b-Radio__input');
            this.renderer.addClass(this.label.ref.nativeElement, 'sprk-b-Radio__label');
        }
    }
    /**
     * @ignore
     */
    generateIdForInput() {
        let inputId = this.input.ref.nativeElement.id;
        const labelFor = this.label.ref.nativeElement.htmlFor;
        // Warn if 'for' exists but the 'id' does not
        if (labelFor && !inputId) {
            console.warn(`Spark Design System Warning - The value of 'for' (${labelFor}) on the label expects a matching 'id' on the input.`);
            return;
        }
        // Warn if 'for' and 'id' both exist but don't match
        if (inputId && labelFor && inputId !== labelFor) {
            console.warn(`Spark Design System Warning - The value of 'for' (${labelFor}) on the label should match the 'id' on the input (${inputId}).`);
            return;
        }
        // If we don't have a valid id, generate one with lodash
        if (!inputId) {
            inputId = uniqueId(`sprk_input_`);
            this.renderer.setProperty(this.input.ref.nativeElement, 'id', inputId);
            this.renderer.setAttribute(this.label.ref.nativeElement, 'for', inputId);
        }
    }
    ngOnInit() {
        if (this.label && this.input) {
            this.generateIdForInput();
            this.addInputTypeClasses();
        }
    }
};
SprkSelectionItemContainerComponent.ctorParameters = () => [
    { type: Renderer2 }
];
__decorate([
    Input(),
    __metadata("design:type", String)
], SprkSelectionItemContainerComponent.prototype, "additionalClasses", void 0);
__decorate([
    ContentChild(SprkSelectionLabelDirective, { static: true }),
    __metadata("design:type", SprkSelectionLabelDirective)
], SprkSelectionItemContainerComponent.prototype, "label", void 0);
__decorate([
    ContentChild(SprkSelectionInputDirective, { static: true }),
    __metadata("design:type", SprkSelectionInputDirective)
], SprkSelectionItemContainerComponent.prototype, "input", void 0);
SprkSelectionItemContainerComponent = __decorate([
    Component({
        selector: 'sprk-selection-item-container',
        template: `
    <div [ngClass]="getClasses()">
      <ng-content select="[sprkSelectionInput]"></ng-content>
      <ng-content select="[sprkSelectionLabel]"></ng-content>
      <ng-content></ng-content>
    </div>
  `
    }),
    __metadata("design:paramtypes", [Renderer2])
], SprkSelectionItemContainerComponent);
export { SprkSelectionItemContainerComponent };
//# sourceMappingURL=data:application/json;base64,