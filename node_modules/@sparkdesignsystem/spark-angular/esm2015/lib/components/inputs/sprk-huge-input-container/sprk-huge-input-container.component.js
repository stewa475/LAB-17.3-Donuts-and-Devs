import { __decorate, __metadata } from "tslib";
import { Component, ContentChild, Input } from '@angular/core';
import { uniqueId } from 'lodash';
import { SprkFieldErrorDirective } from '../../../directives/inputs/sprk-field-error/sprk-field-error.directive';
import { SprkInputDirective } from '../../../directives/inputs/sprk-input/sprk-input.directive';
import { SprkLabelDirective } from '../../../directives/inputs/sprk-label/sprk-label.directive';
let SprkHugeInputContainerComponent = class SprkHugeInputContainerComponent {
    constructor() {
        /**
         * @ignore
         */
        this.id = uniqueId();
        /**
         * @ignore
         */
        this.input_id = `input_${this.id}`;
        /**
         * @ignore
         */
        this.error_id = `error_${this.id}`;
    }
    /**
     * @ignore
     */
    getClasses() {
        const classArray = [
            'sprk-b-InputContainer',
            'sprk-b-InputContainer--huge'
        ];
        if (this.additionalClasses) {
            this.additionalClasses.split(' ').forEach(className => {
                classArray.push(className);
            });
        }
        return classArray.join(' ');
    }
    ngOnInit() {
        if (this.label && this.input) {
            this.label.ref.nativeElement.setAttribute('for', this.input_id);
            this.input.ref.nativeElement.id = this.input_id;
        }
        if (this.input && this.error) {
            this.input.ref.nativeElement.setAttribute('aria-describedby', this.error_id);
            this.error.ref.nativeElement.id = this.error_id;
        }
    }
};
__decorate([
    Input(),
    __metadata("design:type", String)
], SprkHugeInputContainerComponent.prototype, "additionalClasses", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], SprkHugeInputContainerComponent.prototype, "iconContainerClasses", void 0);
__decorate([
    ContentChild(SprkLabelDirective, { static: true }),
    __metadata("design:type", SprkLabelDirective)
], SprkHugeInputContainerComponent.prototype, "label", void 0);
__decorate([
    ContentChild(SprkInputDirective, { static: true }),
    __metadata("design:type", SprkInputDirective)
], SprkHugeInputContainerComponent.prototype, "input", void 0);
__decorate([
    ContentChild(SprkFieldErrorDirective, { static: true }),
    __metadata("design:type", SprkFieldErrorDirective)
], SprkHugeInputContainerComponent.prototype, "error", void 0);
SprkHugeInputContainerComponent = __decorate([
    Component({
        selector: 'sprk-huge-input-container',
        template: `
    <div [ngClass]="getClasses()">
      <ng-content select="[sprkInput]"></ng-content>
      <ng-content select="[sprkLabel]"></ng-content>
      <ng-content select="[sprk-select-icon]"></ng-content>
      <ng-content select="sprk-selection-item-container"></ng-content>
      <ng-content select="[sprkHelperText]"></ng-content>
      <ng-content select="[sprkFieldError]"></ng-content>
    </div>
  `
    })
], SprkHugeInputContainerComponent);
export { SprkHugeInputContainerComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3Byay1odWdlLWlucHV0LWNvbnRhaW5lci5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9Ac3BhcmtkZXNpZ25zeXN0ZW0vc3BhcmstYW5ndWxhci8iLCJzb3VyY2VzIjpbImxpYi9jb21wb25lbnRzL2lucHV0cy9zcHJrLWh1Z2UtaW5wdXQtY29udGFpbmVyL3NwcmstaHVnZS1pbnB1dC1jb250YWluZXIuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLFlBQVksRUFBRSxLQUFLLEVBQVUsTUFBTSxlQUFlLENBQUM7QUFDdkUsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLFFBQVEsQ0FBQztBQUNsQyxPQUFPLEVBQUUsdUJBQXVCLEVBQUUsTUFBTSx3RUFBd0UsQ0FBQztBQUNqSCxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSw0REFBNEQsQ0FBQztBQUNoRyxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSw0REFBNEQsQ0FBQztBQWVoRyxJQUFhLCtCQUErQixHQUE1QyxNQUFhLCtCQUErQjtJQUE1QztRQWtDRTs7V0FFRztRQUNILE9BQUUsR0FBRyxRQUFRLEVBQUUsQ0FBQztRQUNoQjs7V0FFRztRQUNILGFBQVEsR0FBRyxTQUFTLElBQUksQ0FBQyxFQUFFLEVBQUUsQ0FBQztRQUM5Qjs7V0FFRztRQUNILGFBQVEsR0FBRyxTQUFTLElBQUksQ0FBQyxFQUFFLEVBQUUsQ0FBQztJQWdDaEMsQ0FBQztJQTlCQzs7T0FFRztJQUNILFVBQVU7UUFDUixNQUFNLFVBQVUsR0FBYTtZQUMzQix1QkFBdUI7WUFDdkIsNkJBQTZCO1NBQzlCLENBQUM7UUFFRixJQUFJLElBQUksQ0FBQyxpQkFBaUIsRUFBRTtZQUMxQixJQUFJLENBQUMsaUJBQWlCLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsRUFBRTtnQkFDcEQsVUFBVSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQztZQUM3QixDQUFDLENBQUMsQ0FBQztTQUNKO1FBQ0QsT0FBTyxVQUFVLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQzlCLENBQUM7SUFFRCxRQUFRO1FBQ04sSUFBSSxJQUFJLENBQUMsS0FBSyxJQUFJLElBQUksQ0FBQyxLQUFLLEVBQUU7WUFDNUIsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsYUFBYSxDQUFDLFlBQVksQ0FBQyxLQUFLLEVBQUUsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1lBQ2hFLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLGFBQWEsQ0FBQyxFQUFFLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQztTQUNqRDtRQUNELElBQUksSUFBSSxDQUFDLEtBQUssSUFBSSxJQUFJLENBQUMsS0FBSyxFQUFFO1lBQzVCLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLGFBQWEsQ0FBQyxZQUFZLENBQ3ZDLGtCQUFrQixFQUNsQixJQUFJLENBQUMsUUFBUSxDQUNkLENBQUM7WUFDRixJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxhQUFhLENBQUMsRUFBRSxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUM7U0FDakQ7SUFDSCxDQUFDO0NBQ0YsQ0FBQTtBQXRFQztJQURDLEtBQUssRUFBRTs7MEVBQ2tCO0FBTzFCO0lBREMsS0FBSyxFQUFFOzs2RUFDcUI7QUFNN0I7SUFEQyxZQUFZLENBQUMsa0JBQWtCLEVBQUUsRUFBRSxNQUFNLEVBQUUsSUFBSSxFQUFFLENBQUM7OEJBQzVDLGtCQUFrQjs4REFBQztBQU0xQjtJQURDLFlBQVksQ0FBQyxrQkFBa0IsRUFBRSxFQUFFLE1BQU0sRUFBRSxJQUFJLEVBQUUsQ0FBQzs4QkFDNUMsa0JBQWtCOzhEQUFDO0FBTTFCO0lBREMsWUFBWSxDQUFDLHVCQUF1QixFQUFFLEVBQUUsTUFBTSxFQUFFLElBQUksRUFBRSxDQUFDOzhCQUNqRCx1QkFBdUI7OERBQUM7QUFoQ3BCLCtCQUErQjtJQWIzQyxTQUFTLENBQUM7UUFDVCxRQUFRLEVBQUUsMkJBQTJCO1FBQ3JDLFFBQVEsRUFBRTs7Ozs7Ozs7O0dBU1Q7S0FDRixDQUFDO0dBQ1csK0JBQStCLENBNkUzQztTQTdFWSwrQkFBK0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIENvbnRlbnRDaGlsZCwgSW5wdXQsIE9uSW5pdCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgdW5pcXVlSWQgfSBmcm9tICdsb2Rhc2gnO1xuaW1wb3J0IHsgU3Bya0ZpZWxkRXJyb3JEaXJlY3RpdmUgfSBmcm9tICcuLi8uLi8uLi9kaXJlY3RpdmVzL2lucHV0cy9zcHJrLWZpZWxkLWVycm9yL3NwcmstZmllbGQtZXJyb3IuZGlyZWN0aXZlJztcbmltcG9ydCB7IFNwcmtJbnB1dERpcmVjdGl2ZSB9IGZyb20gJy4uLy4uLy4uL2RpcmVjdGl2ZXMvaW5wdXRzL3NwcmstaW5wdXQvc3Byay1pbnB1dC5kaXJlY3RpdmUnO1xuaW1wb3J0IHsgU3Bya0xhYmVsRGlyZWN0aXZlIH0gZnJvbSAnLi4vLi4vLi4vZGlyZWN0aXZlcy9pbnB1dHMvc3Byay1sYWJlbC9zcHJrLWxhYmVsLmRpcmVjdGl2ZSc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ3NwcmstaHVnZS1pbnB1dC1jb250YWluZXInLFxuICB0ZW1wbGF0ZTogYFxuICAgIDxkaXYgW25nQ2xhc3NdPVwiZ2V0Q2xhc3NlcygpXCI+XG4gICAgICA8bmctY29udGVudCBzZWxlY3Q9XCJbc3Bya0lucHV0XVwiPjwvbmctY29udGVudD5cbiAgICAgIDxuZy1jb250ZW50IHNlbGVjdD1cIltzcHJrTGFiZWxdXCI+PC9uZy1jb250ZW50PlxuICAgICAgPG5nLWNvbnRlbnQgc2VsZWN0PVwiW3Nwcmstc2VsZWN0LWljb25dXCI+PC9uZy1jb250ZW50PlxuICAgICAgPG5nLWNvbnRlbnQgc2VsZWN0PVwic3Byay1zZWxlY3Rpb24taXRlbS1jb250YWluZXJcIj48L25nLWNvbnRlbnQ+XG4gICAgICA8bmctY29udGVudCBzZWxlY3Q9XCJbc3Bya0hlbHBlclRleHRdXCI+PC9uZy1jb250ZW50PlxuICAgICAgPG5nLWNvbnRlbnQgc2VsZWN0PVwiW3NwcmtGaWVsZEVycm9yXVwiPjwvbmctY29udGVudD5cbiAgICA8L2Rpdj5cbiAgYFxufSlcbmV4cG9ydCBjbGFzcyBTcHJrSHVnZUlucHV0Q29udGFpbmVyQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0IHtcbiAvKipcbiAgKiBFeHBlY3RzIGEgc3BhY2Ugc2VwYXJhdGVkIHN0cmluZ1xuICAqIG9mIGNsYXNzZXMgdG8gYmUgYWRkZWQgdG8gdGhlXG4gICogY29tcG9uZW50LlxuICAqL1xuICBASW5wdXQoKVxuICBhZGRpdGlvbmFsQ2xhc3Nlczogc3RyaW5nO1xuIC8qKlxuICAqIEV4cGVjdHMgYSBzcGFjZSBzZXBhcmF0ZWQgc3RyaW5nXG4gICogb2YgY2xhc3NlcyB0byBiZSBhZGRlZCB0byB0aGVcbiAgKiBpY29uIGNvbnRhaW5lci5cbiAgKi9cbiAgQElucHV0KClcbiAgaWNvbkNvbnRhaW5lckNsYXNzZXM6IHN0cmluZztcbiAgLyoqXG4gICAqIFRoaXMgY29tcG9uZW50IGV4cGVjdHMgYSBjaGlsZCBsYWJlbCBlbGVtZW50XG4gICAqIHdpdGggdGhlIGBzcHJrTGFiZWxgIGRpcmVjdGl2ZS5cbiAgICovXG4gIEBDb250ZW50Q2hpbGQoU3Bya0xhYmVsRGlyZWN0aXZlLCB7IHN0YXRpYzogdHJ1ZSB9KVxuICBsYWJlbDogU3Bya0xhYmVsRGlyZWN0aXZlO1xuIC8qKlxuICAqIFRoaXMgY29tcG9uZW50IGV4cGVjdHMgYSBjaGlsZCBpbnB1dCBlbGVtZW50XG4gICogd2l0aCB0aGUgYHNwcmtJbnB1dGAgZGlyZWN0aXZlLlxuICAqL1xuICBAQ29udGVudENoaWxkKFNwcmtJbnB1dERpcmVjdGl2ZSwgeyBzdGF0aWM6IHRydWUgfSlcbiAgaW5wdXQ6IFNwcmtJbnB1dERpcmVjdGl2ZTtcbiAgLyoqXG4gICAqIFRoaXMgY29tcG9uZW50IGV4cGVjdHMgYSBjaGlsZCBlbGVtZW50XG4gICAqIHdpdGggdGhlIGBzcHJrRmllbGRFcnJvcmAgZGlyZWN0aXZlLlxuICAgKi9cbiAgQENvbnRlbnRDaGlsZChTcHJrRmllbGRFcnJvckRpcmVjdGl2ZSwgeyBzdGF0aWM6IHRydWUgfSlcbiAgZXJyb3I6IFNwcmtGaWVsZEVycm9yRGlyZWN0aXZlO1xuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBpZCA9IHVuaXF1ZUlkKCk7XG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBpbnB1dF9pZCA9IGBpbnB1dF8ke3RoaXMuaWR9YDtcbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGVycm9yX2lkID0gYGVycm9yXyR7dGhpcy5pZH1gO1xuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBnZXRDbGFzc2VzKCk6IHN0cmluZyB7XG4gICAgY29uc3QgY2xhc3NBcnJheTogc3RyaW5nW10gPSBbXG4gICAgICAnc3Byay1iLUlucHV0Q29udGFpbmVyJyxcbiAgICAgICdzcHJrLWItSW5wdXRDb250YWluZXItLWh1Z2UnXG4gICAgXTtcblxuICAgIGlmICh0aGlzLmFkZGl0aW9uYWxDbGFzc2VzKSB7XG4gICAgICB0aGlzLmFkZGl0aW9uYWxDbGFzc2VzLnNwbGl0KCcgJykuZm9yRWFjaChjbGFzc05hbWUgPT4ge1xuICAgICAgICBjbGFzc0FycmF5LnB1c2goY2xhc3NOYW1lKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gY2xhc3NBcnJheS5qb2luKCcgJyk7XG4gIH1cblxuICBuZ09uSW5pdCgpOiB2b2lkIHtcbiAgICBpZiAodGhpcy5sYWJlbCAmJiB0aGlzLmlucHV0KSB7XG4gICAgICB0aGlzLmxhYmVsLnJlZi5uYXRpdmVFbGVtZW50LnNldEF0dHJpYnV0ZSgnZm9yJywgdGhpcy5pbnB1dF9pZCk7XG4gICAgICB0aGlzLmlucHV0LnJlZi5uYXRpdmVFbGVtZW50LmlkID0gdGhpcy5pbnB1dF9pZDtcbiAgICB9XG4gICAgaWYgKHRoaXMuaW5wdXQgJiYgdGhpcy5lcnJvcikge1xuICAgICAgdGhpcy5pbnB1dC5yZWYubmF0aXZlRWxlbWVudC5zZXRBdHRyaWJ1dGUoXG4gICAgICAgICdhcmlhLWRlc2NyaWJlZGJ5JyxcbiAgICAgICAgdGhpcy5lcnJvcl9pZFxuICAgICAgKTtcbiAgICAgIHRoaXMuZXJyb3IucmVmLm5hdGl2ZUVsZW1lbnQuaWQgPSB0aGlzLmVycm9yX2lkO1xuICAgIH1cbiAgfVxufVxuIl19