import { __decorate, __metadata } from "tslib";
import { Component, ContentChild, Input } from '@angular/core';
import * as _ from 'lodash';
import { SprkFieldErrorDirective } from '../../../directives/inputs/sprk-field-error/sprk-field-error.directive';
import { SprkInputDirective } from '../../../directives/inputs/sprk-input/sprk-input.directive';
import { SprkLabelDirective } from '../../../directives/inputs/sprk-label/sprk-label.directive';
let SprkIconInputContainerComponent = class SprkIconInputContainerComponent {
    constructor() {
        /**
         * @ignore
         */
        this.id = _.uniqueId();
        /**
         * @ignore
         */
        this.input_id = `input_${this.id}`;
        /**
         * @ignore
         */
        this.error_id = `error_${this.id}`;
    }
    /**
     * @ignore
     */
    getIconContainerClasses() {
        const classArray = ['sprk-b-InputContainer__icon-container'];
        if (this.iconContainerClasses) {
            this.iconContainerClasses.split(' ').forEach(className => {
                classArray.push(className);
            });
        }
        return classArray.join(' ');
    }
    /**
     * @ignore
     */
    getClasses() {
        const classArray = ['sprk-b-InputContainer'];
        if (this.additionalClasses) {
            this.additionalClasses.split(' ').forEach(className => {
                classArray.push(className);
            });
        }
        return classArray.join(' ');
    }
    ngOnInit() {
        if (this.label && this.input) {
            this.label.ref.nativeElement.setAttribute('for', this.input_id);
            this.input.ref.nativeElement.id = this.input_id;
        }
        if (this.input && this.error) {
            this.input.ref.nativeElement.setAttribute('aria-describedby', this.error_id);
            this.error.ref.nativeElement.id = this.error_id;
        }
    }
};
__decorate([
    Input(),
    __metadata("design:type", String)
], SprkIconInputContainerComponent.prototype, "additionalClasses", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], SprkIconInputContainerComponent.prototype, "iconContainerClasses", void 0);
__decorate([
    ContentChild(SprkLabelDirective, { static: true }),
    __metadata("design:type", SprkLabelDirective)
], SprkIconInputContainerComponent.prototype, "label", void 0);
__decorate([
    ContentChild(SprkInputDirective, { static: true }),
    __metadata("design:type", SprkInputDirective)
], SprkIconInputContainerComponent.prototype, "input", void 0);
__decorate([
    ContentChild(SprkFieldErrorDirective, { static: true }),
    __metadata("design:type", SprkFieldErrorDirective)
], SprkIconInputContainerComponent.prototype, "error", void 0);
SprkIconInputContainerComponent = __decorate([
    Component({
        selector: 'sprk-icon-input-container',
        template: `
    <div [ngClass]="getClasses()">
      <div [ngClass]="getIconContainerClasses()">
        <ng-content select="[sprkLabel]"></ng-content>
        <ng-content select="[sprk-input-icon]"></ng-content>
        <ng-content select="[sprkInput]"></ng-content>
      </div>
      <ng-content select="sprk-selection-item-container"></ng-content>
      <ng-content select="[sprkHelperText]"></ng-content>
      <ng-content select="[sprkFieldError]"></ng-content>
    </div>
  `
    })
], SprkIconInputContainerComponent);
export { SprkIconInputContainerComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3Byay1pY29uLWlucHV0LWNvbnRhaW5lci5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9Ac3BhcmtkZXNpZ25zeXN0ZW0vc3BhcmstYW5ndWxhci8iLCJzb3VyY2VzIjpbImxpYi9jb21wb25lbnRzL2lucHV0cy9zcHJrLWljb24taW5wdXQtY29udGFpbmVyL3NwcmstaWNvbi1pbnB1dC1jb250YWluZXIuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLFlBQVksRUFBRSxLQUFLLEVBQVUsTUFBTSxlQUFlLENBQUM7QUFDdkUsT0FBTyxLQUFLLENBQUMsTUFBTSxRQUFRLENBQUM7QUFDNUIsT0FBTyxFQUFFLHVCQUF1QixFQUFFLE1BQU0sd0VBQXdFLENBQUM7QUFDakgsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sNERBQTRELENBQUM7QUFDaEcsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sNERBQTRELENBQUM7QUFpQmhHLElBQWEsK0JBQStCLEdBQTVDLE1BQWEsK0JBQStCO0lBQTVDO1FBbUNFOztXQUVHO1FBQ0gsT0FBRSxHQUFHLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQztRQUNsQjs7V0FFRztRQUNILGFBQVEsR0FBRyxTQUFTLElBQUksQ0FBQyxFQUFFLEVBQUUsQ0FBQztRQUM5Qjs7V0FFRztRQUNILGFBQVEsR0FBRyxTQUFTLElBQUksQ0FBQyxFQUFFLEVBQUUsQ0FBQztJQTRDaEMsQ0FBQztJQTNDQzs7T0FFRztJQUNILHVCQUF1QjtRQUNyQixNQUFNLFVBQVUsR0FBYSxDQUFDLHVDQUF1QyxDQUFDLENBQUM7UUFFdkUsSUFBSSxJQUFJLENBQUMsb0JBQW9CLEVBQUU7WUFDN0IsSUFBSSxDQUFDLG9CQUFvQixDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLEVBQUU7Z0JBQ3ZELFVBQVUsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7WUFDN0IsQ0FBQyxDQUFDLENBQUM7U0FDSjtRQUVELE9BQU8sVUFBVSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUM5QixDQUFDO0lBRUQ7O09BRUc7SUFDSCxVQUFVO1FBQ1IsTUFBTSxVQUFVLEdBQWEsQ0FBQyx1QkFBdUIsQ0FBQyxDQUFDO1FBRXZELElBQUksSUFBSSxDQUFDLGlCQUFpQixFQUFFO1lBQzFCLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxFQUFFO2dCQUNwRCxVQUFVLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO1lBQzdCLENBQUMsQ0FBQyxDQUFDO1NBQ0o7UUFFRCxPQUFPLFVBQVUsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDOUIsQ0FBQztJQUVELFFBQVE7UUFDTixJQUFJLElBQUksQ0FBQyxLQUFLLElBQUksSUFBSSxDQUFDLEtBQUssRUFBRTtZQUM1QixJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxhQUFhLENBQUMsWUFBWSxDQUFDLEtBQUssRUFBRSxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7WUFDaEUsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsYUFBYSxDQUFDLEVBQUUsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDO1NBQ2pEO1FBQ0QsSUFBSSxJQUFJLENBQUMsS0FBSyxJQUFJLElBQUksQ0FBQyxLQUFLLEVBQUU7WUFDNUIsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsYUFBYSxDQUFDLFlBQVksQ0FDdkMsa0JBQWtCLEVBQ2xCLElBQUksQ0FBQyxRQUFRLENBQ2QsQ0FBQztZQUNGLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLGFBQWEsQ0FBQyxFQUFFLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQztTQUNqRDtJQUNILENBQUM7Q0FDRixDQUFBO0FBbkZDO0lBREMsS0FBSyxFQUFFOzswRUFDa0I7QUFPMUI7SUFEQyxLQUFLLEVBQUU7OzZFQUNxQjtBQU83QjtJQURDLFlBQVksQ0FBQyxrQkFBa0IsRUFBRSxFQUFFLE1BQU0sRUFBRSxJQUFJLEVBQUUsQ0FBQzs4QkFDNUMsa0JBQWtCOzhEQUFDO0FBTTFCO0lBREMsWUFBWSxDQUFDLGtCQUFrQixFQUFFLEVBQUUsTUFBTSxFQUFFLElBQUksRUFBRSxDQUFDOzhCQUM1QyxrQkFBa0I7OERBQUM7QUFNMUI7SUFEQyxZQUFZLENBQUMsdUJBQXVCLEVBQUUsRUFBRSxNQUFNLEVBQUUsSUFBSSxFQUFFLENBQUM7OEJBQ2pELHVCQUF1Qjs4REFBQztBQWpDcEIsK0JBQStCO0lBZjNDLFNBQVMsQ0FBQztRQUNULFFBQVEsRUFBRSwyQkFBMkI7UUFDckMsUUFBUSxFQUFFOzs7Ozs7Ozs7OztHQVdUO0tBQ0YsQ0FBQztHQUNXLCtCQUErQixDQTBGM0M7U0ExRlksK0JBQStCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBDb250ZW50Q2hpbGQsIElucHV0LCBPbkluaXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCAqIGFzIF8gZnJvbSAnbG9kYXNoJztcbmltcG9ydCB7IFNwcmtGaWVsZEVycm9yRGlyZWN0aXZlIH0gZnJvbSAnLi4vLi4vLi4vZGlyZWN0aXZlcy9pbnB1dHMvc3Byay1maWVsZC1lcnJvci9zcHJrLWZpZWxkLWVycm9yLmRpcmVjdGl2ZSc7XG5pbXBvcnQgeyBTcHJrSW5wdXREaXJlY3RpdmUgfSBmcm9tICcuLi8uLi8uLi9kaXJlY3RpdmVzL2lucHV0cy9zcHJrLWlucHV0L3NwcmstaW5wdXQuZGlyZWN0aXZlJztcbmltcG9ydCB7IFNwcmtMYWJlbERpcmVjdGl2ZSB9IGZyb20gJy4uLy4uLy4uL2RpcmVjdGl2ZXMvaW5wdXRzL3NwcmstbGFiZWwvc3Byay1sYWJlbC5kaXJlY3RpdmUnO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdzcHJrLWljb24taW5wdXQtY29udGFpbmVyJyxcbiAgdGVtcGxhdGU6IGBcbiAgICA8ZGl2IFtuZ0NsYXNzXT1cImdldENsYXNzZXMoKVwiPlxuICAgICAgPGRpdiBbbmdDbGFzc109XCJnZXRJY29uQ29udGFpbmVyQ2xhc3NlcygpXCI+XG4gICAgICAgIDxuZy1jb250ZW50IHNlbGVjdD1cIltzcHJrTGFiZWxdXCI+PC9uZy1jb250ZW50PlxuICAgICAgICA8bmctY29udGVudCBzZWxlY3Q9XCJbc3Byay1pbnB1dC1pY29uXVwiPjwvbmctY29udGVudD5cbiAgICAgICAgPG5nLWNvbnRlbnQgc2VsZWN0PVwiW3NwcmtJbnB1dF1cIj48L25nLWNvbnRlbnQ+XG4gICAgICA8L2Rpdj5cbiAgICAgIDxuZy1jb250ZW50IHNlbGVjdD1cInNwcmstc2VsZWN0aW9uLWl0ZW0tY29udGFpbmVyXCI+PC9uZy1jb250ZW50PlxuICAgICAgPG5nLWNvbnRlbnQgc2VsZWN0PVwiW3NwcmtIZWxwZXJUZXh0XVwiPjwvbmctY29udGVudD5cbiAgICAgIDxuZy1jb250ZW50IHNlbGVjdD1cIltzcHJrRmllbGRFcnJvcl1cIj48L25nLWNvbnRlbnQ+XG4gICAgPC9kaXY+XG4gIGBcbn0pXG5leHBvcnQgY2xhc3MgU3Bya0ljb25JbnB1dENvbnRhaW5lckNvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCB7XG4gIC8qKlxuICAgKiBFeHBlY3RzIGEgc3BhY2Ugc2VwYXJhdGVkIHN0cmluZ1xuICAgKiBvZiBjbGFzc2VzIHRvIGJlIGFkZGVkIHRvIHRoZVxuICAgKiBjb21wb25lbnQuXG4gICAqL1xuICBASW5wdXQoKVxuICBhZGRpdGlvbmFsQ2xhc3Nlczogc3RyaW5nO1xuICAvKipcbiAgICogRXhwZWN0cyBhIHNwYWNlIHNlcGFyYXRlZCBzdHJpbmdcbiAgICogb2YgY2xhc3NlcyB0byBiZSBhZGRlZCB0byB0aGVcbiAgICogaWNvbiBjb250YWluZXIuXG4gICAqL1xuICBASW5wdXQoKVxuICBpY29uQ29udGFpbmVyQ2xhc3Nlczogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBUaGlzIGNvbXBvbmVudCBleHBlY3RzIGEgY2hpbGQgbGFiZWwgZWxlbWVudFxuICAgKiB3aXRoIHRoZSBgc3Bya0xhYmVsYCBkaXJlY3RpdmUuXG4gICAqL1xuICBAQ29udGVudENoaWxkKFNwcmtMYWJlbERpcmVjdGl2ZSwgeyBzdGF0aWM6IHRydWUgfSlcbiAgbGFiZWw6IFNwcmtMYWJlbERpcmVjdGl2ZTtcbiAgLyoqXG4gICAqIFRoaXMgY29tcG9uZW50IGV4cGVjdHMgYSBjaGlsZCBpbnB1dCBlbGVtZW50XG4gICAqIHdpdGggdGhlIGBzcHJrSW5wdXRgIGRpcmVjdGl2ZS5cbiAgICovXG4gIEBDb250ZW50Q2hpbGQoU3Bya0lucHV0RGlyZWN0aXZlLCB7IHN0YXRpYzogdHJ1ZSB9KVxuICBpbnB1dDogU3Bya0lucHV0RGlyZWN0aXZlO1xuICAvKipcbiAgICogVGhpcyBjb21wb25lbnQgZXhwZWN0cyBhIGNoaWxkIGVsZW1lbnRcbiAgICogd2l0aCB0aGUgYHNwcmtGaWVsZEVycm9yYCBkaXJlY3RpdmUuXG4gICAqL1xuICBAQ29udGVudENoaWxkKFNwcmtGaWVsZEVycm9yRGlyZWN0aXZlLCB7IHN0YXRpYzogdHJ1ZSB9KVxuICBlcnJvcjogU3Bya0ZpZWxkRXJyb3JEaXJlY3RpdmU7XG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGlkID0gXy51bmlxdWVJZCgpO1xuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgaW5wdXRfaWQgPSBgaW5wdXRfJHt0aGlzLmlkfWA7XG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBlcnJvcl9pZCA9IGBlcnJvcl8ke3RoaXMuaWR9YDtcbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGdldEljb25Db250YWluZXJDbGFzc2VzKCk6IHN0cmluZyB7XG4gICAgY29uc3QgY2xhc3NBcnJheTogc3RyaW5nW10gPSBbJ3NwcmstYi1JbnB1dENvbnRhaW5lcl9faWNvbi1jb250YWluZXInXTtcblxuICAgIGlmICh0aGlzLmljb25Db250YWluZXJDbGFzc2VzKSB7XG4gICAgICB0aGlzLmljb25Db250YWluZXJDbGFzc2VzLnNwbGl0KCcgJykuZm9yRWFjaChjbGFzc05hbWUgPT4ge1xuICAgICAgICBjbGFzc0FycmF5LnB1c2goY2xhc3NOYW1lKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHJldHVybiBjbGFzc0FycmF5LmpvaW4oJyAnKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBnZXRDbGFzc2VzKCk6IHN0cmluZyB7XG4gICAgY29uc3QgY2xhc3NBcnJheTogc3RyaW5nW10gPSBbJ3NwcmstYi1JbnB1dENvbnRhaW5lciddO1xuXG4gICAgaWYgKHRoaXMuYWRkaXRpb25hbENsYXNzZXMpIHtcbiAgICAgIHRoaXMuYWRkaXRpb25hbENsYXNzZXMuc3BsaXQoJyAnKS5mb3JFYWNoKGNsYXNzTmFtZSA9PiB7XG4gICAgICAgIGNsYXNzQXJyYXkucHVzaChjbGFzc05hbWUpO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGNsYXNzQXJyYXkuam9pbignICcpO1xuICB9XG5cbiAgbmdPbkluaXQoKTogdm9pZCB7XG4gICAgaWYgKHRoaXMubGFiZWwgJiYgdGhpcy5pbnB1dCkge1xuICAgICAgdGhpcy5sYWJlbC5yZWYubmF0aXZlRWxlbWVudC5zZXRBdHRyaWJ1dGUoJ2ZvcicsIHRoaXMuaW5wdXRfaWQpO1xuICAgICAgdGhpcy5pbnB1dC5yZWYubmF0aXZlRWxlbWVudC5pZCA9IHRoaXMuaW5wdXRfaWQ7XG4gICAgfVxuICAgIGlmICh0aGlzLmlucHV0ICYmIHRoaXMuZXJyb3IpIHtcbiAgICAgIHRoaXMuaW5wdXQucmVmLm5hdGl2ZUVsZW1lbnQuc2V0QXR0cmlidXRlKFxuICAgICAgICAnYXJpYS1kZXNjcmliZWRieScsXG4gICAgICAgIHRoaXMuZXJyb3JfaWRcbiAgICAgICk7XG4gICAgICB0aGlzLmVycm9yLnJlZi5uYXRpdmVFbGVtZW50LmlkID0gdGhpcy5lcnJvcl9pZDtcbiAgICB9XG4gIH1cbn1cbiJdfQ==