import { __decorate, __metadata } from "tslib";
import { Component, Input } from '@angular/core';
import { toggleAnimations } from './sprk-toggle-animations';
import { uniqueId } from 'lodash';
import 'focus-visible';
let SprkToggleComponent = class SprkToggleComponent {
    constructor() {
        /**
         * The value supplied will be assigned as a CSS class
         * on the clickable title text used in the Toggle.
         * This is intended for overrides.
         */
        this.titleFontClass = 'sprk-b-TypeBodyThree';
        /**
         * A string that is used to set the `id` on the content
         * and the `aria-controls` for the toggle trigger button.
         */
        this.contentId = uniqueId(`sprk_toggle_content_`);
        /**
         * @ignore
         */
        this.isOpen = false;
        /**
         * @ignore
         */
        this.iconStateClass = '';
        /**
         * @ignore
         */
        this.animState = 'closed';
    }
    /**
     * @ignore
     */
    toggleState() {
        this.isOpen === false
            ? (this.animState = 'closed')
            : (this.animState = 'open');
        this.isOpen === false
            ? (this.iconStateClass = '')
            : (this.iconStateClass = 'sprk-c-Icon--open');
    }
    /**
     * @ignore
     */
    toggle(event) {
        event.preventDefault();
        this.isOpen = !this.isOpen;
        this.toggleState();
    }
    /**
     * @ignore
     */
    getClasses() {
        const classArray = [
            'sprk-c-Toggle__trigger sprk-u-TextCrop--none',
            this.titleFontClass,
        ];
        return classArray.join(' ');
    }
    ngAfterViewInit() {
        this.toggleState();
    }
};
__decorate([
    Input(),
    __metadata("design:type", String)
], SprkToggleComponent.prototype, "analyticsString", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], SprkToggleComponent.prototype, "additionalClasses", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], SprkToggleComponent.prototype, "title", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], SprkToggleComponent.prototype, "iconClass", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], SprkToggleComponent.prototype, "titleFontClass", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], SprkToggleComponent.prototype, "idString", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], SprkToggleComponent.prototype, "contentId", void 0);
SprkToggleComponent = __decorate([
    Component({
        selector: 'sprk-toggle',
        template: `
    <div
      class="sprk-c-Toggle {{ additionalClasses }}"
      [attr.data-id]="idString"
    >
      <button
        variant="icon"
        [ngClass]="getClasses()"
        (click)="toggle($event)"
        [attr.aria-expanded]="isOpen ? 'true' : 'false'"
        [attr.data-analytics]="analyticsString"
        [attr.aria-controls]="contentId"
      >
        <sprk-icon
          iconType="chevron-down-circle-two-color"
          additionalClasses="{{
            iconClass
          }} sprk-c-Icon--l sprk-u-mrs sprk-c-Icon--toggle {{ iconStateClass }}"
        ></sprk-icon>
        {{ title }}
      </button>

      <div
        [@toggleContent]="animState"
        [id]="contentId"
      >
        <div class="sprk-u-pts sprk-u-pbs sprk-c-Toggle__content">
          <ng-content></ng-content>
        </div>
      </div>
    </div>
  `,
        animations: [toggleAnimations.toggleContent]
    })
], SprkToggleComponent);
export { SprkToggleComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3Byay10b2dnbGUuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHNwYXJrZGVzaWduc3lzdGVtL3NwYXJrLWFuZ3VsYXIvIiwic291cmNlcyI6WyJsaWIvY29tcG9uZW50cy9zcHJrLXRvZ2dsZS9zcHJrLXRvZ2dsZS5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFpQixNQUFNLGVBQWUsQ0FBQztBQUNoRSxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQztBQUM1RCxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sUUFBUSxDQUFDO0FBQ2xDLE9BQU8sZUFBZSxDQUFDO0FBc0N2QixJQUFhLG1CQUFtQixHQUFoQyxNQUFhLG1CQUFtQjtJQUFoQztRQThCRTs7OztXQUlHO1FBRUgsbUJBQWMsR0FBRyxzQkFBc0IsQ0FBQztRQVd4Qzs7O1dBR0c7UUFFSCxjQUFTLEdBQUcsUUFBUSxDQUFDLHNCQUFzQixDQUFDLENBQUM7UUFFN0M7O1dBRUc7UUFDSSxXQUFNLEdBQUcsS0FBSyxDQUFDO1FBQ3RCOztXQUVHO1FBQ0ksbUJBQWMsR0FBRyxFQUFFLENBQUM7UUFDM0I7O1dBRUc7UUFDSSxjQUFTLEdBQUcsUUFBUSxDQUFDO0lBc0M5QixDQUFDO0lBcENDOztPQUVHO0lBQ0gsV0FBVztRQUNULElBQUksQ0FBQyxNQUFNLEtBQUssS0FBSztZQUNuQixDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsU0FBUyxHQUFHLFFBQVEsQ0FBQztZQUM3QixDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsU0FBUyxHQUFHLE1BQU0sQ0FBQyxDQUFDO1FBRTlCLElBQUksQ0FBQyxNQUFNLEtBQUssS0FBSztZQUNuQixDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsY0FBYyxHQUFHLEVBQUUsQ0FBQztZQUM1QixDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsY0FBYyxHQUFHLG1CQUFtQixDQUFDLENBQUM7SUFDbEQsQ0FBQztJQUVEOztPQUVHO0lBQ0gsTUFBTSxDQUFDLEtBQUs7UUFDVixLQUFLLENBQUMsY0FBYyxFQUFFLENBQUM7UUFDdkIsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUM7UUFDM0IsSUFBSSxDQUFDLFdBQVcsRUFBRSxDQUFDO0lBQ3JCLENBQUM7SUFFRDs7T0FFRztJQUNILFVBQVU7UUFDUixNQUFNLFVBQVUsR0FBYTtZQUMzQiw4Q0FBOEM7WUFDOUMsSUFBSSxDQUFDLGNBQWM7U0FDcEIsQ0FBQztRQUNGLE9BQU8sVUFBVSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUM5QixDQUFDO0lBRUQsZUFBZTtRQUNiLElBQUksQ0FBQyxXQUFXLEVBQUUsQ0FBQztJQUNyQixDQUFDO0NBQ0YsQ0FBQTtBQTlGQztJQURDLEtBQUssRUFBRTs7NERBQ2dCO0FBT3hCO0lBREMsS0FBSyxFQUFFOzs4REFDa0I7QUFNMUI7SUFEQyxLQUFLLEVBQUU7O2tEQUNNO0FBT2Q7SUFEQyxLQUFLLEVBQUU7O3NEQUNVO0FBT2xCO0lBREMsS0FBSyxFQUFFOzsyREFDZ0M7QUFVeEM7SUFEQyxLQUFLLEVBQUU7O3FEQUNTO0FBTWpCO0lBREMsS0FBSyxFQUFFOztzREFDcUM7QUFwRGxDLG1CQUFtQjtJQXBDL0IsU0FBUyxDQUFDO1FBQ1QsUUFBUSxFQUFFLGFBQWE7UUFDdkIsUUFBUSxFQUFFOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0dBK0JUO1FBQ0QsVUFBVSxFQUFFLENBQUMsZ0JBQWdCLENBQUMsYUFBYSxDQUFDO0tBQzdDLENBQUM7R0FDVyxtQkFBbUIsQ0F1Ry9CO1NBdkdZLG1CQUFtQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgSW5wdXQsIEFmdGVyVmlld0luaXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IHRvZ2dsZUFuaW1hdGlvbnMgfSBmcm9tICcuL3NwcmstdG9nZ2xlLWFuaW1hdGlvbnMnO1xuaW1wb3J0IHsgdW5pcXVlSWQgfSBmcm9tICdsb2Rhc2gnO1xuaW1wb3J0ICdmb2N1cy12aXNpYmxlJztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnc3Byay10b2dnbGUnLFxuICB0ZW1wbGF0ZTogYFxuICAgIDxkaXZcbiAgICAgIGNsYXNzPVwic3Byay1jLVRvZ2dsZSB7eyBhZGRpdGlvbmFsQ2xhc3NlcyB9fVwiXG4gICAgICBbYXR0ci5kYXRhLWlkXT1cImlkU3RyaW5nXCJcbiAgICA+XG4gICAgICA8YnV0dG9uXG4gICAgICAgIHZhcmlhbnQ9XCJpY29uXCJcbiAgICAgICAgW25nQ2xhc3NdPVwiZ2V0Q2xhc3NlcygpXCJcbiAgICAgICAgKGNsaWNrKT1cInRvZ2dsZSgkZXZlbnQpXCJcbiAgICAgICAgW2F0dHIuYXJpYS1leHBhbmRlZF09XCJpc09wZW4gPyAndHJ1ZScgOiAnZmFsc2UnXCJcbiAgICAgICAgW2F0dHIuZGF0YS1hbmFseXRpY3NdPVwiYW5hbHl0aWNzU3RyaW5nXCJcbiAgICAgICAgW2F0dHIuYXJpYS1jb250cm9sc109XCJjb250ZW50SWRcIlxuICAgICAgPlxuICAgICAgICA8c3Byay1pY29uXG4gICAgICAgICAgaWNvblR5cGU9XCJjaGV2cm9uLWRvd24tY2lyY2xlLXR3by1jb2xvclwiXG4gICAgICAgICAgYWRkaXRpb25hbENsYXNzZXM9XCJ7e1xuICAgICAgICAgICAgaWNvbkNsYXNzXG4gICAgICAgICAgfX0gc3Byay1jLUljb24tLWwgc3Byay11LW1ycyBzcHJrLWMtSWNvbi0tdG9nZ2xlIHt7IGljb25TdGF0ZUNsYXNzIH19XCJcbiAgICAgICAgPjwvc3Byay1pY29uPlxuICAgICAgICB7eyB0aXRsZSB9fVxuICAgICAgPC9idXR0b24+XG5cbiAgICAgIDxkaXZcbiAgICAgICAgW0B0b2dnbGVDb250ZW50XT1cImFuaW1TdGF0ZVwiXG4gICAgICAgIFtpZF09XCJjb250ZW50SWRcIlxuICAgICAgPlxuICAgICAgICA8ZGl2IGNsYXNzPVwic3Byay11LXB0cyBzcHJrLXUtcGJzIHNwcmstYy1Ub2dnbGVfX2NvbnRlbnRcIj5cbiAgICAgICAgICA8bmctY29udGVudD48L25nLWNvbnRlbnQ+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgPC9kaXY+XG4gIGAsXG4gIGFuaW1hdGlvbnM6IFt0b2dnbGVBbmltYXRpb25zLnRvZ2dsZUNvbnRlbnRdXG59KVxuZXhwb3J0IGNsYXNzIFNwcmtUb2dnbGVDb21wb25lbnQgaW1wbGVtZW50cyBBZnRlclZpZXdJbml0IHtcblxuICAvKipcbiAgICogVGhlIHZhbHVlIHN1cHBsaWVkIHdpbGwgYmUgYXNzaWduZWQgdG8gdGhlXG4gICAqIGBkYXRhLWFuYWx5dGljc2AgYXR0cmlidXRlIG9uIHRoZSBjb21wb25lbnQuXG4gICAqIEludGVuZGVkIGZvciBhbiBvdXRzaWRlXG4gICAqIGxpYnJhcnkgdG8gY2FwdHVyZSBkYXRhLlxuICAgKi9cbiAgQElucHV0KClcbiAgYW5hbHl0aWNzU3RyaW5nOiBzdHJpbmc7XG4gIC8qKlxuICAgKiBFeHBlY3RzIGEgc3BhY2Ugc2VwYXJhdGVkIHN0cmluZ1xuICAgKiBvZiBjbGFzc2VzIHRvIGJlIGFkZGVkIHRvIHRoZVxuICAgKiBjb21wb25lbnQuXG4gICAqL1xuICBASW5wdXQoKVxuICBhZGRpdGlvbmFsQ2xhc3Nlczogc3RyaW5nO1xuICAvKipcbiAgICogVGhlIHZhbHVlIHN1cHBsaWVkIHdpbGwgYmVcbiAgICogcmVuZGVyZWQgYXMgdGhlIG1haW4gVG9nZ2xlIGxpbmsgdGV4dC5cbiAgICovXG4gIEBJbnB1dCgpXG4gIHRpdGxlOiBzdHJpbmc7XG4gIC8qKlxuICAgKiBUaGUgdmFsdWUgc3VwcGxpZWQgd2lsbCBiZSBhc3NpZ25lZCBhcyBhXG4gICAqIENTUyBjbGFzcyBvbiB0aGUgaWNvbiB1c2VkIGluIHRoZSBUb2dnbGUuXG4gICAqIFRoaXMgaXMgaW50ZW5kZWQgZm9yIG92ZXJyaWRlcy5cbiAgICovXG4gIEBJbnB1dCgpXG4gIGljb25DbGFzczogc3RyaW5nO1xuICAvKipcbiAgICogVGhlIHZhbHVlIHN1cHBsaWVkIHdpbGwgYmUgYXNzaWduZWQgYXMgYSBDU1MgY2xhc3NcbiAgICogb24gdGhlIGNsaWNrYWJsZSB0aXRsZSB0ZXh0IHVzZWQgaW4gdGhlIFRvZ2dsZS5cbiAgICogVGhpcyBpcyBpbnRlbmRlZCBmb3Igb3ZlcnJpZGVzLlxuICAgKi9cbiAgQElucHV0KClcbiAgdGl0bGVGb250Q2xhc3MgPSAnc3Byay1iLVR5cGVCb2R5VGhyZWUnO1xuICAvKipcbiAgICogVGhlIHZhbHVlIHN1cHBsaWVkIHdpbGwgYmUgYXNzaWduZWRcbiAgICogdG8gdGhlIGBkYXRhLWlkYCBhdHRyaWJ1dGUgb24gdGhlXG4gICAqIGNvbXBvbmVudC4gVGhpcyBpcyBpbnRlbmRlZCB0byBiZVxuICAgKiB1c2VkIGFzIGEgc2VsZWN0b3IgZm9yIGF1dG9tYXRlZFxuICAgKiB0b29scy4gVGhpcyB2YWx1ZSBzaG91bGQgYmUgdW5pcXVlXG4gICAqIHBlciBwYWdlLlxuICAgKi9cbiAgQElucHV0KClcbiAgaWRTdHJpbmc6IHN0cmluZztcbiAgLyoqXG4gICAqIEEgc3RyaW5nIHRoYXQgaXMgdXNlZCB0byBzZXQgdGhlIGBpZGAgb24gdGhlIGNvbnRlbnRcbiAgICogYW5kIHRoZSBgYXJpYS1jb250cm9sc2AgZm9yIHRoZSB0b2dnbGUgdHJpZ2dlciBidXR0b24uXG4gICAqL1xuICBASW5wdXQoKVxuICBjb250ZW50SWQgPSB1bmlxdWVJZChgc3Bya190b2dnbGVfY29udGVudF9gKTtcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgcHVibGljIGlzT3BlbiA9IGZhbHNlO1xuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgcHVibGljIGljb25TdGF0ZUNsYXNzID0gJyc7XG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBwdWJsaWMgYW5pbVN0YXRlID0gJ2Nsb3NlZCc7XG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIHRvZ2dsZVN0YXRlKCk6IHZvaWQge1xuICAgIHRoaXMuaXNPcGVuID09PSBmYWxzZVxuICAgICAgPyAodGhpcy5hbmltU3RhdGUgPSAnY2xvc2VkJylcbiAgICAgIDogKHRoaXMuYW5pbVN0YXRlID0gJ29wZW4nKTtcblxuICAgIHRoaXMuaXNPcGVuID09PSBmYWxzZVxuICAgICAgPyAodGhpcy5pY29uU3RhdGVDbGFzcyA9ICcnKVxuICAgICAgOiAodGhpcy5pY29uU3RhdGVDbGFzcyA9ICdzcHJrLWMtSWNvbi0tb3BlbicpO1xuICB9XG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIHRvZ2dsZShldmVudCk6IHZvaWQge1xuICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgdGhpcy5pc09wZW4gPSAhdGhpcy5pc09wZW47XG4gICAgdGhpcy50b2dnbGVTdGF0ZSgpO1xuICB9XG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGdldENsYXNzZXMoKTogc3RyaW5nIHtcbiAgICBjb25zdCBjbGFzc0FycmF5OiBzdHJpbmdbXSA9IFtcbiAgICAgICdzcHJrLWMtVG9nZ2xlX190cmlnZ2VyIHNwcmstdS1UZXh0Q3JvcC0tbm9uZScsXG4gICAgICB0aGlzLnRpdGxlRm9udENsYXNzLFxuICAgIF07XG4gICAgcmV0dXJuIGNsYXNzQXJyYXkuam9pbignICcpO1xuICB9XG5cbiAgbmdBZnRlclZpZXdJbml0KCkge1xuICAgIHRoaXMudG9nZ2xlU3RhdGUoKTtcbiAgfVxufVxuIl19