import { __decorate, __metadata } from "tslib";
import { Component, Input } from '@angular/core';
import { Router } from '@angular/router';
let SprkLinkComponent = 
/**
 * @deprecate This component will be removed in
 * a future release in favor of the `sprkLink` directive.
 * Please use the Spark Link
 * directive.
 */
class SprkLinkComponent {
    /**
     * @ignore
     */
    constructor(router) {
        this.router = router;
        /**
         * By default, the component determines if
         * the `href` is an external or internal link
         * by looking for the `:` character in the
         * `href` string. If external link functionality
         * is desired with an `href` value that contains
         * a `:` set this input to true. This overrides
         * the default and avoids using the Angular Router.
         */
        this.isExternal = false;
    }
    ngOnInit() {
        // This message is split up like this so that we can keep the line
        // length down in the editor while also logging a single unformatted
        // line of text in the console.
        const message = 'Spark Design System Warning: Spark Link has been ' +
            'refactored to be an Angular Directive. The old Angular Component ' +
            'version has been deprecated. This version will be permanently removed ' +
            'from Spark in our Summer 2020 release. To update to the new version, ' +
            'replace any instance of the <sprk-link> component in your codebase with ' +
            'the new Directive syntax.';
        console.warn(message);
        // Sets the default href if none provided
        if (this.href === '' || this.href === null || this.href === undefined) {
            this.href = '#';
            return;
        }
        // Build jump link's href
        if (this.isJumpLink(this.href)) {
            this.href = `${this.getPathWithoutHash(this.router.url)}${this.href}`;
        }
    }
    /**
     * @ignore
     */
    isExternalLink(value) {
        return new RegExp('^.*:', 'i').test(value);
    }
    /**
     * @ignore
     */
    isJumpLinkWithPage(value) {
        return new RegExp('^.*#.+', 'i').test(value);
    }
    /**
     * @ignore
     */
    isJumpLink(value) {
        return new RegExp('^#.+', 'i').test(value);
    }
    /**
     * @ignore
     */
    isNoActionLink(value) {
        return value === '#';
    }
    /**
     * @ignore
     */
    getPathWithoutHash(value) {
        return value.split('#')[0];
    }
    /**
     * @ignore
     */
    scrollToId() {
        const elementID = this.href.split('#').pop();
        const element = document.getElementById(elementID);
        if (element) {
            element.scrollIntoView();
        }
    }
    /**
     * @ignore
     */
    handleClick(event) {
        // Let browser handle route if external Link
        if (this.isExternalLink(this.href) || this.isExternal) {
            return;
        }
        event.preventDefault();
        // Prevent default and return
        if (this.isNoActionLink(this.href)) {
            return;
        }
        else if (this.isJumpLinkWithPage(this.href)) {
            if (this.getPathWithoutHash(this.href) ===
                this.getPathWithoutHash(this.router.url)) {
                this.scrollToId();
            }
            else {
                this.router.navigateByUrl(this.href);
            }
        }
        else {
            this.router.navigateByUrl(this.href);
        }
    }
    /**
     * @ignore
     */
    getClasses() {
        const classArray = [];
        switch (this.linkType) {
            case 'unstyled':
                break;
            case 'simple':
                classArray.push('sprk-b-Link sprk-b-Link--simple');
                break;
            case 'plain':
                classArray.push('sprk-b-Link sprk-b-Link--plain');
                break;
            case 'icon':
                classArray.push('sprk-b-Link sprk-b-Link--simple sprk-b-Link--has-icon');
                break;
            default:
                classArray.push('sprk-b-Link');
                break;
        }
        if (this.isDisabled) {
            classArray.push('sprk-b-Link--disabled');
        }
        if (this.additionalClasses) {
            this.additionalClasses.split(' ').forEach(className => {
                classArray.push(className);
            });
        }
        return classArray.join(' ');
    }
};
SprkLinkComponent.ctorParameters = () => [
    { type: Router }
];
__decorate([
    Input(),
    __metadata("design:type", String)
], SprkLinkComponent.prototype, "linkType", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], SprkLinkComponent.prototype, "href", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], SprkLinkComponent.prototype, "idString", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], SprkLinkComponent.prototype, "role", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], SprkLinkComponent.prototype, "id", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], SprkLinkComponent.prototype, "ariaControls", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], SprkLinkComponent.prototype, "ariaLabelledby", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], SprkLinkComponent.prototype, "ariaSelected", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], SprkLinkComponent.prototype, "ariaHidden", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], SprkLinkComponent.prototype, "ariaCurrent", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], SprkLinkComponent.prototype, "ariaExpanded", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], SprkLinkComponent.prototype, "ariaHasPopUp", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], SprkLinkComponent.prototype, "ariaLabel", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], SprkLinkComponent.prototype, "analyticsString", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], SprkLinkComponent.prototype, "target", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], SprkLinkComponent.prototype, "additionalClasses", void 0);
__decorate([
    Input(),
    __metadata("design:type", Boolean)
], SprkLinkComponent.prototype, "isDisabled", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], SprkLinkComponent.prototype, "isExternal", void 0);
SprkLinkComponent = __decorate([
    Component({
        selector: 'sprk-link',
        template: `
    <a
      (click)="handleClick($event)"
      [ngClass]="getClasses()"
      [href]="href"
      [attr.data-analytics]="analyticsString"
      [attr.target]="target"
      [attr.data-id]="idString"
      [attr.disabled]="isDisabled"
      [attr.aria-controls]="ariaControls"
      [attr.aria-label]="ariaLabel"
      [attr.aria-labelledby]="ariaLabelledby"
      [attr.aria-haspopup]="ariaHasPopUp"
      [attr.role]="role"
      [attr.id]="id"
      [attr.aria-current]="ariaCurrent"
      [attr.aria-expanded]="ariaExpanded"
      [attr.aria-hidden]="ariaHidden"
      [attr.aria-selected]="ariaSelected"
    >
      <ng-content></ng-content>
    </a>
  `
    })
    /**
     * @deprecate This component will be removed in
     * a future release in favor of the `sprkLink` directive.
     * Please use the Spark Link
     * directive.
     */
    ,
    __metadata("design:paramtypes", [Router])
], SprkLinkComponent);
export { SprkLinkComponent };
//# sourceMappingURL=data:application/json;base64,