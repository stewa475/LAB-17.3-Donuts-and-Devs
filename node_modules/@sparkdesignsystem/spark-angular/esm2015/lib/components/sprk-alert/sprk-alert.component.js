import { __decorate, __metadata } from "tslib";
import { Component, Input } from '@angular/core';
let SprkAlertComponent = class SprkAlertComponent {
    constructor() {
        /**
         * @ignore
         */
        this.visible = true;
    }
    /**
     * @ignore
     */
    getClassesAlertContainer() {
        const alertClassArray = ['sprk-c-Alert'];
        switch (this.alertType) {
            case 'success':
                alertClassArray.push('sprk-c-Alert--success');
                this.icon = 'check-mark';
                break;
            case 'info':
                alertClassArray.push('sprk-c-Alert--info');
                this.icon = 'bell';
                break;
            case 'fail':
                alertClassArray.push('sprk-c-Alert--fail');
                this.icon = 'exclamation';
                break;
            default:
                break;
        }
        if (this.additionalClasses) {
            this.additionalClasses.split(' ').forEach(className => {
                alertClassArray.push(className);
            });
        }
        return alertClassArray.join(' ');
    }
    /**
     * When the dismiss button is clicked
     * this method sets the visable state to `false`
     * and hides the Alert component.
     */
    alertDismiss(event) {
        this.visible = false;
    }
};
__decorate([
    Input(),
    __metadata("design:type", String)
], SprkAlertComponent.prototype, "alertType", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], SprkAlertComponent.prototype, "analyticsString", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], SprkAlertComponent.prototype, "idString", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], SprkAlertComponent.prototype, "additionalClasses", void 0);
__decorate([
    Input(),
    __metadata("design:type", Boolean)
], SprkAlertComponent.prototype, "dismissible", void 0);
SprkAlertComponent = __decorate([
    Component({
        selector: 'sprk-alert',
        template: `
    <div
      *ngIf="visible"
      [ngClass]="getClassesAlertContainer()"
      role="alert"
      [attr.data-analytics]="analyticsString"
      [attr.data-id]="idString"
    >
      <div class="sprk-c-Alert__content">
        <sprk-icon
          iconType="{{ icon }}"
          additionalClasses="sprk-c-Alert__icon sprk-c-Icon--l sprk-c-Icon--stroke-current-color"
          aria-hidden="true"
        ></sprk-icon>

        <p class="sprk-c-Alert__text"><ng-content></ng-content></p>
      </div>

      <button
        *ngIf="dismissible !== false"
        class="sprk-c-Alert__icon sprk-c-Alert__icon--dismiss"
        type="button"
        title="Dismiss"
        (click)="alertDismiss($event)"
      >
        <sprk-icon
          iconType="close"
          additionalClasses="sprk-c-Icon--stroke-current-color"
          aria-hidden="true"
        ></sprk-icon>
      </button>
    </div>
  `
    })
], SprkAlertComponent);
export { SprkAlertComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3Byay1hbGVydC5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9Ac3BhcmtkZXNpZ25zeXN0ZW0vc3BhcmstYW5ndWxhci8iLCJzb3VyY2VzIjpbImxpYi9jb21wb25lbnRzL3NwcmstYWxlcnQvc3Byay1hbGVydC5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBc0NqRCxJQUFhLGtCQUFrQixHQUEvQixNQUFhLGtCQUFrQjtJQUEvQjtRQTZDRTs7V0FFRztRQUNJLFlBQU8sR0FBRyxJQUFJLENBQUM7SUEwQ3hCLENBQUM7SUF4Q0M7O09BRUc7SUFDSCx3QkFBd0I7UUFDdEIsTUFBTSxlQUFlLEdBQWEsQ0FBQyxjQUFjLENBQUMsQ0FBQztRQUVuRCxRQUFRLElBQUksQ0FBQyxTQUFTLEVBQUU7WUFDdEIsS0FBSyxTQUFTO2dCQUNaLGVBQWUsQ0FBQyxJQUFJLENBQUMsdUJBQXVCLENBQUMsQ0FBQztnQkFDOUMsSUFBSSxDQUFDLElBQUksR0FBRyxZQUFZLENBQUM7Z0JBQ3pCLE1BQU07WUFDUixLQUFLLE1BQU07Z0JBQ1QsZUFBZSxDQUFDLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDO2dCQUMzQyxJQUFJLENBQUMsSUFBSSxHQUFHLE1BQU0sQ0FBQztnQkFDbkIsTUFBTTtZQUNSLEtBQUssTUFBTTtnQkFDVCxlQUFlLENBQUMsSUFBSSxDQUFDLG9CQUFvQixDQUFDLENBQUM7Z0JBQzNDLElBQUksQ0FBQyxJQUFJLEdBQUcsYUFBYSxDQUFDO2dCQUMxQixNQUFNO1lBQ1I7Z0JBQ0UsTUFBTTtTQUNUO1FBRUQsSUFBSSxJQUFJLENBQUMsaUJBQWlCLEVBQUU7WUFDMUIsSUFBSSxDQUFDLGlCQUFpQixDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLEVBQUU7Z0JBQ3BELGVBQWUsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7WUFDbEMsQ0FBQyxDQUFDLENBQUM7U0FDSjtRQUVELE9BQU8sZUFBZSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUNuQyxDQUFDO0lBRUQ7Ozs7T0FJRztJQUNILFlBQVksQ0FBQyxLQUFLO1FBQ2hCLElBQUksQ0FBQyxPQUFPLEdBQUcsS0FBSyxDQUFDO0lBQ3ZCLENBQUM7Q0FDRixDQUFBO0FBcEZDO0lBREMsS0FBSyxFQUFFOztxREFDVTtBQVFsQjtJQURDLEtBQUssRUFBRTs7MkRBQ2dCO0FBVXhCO0lBREMsS0FBSyxFQUFFOztvREFDUztBQU9qQjtJQURDLEtBQUssRUFBRTs7NkRBQ2tCO0FBUTFCO0lBREMsS0FBSyxFQUFFOzt1REFDYTtBQXZDVixrQkFBa0I7SUFwQzlCLFNBQVMsQ0FBQztRQUNULFFBQVEsRUFBRSxZQUFZO1FBQ3RCLFFBQVEsRUFBRTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7R0FnQ1Q7S0FDRixDQUFDO0dBQ1csa0JBQWtCLENBMEY5QjtTQTFGWSxrQkFBa0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIElucHV0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ3NwcmstYWxlcnQnLFxuICB0ZW1wbGF0ZTogYFxuICAgIDxkaXZcbiAgICAgICpuZ0lmPVwidmlzaWJsZVwiXG4gICAgICBbbmdDbGFzc109XCJnZXRDbGFzc2VzQWxlcnRDb250YWluZXIoKVwiXG4gICAgICByb2xlPVwiYWxlcnRcIlxuICAgICAgW2F0dHIuZGF0YS1hbmFseXRpY3NdPVwiYW5hbHl0aWNzU3RyaW5nXCJcbiAgICAgIFthdHRyLmRhdGEtaWRdPVwiaWRTdHJpbmdcIlxuICAgID5cbiAgICAgIDxkaXYgY2xhc3M9XCJzcHJrLWMtQWxlcnRfX2NvbnRlbnRcIj5cbiAgICAgICAgPHNwcmstaWNvblxuICAgICAgICAgIGljb25UeXBlPVwie3sgaWNvbiB9fVwiXG4gICAgICAgICAgYWRkaXRpb25hbENsYXNzZXM9XCJzcHJrLWMtQWxlcnRfX2ljb24gc3Byay1jLUljb24tLWwgc3Byay1jLUljb24tLXN0cm9rZS1jdXJyZW50LWNvbG9yXCJcbiAgICAgICAgICBhcmlhLWhpZGRlbj1cInRydWVcIlxuICAgICAgICA+PC9zcHJrLWljb24+XG5cbiAgICAgICAgPHAgY2xhc3M9XCJzcHJrLWMtQWxlcnRfX3RleHRcIj48bmctY29udGVudD48L25nLWNvbnRlbnQ+PC9wPlxuICAgICAgPC9kaXY+XG5cbiAgICAgIDxidXR0b25cbiAgICAgICAgKm5nSWY9XCJkaXNtaXNzaWJsZSAhPT0gZmFsc2VcIlxuICAgICAgICBjbGFzcz1cInNwcmstYy1BbGVydF9faWNvbiBzcHJrLWMtQWxlcnRfX2ljb24tLWRpc21pc3NcIlxuICAgICAgICB0eXBlPVwiYnV0dG9uXCJcbiAgICAgICAgdGl0bGU9XCJEaXNtaXNzXCJcbiAgICAgICAgKGNsaWNrKT1cImFsZXJ0RGlzbWlzcygkZXZlbnQpXCJcbiAgICAgID5cbiAgICAgICAgPHNwcmstaWNvblxuICAgICAgICAgIGljb25UeXBlPVwiY2xvc2VcIlxuICAgICAgICAgIGFkZGl0aW9uYWxDbGFzc2VzPVwic3Byay1jLUljb24tLXN0cm9rZS1jdXJyZW50LWNvbG9yXCJcbiAgICAgICAgICBhcmlhLWhpZGRlbj1cInRydWVcIlxuICAgICAgICA+PC9zcHJrLWljb24+XG4gICAgICA8L2J1dHRvbj5cbiAgICA8L2Rpdj5cbiAgYFxufSlcbmV4cG9ydCBjbGFzcyBTcHJrQWxlcnRDb21wb25lbnQge1xuICAvKipcbiAgICogVGhlIHR5cGUgb2YgQWxlcnQgdmFyaWFudCB0byByZW5kZXIuXG4gICAqIFx0Q2FuIGJlIGBpbmZvYCwgYGZhaWxgLCBvciBgc3VjY2Vzc2AuXG4gICAqL1xuICBASW5wdXQoKVxuICBhbGVydFR5cGU6IHN0cmluZztcbiAgLyoqXG4gICAqIFRoZSB2YWx1ZSBzdXBwbGllZCB3aWxsIGJlIGFzc2lnbmVkIHRvIHRoZVxuICAgKiBgZGF0YS1hbmFseXRpY3NgIGF0dHJpYnV0ZSBvbiB0aGUgY29tcG9uZW50LlxuICAgKiBJbnRlbmRlZCBmb3IgYW4gb3V0c2lkZVxuICAgKiBsaWJyYXJ5IHRvIGNhcHR1cmUgZGF0YS5cbiAgICovXG4gIEBJbnB1dCgpXG4gIGFuYWx5dGljc1N0cmluZzogc3RyaW5nO1xuICAvKipcbiAgICogVGhlIHZhbHVlIHN1cHBsaWVkIHdpbGwgYmUgYXNzaWduZWRcbiAgICogdG8gdGhlIGBkYXRhLWlkYCBhdHRyaWJ1dGUgb24gdGhlXG4gICAqIGNvbXBvbmVudC4gVGhpcyBpcyBpbnRlbmRlZCB0byBiZVxuICAgKiB1c2VkIGFzIGEgc2VsZWN0b3IgZm9yIGF1dG9tYXRlZFxuICAgKiB0b29scy4gVGhpcyB2YWx1ZSBzaG91bGQgYmUgdW5pcXVlXG4gICAqIHBlciBwYWdlLlxuICAgKi9cbiAgQElucHV0KClcbiAgaWRTdHJpbmc6IHN0cmluZztcbiAgLyoqXG4gICAqIEV4cGVjdHMgYSBzcGFjZSBzZXBhcmF0ZWQgc3RyaW5nXG4gICAqIG9mIGNsYXNzZXMgdG8gYmUgYWRkZWQgdG8gdGhlXG4gICAqIGNvbXBvbmVudC5cbiAgICovXG4gIEBJbnB1dCgpXG4gIGFkZGl0aW9uYWxDbGFzc2VzOiBzdHJpbmc7XG4gIC8qKlxuICAgKiBJZiBgZmFsc2VgLCB0aGUgZGlzbWlzcyBidXR0b24gd2lsbCBub3QgYmUgcmVuZGVyZWQgYW5kXG4gICAqIHRoZSBBbGVydCB3aWxsIG5vdCBkaXNtaXNzaWJsZS5cbiAgICogSWYgYHRydWVgLCB0aGUgZGlzbWlzcyBidXR0b24gd2lsbCBiZSByZW5kZXJlZCBhbmRcbiAgICogdGhlIEFsZXJ0IHdpbGwgYmUgZGlzbWlzc2libGUuXG4gICAqL1xuICBASW5wdXQoKVxuICBkaXNtaXNzaWJsZTogYm9vbGVhbjtcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgcHVibGljIGljb246IHN0cmluZztcbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIHB1YmxpYyB2aXNpYmxlID0gdHJ1ZTtcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgZ2V0Q2xhc3Nlc0FsZXJ0Q29udGFpbmVyKCk6IHN0cmluZyB7XG4gICAgY29uc3QgYWxlcnRDbGFzc0FycmF5OiBzdHJpbmdbXSA9IFsnc3Byay1jLUFsZXJ0J107XG5cbiAgICBzd2l0Y2ggKHRoaXMuYWxlcnRUeXBlKSB7XG4gICAgICBjYXNlICdzdWNjZXNzJzpcbiAgICAgICAgYWxlcnRDbGFzc0FycmF5LnB1c2goJ3NwcmstYy1BbGVydC0tc3VjY2VzcycpO1xuICAgICAgICB0aGlzLmljb24gPSAnY2hlY2stbWFyayc7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAnaW5mbyc6XG4gICAgICAgIGFsZXJ0Q2xhc3NBcnJheS5wdXNoKCdzcHJrLWMtQWxlcnQtLWluZm8nKTtcbiAgICAgICAgdGhpcy5pY29uID0gJ2JlbGwnO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ2ZhaWwnOlxuICAgICAgICBhbGVydENsYXNzQXJyYXkucHVzaCgnc3Byay1jLUFsZXJ0LS1mYWlsJyk7XG4gICAgICAgIHRoaXMuaWNvbiA9ICdleGNsYW1hdGlvbic7XG4gICAgICAgIGJyZWFrO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgYnJlYWs7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuYWRkaXRpb25hbENsYXNzZXMpIHtcbiAgICAgIHRoaXMuYWRkaXRpb25hbENsYXNzZXMuc3BsaXQoJyAnKS5mb3JFYWNoKGNsYXNzTmFtZSA9PiB7XG4gICAgICAgIGFsZXJ0Q2xhc3NBcnJheS5wdXNoKGNsYXNzTmFtZSk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gYWxlcnRDbGFzc0FycmF5LmpvaW4oJyAnKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBXaGVuIHRoZSBkaXNtaXNzIGJ1dHRvbiBpcyBjbGlja2VkXG4gICAqIHRoaXMgbWV0aG9kIHNldHMgdGhlIHZpc2FibGUgc3RhdGUgdG8gYGZhbHNlYFxuICAgKiBhbmQgaGlkZXMgdGhlIEFsZXJ0IGNvbXBvbmVudC5cbiAgICovXG4gIGFsZXJ0RGlzbWlzcyhldmVudCk6IHZvaWQge1xuICAgIHRoaXMudmlzaWJsZSA9IGZhbHNlO1xuICB9XG59XG4iXX0=