import { __decorate, __metadata } from "tslib";
import { Component, Input } from '@angular/core';
import * as _ from 'lodash';
import { toggleAnimations } from '../../sprk-toggle/sprk-toggle-animations';
let SprkMastheadAccordionItemComponent = class SprkMastheadAccordionItemComponent {
    constructor() {
        /**
         * If `true`, the Masthead accordion item
         * will be open when it is rendered.
         */
        this.isOpen = false;
        /**
         * The name of the icon to use
         * for the clickable close icon.
         */
        this.iconTypeClosed = 'chevron-up-circle-two-color';
        /**
         * The name of the icon to use
         * for the clickable open icon.
         */
        this.iconTypeOpen = 'chevron-up-circle-two-color';
        /**
         * @ignore
         */
        this.componentID = _.uniqueId();
        /**
         * @ignore
         */
        this.accordion_controls_id = `accordionHeading__${this.componentID}`;
        /**
         * @ignore
         */
        this.currentIconType = this.iconTypeClosed;
        /**
         * @ignore
         */
        this.iconStateClass = '';
        /**
         * @ignore
         */
        this.animState = 'closed';
    }
    /**
     * @ignore
     */
    accordionState() {
        this.isOpen === false
            ? (this.animState = 'closed')
            : (this.animState = 'open');
        this.isOpen === false
            ? (this.currentIconType = this.iconTypeClosed)
            : (this.currentIconType = this.iconTypeOpen);
        this.isOpen === false
            ? (this.iconStateClass = '')
            : (this.iconStateClass = 'sprk-c-Icon--open');
    }
    /**
     * @ignore
     */
    toggleAccordion(event) {
        event.preventDefault();
        this.isOpen = !this.isOpen;
        this.accordionState();
    }
    /**
     * @ignore
     */
    getClasses() {
        const classArray = [
            'sprk-c-MastheadAccordion__item',
            'sprk-u-Overflow--hidden'
        ];
        if (this.isOpen) {
            classArray.push('sprk-c-MastheadAccordion__item--open');
        }
        if (this.isActive) {
            classArray.push('sprk-c-MastheadAccordion__item--active');
        }
        if (this.additionalClasses) {
            this.additionalClasses.split(' ').forEach(className => {
                classArray.push(className);
            });
        }
        return classArray.join(' ');
    }
    /**
     * @ignore
     */
    getHeadingClasses() {
        const classArray = ['sprk-c-MastheadAccordion__heading'];
        if (this.additionalHeadingClasses) {
            this.additionalHeadingClasses.split(' ').forEach(className => {
                classArray.push(className);
            });
        }
        return classArray.join(' ');
    }
    ngOnInit() {
        this.accordionState();
    }
};
__decorate([
    Input(),
    __metadata("design:type", String)
], SprkMastheadAccordionItemComponent.prototype, "title", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], SprkMastheadAccordionItemComponent.prototype, "analyticsString", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], SprkMastheadAccordionItemComponent.prototype, "idString", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], SprkMastheadAccordionItemComponent.prototype, "additionalClasses", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], SprkMastheadAccordionItemComponent.prototype, "additionalHeadingClasses", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], SprkMastheadAccordionItemComponent.prototype, "isOpen", void 0);
__decorate([
    Input(),
    __metadata("design:type", Boolean)
], SprkMastheadAccordionItemComponent.prototype, "isActive", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], SprkMastheadAccordionItemComponent.prototype, "iconTypeClosed", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], SprkMastheadAccordionItemComponent.prototype, "iconTypeOpen", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], SprkMastheadAccordionItemComponent.prototype, "leadingIcon", void 0);
SprkMastheadAccordionItemComponent = __decorate([
    Component({
        selector: 'sprk-masthead-accordion-item',
        template: `
    <li [ngClass]="getClasses()">
      <div
        class="sprk-u-Position--relative sprk-o-Stack__item sprk-u-Width-100"
      >
        <button
          [attr.aria-controls]="accordion_controls_id"
          class="sprk-c-MastheadAccordion__summary"
          [attr.data-analytics]="analyticsString"
          [attr.data-id]="idString"
          (click)="toggleAccordion($event)"
          [attr.aria-expanded]="isOpen"
        >
          <span [ngClass]="getHeadingClasses()">
            <sprk-icon
              [iconType]="leadingIcon"
              additionalClasses="sprk-c-Icon--stroke-current-color sprk-c-Icon--l sprk-c-Icon--toggle sprk-u-mrs"
              *ngIf="leadingIcon"
            ></sprk-icon>
            {{ title }}
          </span>

          <sprk-icon
            additionalClasses="sprk-c-MastheadAccordion__icon sprk-c-Icon--stroke-current-color sprk-c-Icon--toggle {{
              iconStateClass
            }}"
            [iconType]="currentIconType"
          ></sprk-icon>
        </button>
      </div>

      <div [@toggleContent]="animState">
        <div [id]="accordion_controls_id"><ng-content></ng-content></div>
      </div>
    </li>
  `,
        animations: [toggleAnimations.toggleContent]
    })
], SprkMastheadAccordionItemComponent);
export { SprkMastheadAccordionItemComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3Byay1tYXN0aGVhZC1hY2NvcmRpb24taXRlbS5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9Ac3BhcmtkZXNpZ25zeXN0ZW0vc3BhcmstYW5ndWxhci8iLCJzb3VyY2VzIjpbImxpYi9jb21wb25lbnRzL3NwcmstbWFzdGhlYWQvc3Byay1tYXN0aGVhZC1hY2NvcmRpb24taXRlbS9zcHJrLW1hc3RoZWFkLWFjY29yZGlvbi1pdGVtLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQVUsTUFBTSxlQUFlLENBQUM7QUFDekQsT0FBTyxLQUFLLENBQUMsTUFBTSxRQUFRLENBQUM7QUFDNUIsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sMENBQTBDLENBQUM7QUEwQzVFLElBQWEsa0NBQWtDLEdBQS9DLE1BQWEsa0NBQWtDO0lBQS9DO1FBbUNFOzs7V0FHRztRQUVILFdBQU0sR0FBRyxLQUFLLENBQUM7UUFPZjs7O1dBR0c7UUFFSCxtQkFBYyxHQUFHLDZCQUE2QixDQUFDO1FBQy9DOzs7V0FHRztRQUVILGlCQUFZLEdBQUcsNkJBQTZCLENBQUM7UUFRN0M7O1dBRUc7UUFDSCxnQkFBVyxHQUFHLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQztRQUMzQjs7V0FFRztRQUNILDBCQUFxQixHQUFHLHFCQUFxQixJQUFJLENBQUMsV0FBVyxFQUFFLENBQUM7UUFDaEU7O1dBRUc7UUFDSSxvQkFBZSxHQUFHLElBQUksQ0FBQyxjQUFjLENBQUM7UUFDN0M7O1dBRUc7UUFDSSxtQkFBYyxHQUFHLEVBQUUsQ0FBQztRQUMzQjs7V0FFRztRQUNJLGNBQVMsR0FBRyxRQUFRLENBQUM7SUFzRTlCLENBQUM7SUFwRUM7O09BRUc7SUFDSCxjQUFjO1FBQ1osSUFBSSxDQUFDLE1BQU0sS0FBSyxLQUFLO1lBQ25CLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxTQUFTLEdBQUcsUUFBUSxDQUFD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a0NBQWtDLENBMko5QztTQTNKWSxrQ0FBa0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIElucHV0LCBPbkluaXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCAqIGFzIF8gZnJvbSAnbG9kYXNoJztcbmltcG9ydCB7IHRvZ2dsZUFuaW1hdGlvbnMgfSBmcm9tICcuLi8uLi9zcHJrLXRvZ2dsZS9zcHJrLXRvZ2dsZS1hbmltYXRpb25zJztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnc3Byay1tYXN0aGVhZC1hY2NvcmRpb24taXRlbScsXG4gIHRlbXBsYXRlOiBgXG4gICAgPGxpIFtuZ0NsYXNzXT1cImdldENsYXNzZXMoKVwiPlxuICAgICAgPGRpdlxuICAgICAgICBjbGFzcz1cInNwcmstdS1Qb3NpdGlvbi0tcmVsYXRpdmUgc3Byay1vLVN0YWNrX19pdGVtIHNwcmstdS1XaWR0aC0xMDBcIlxuICAgICAgPlxuICAgICAgICA8YnV0dG9uXG4gICAgICAgICAgW2F0dHIuYXJpYS1jb250cm9sc109XCJhY2NvcmRpb25fY29udHJvbHNfaWRcIlxuICAgICAgICAgIGNsYXNzPVwic3Byay1jLU1hc3RoZWFkQWNjb3JkaW9uX19zdW1tYXJ5XCJcbiAgICAgICAgICBbYXR0ci5kYXRhLWFuYWx5dGljc109XCJhbmFseXRpY3NTdHJpbmdcIlxuICAgICAgICAgIFthdHRyLmRhdGEtaWRdPVwiaWRTdHJpbmdcIlxuICAgICAgICAgIChjbGljayk9XCJ0b2dnbGVBY2NvcmRpb24oJGV2ZW50KVwiXG4gICAgICAgICAgW2F0dHIuYXJpYS1leHBhbmRlZF09XCJpc09wZW5cIlxuICAgICAgICA+XG4gICAgICAgICAgPHNwYW4gW25nQ2xhc3NdPVwiZ2V0SGVhZGluZ0NsYXNzZXMoKVwiPlxuICAgICAgICAgICAgPHNwcmstaWNvblxuICAgICAgICAgICAgICBbaWNvblR5cGVdPVwibGVhZGluZ0ljb25cIlxuICAgICAgICAgICAgICBhZGRpdGlvbmFsQ2xhc3Nlcz1cInNwcmstYy1JY29uLS1zdHJva2UtY3VycmVudC1jb2xvciBzcHJrLWMtSWNvbi0tbCBzcHJrLWMtSWNvbi0tdG9nZ2xlIHNwcmstdS1tcnNcIlxuICAgICAgICAgICAgICAqbmdJZj1cImxlYWRpbmdJY29uXCJcbiAgICAgICAgICAgID48L3NwcmstaWNvbj5cbiAgICAgICAgICAgIHt7IHRpdGxlIH19XG4gICAgICAgICAgPC9zcGFuPlxuXG4gICAgICAgICAgPHNwcmstaWNvblxuICAgICAgICAgICAgYWRkaXRpb25hbENsYXNzZXM9XCJzcHJrLWMtTWFzdGhlYWRBY2NvcmRpb25fX2ljb24gc3Byay1jLUljb24tLXN0cm9rZS1jdXJyZW50LWNvbG9yIHNwcmstYy1JY29uLS10b2dnbGUge3tcbiAgICAgICAgICAgICAgaWNvblN0YXRlQ2xhc3NcbiAgICAgICAgICAgIH19XCJcbiAgICAgICAgICAgIFtpY29uVHlwZV09XCJjdXJyZW50SWNvblR5cGVcIlxuICAgICAgICAgID48L3NwcmstaWNvbj5cbiAgICAgICAgPC9idXR0b24+XG4gICAgICA8L2Rpdj5cblxuICAgICAgPGRpdiBbQHRvZ2dsZUNvbnRlbnRdPVwiYW5pbVN0YXRlXCI+XG4gICAgICAgIDxkaXYgW2lkXT1cImFjY29yZGlvbl9jb250cm9sc19pZFwiPjxuZy1jb250ZW50PjwvbmctY29udGVudD48L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgIDwvbGk+XG4gIGAsXG4gIGFuaW1hdGlvbnM6IFt0b2dnbGVBbmltYXRpb25zLnRvZ2dsZUNvbnRlbnRdXG59KVxuZXhwb3J0IGNsYXNzIFNwcmtNYXN0aGVhZEFjY29yZGlvbkl0ZW1Db21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQge1xuICBASW5wdXQoKVxuICB0aXRsZTogc3RyaW5nO1xuICAvKipcbiAgICogVGhlIHZhbHVlIHN1cHBsaWVkIHdpbGwgYmUgYXNzaWduZWQgdG8gdGhlXG4gICAqIGBkYXRhLWFuYWx5dGljc2AgYXR0cmlidXRlIG9uIHRoZSBjb21wb25lbnQuXG4gICAqIEludGVuZGVkIGZvciBhbiBvdXRzaWRlXG4gICAqIGxpYnJhcnkgdG8gY2FwdHVyZSBkYXRhLlxuICAgKi9cbiAgQElucHV0KClcbiAgYW5hbHl0aWNzU3RyaW5nOiBzdHJpbmc7XG4gIC8qKlxuICAgKiBUaGUgdmFsdWUgc3VwcGxpZWQgd2lsbCBiZSBhc3NpZ25lZFxuICAgKiB0byB0aGUgYGRhdGEtaWRgIGF0dHJpYnV0ZSBvbiB0aGVcbiAgICogY29tcG9uZW50LiBUaGlzIGlzIGludGVuZGVkIHRvIGJlXG4gICAqIHVzZWQgYXMgYSBzZWxlY3RvciBmb3IgYXV0b21hdGVkXG4gICAqIHRvb2xzLiBUaGlzIHZhbHVlIHNob3VsZCBiZSB1bmlxdWVcbiAgICogcGVyIHBhZ2UuXG4gICAqL1xuICBASW5wdXQoKVxuICBpZFN0cmluZzogc3RyaW5nO1xuICAvKipcbiAgICogRXhwZWN0cyBhIHNwYWNlIHNlcGFyYXRlZCBzdHJpbmdcbiAgICogb2YgY2xhc3NlcyB0byBiZSBhZGRlZCB0byB0aGVcbiAgICogY29tcG9uZW50LlxuICAgKi9cbiAgQElucHV0KClcbiAgYWRkaXRpb25hbENsYXNzZXM6IHN0cmluZztcbiAgLyoqXG4gICAqIEV4cGVjdHMgYSBzcGFjZSBzZXBhcmF0ZWQgc3RyaW5nXG4gICAqIG9mIGNsYXNzZXMgdG8gYmUgYWRkZWQgdG8gdGhlXG4gICAqIGhlYWRpbmcuXG4gICAqL1xuICBASW5wdXQoKVxuICBhZGRpdGlvbmFsSGVhZGluZ0NsYXNzZXM6IHN0cmluZztcbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIE1hc3RoZWFkIGFjY29yZGlvbiBpdGVtXG4gICAqIHdpbGwgYmUgb3BlbiB3aGVuIGl0IGlzIHJlbmRlcmVkLlxuICAgKi9cbiAgQElucHV0KClcbiAgaXNPcGVuID0gZmFsc2U7XG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBNYXN0aGVhZCBjY29yZGlvbiBpdGVtXG4gICAqIHdpbGwgYmUgYWN0aXZlIHdoZW4gaXQgaXMgcmVuZGVyZWQuXG4gICAqL1xuICBASW5wdXQoKVxuICBpc0FjdGl2ZTogYm9vbGVhbjtcbiAgLyoqXG4gICAqIFRoZSBuYW1lIG9mIHRoZSBpY29uIHRvIHVzZVxuICAgKiBmb3IgdGhlIGNsaWNrYWJsZSBjbG9zZSBpY29uLlxuICAgKi9cbiAgQElucHV0KClcbiAgaWNvblR5cGVDbG9zZWQgPSAnY2hldnJvbi11cC1jaXJjbGUtdHdvLWNvbG9yJztcbiAgLyoqXG4gICAqIFRoZSBuYW1lIG9mIHRoZSBpY29uIHRvIHVzZVxuICAgKiBmb3IgdGhlIGNsaWNrYWJsZSBvcGVuIGljb24uXG4gICAqL1xuICBASW5wdXQoKVxuICBpY29uVHlwZU9wZW4gPSAnY2hldnJvbi11cC1jaXJjbGUtdHdvLWNvbG9yJztcbiAgLyoqXG4gICAqIEV4cGVjdHMgYSBuYW1lIG9mIGFuIGljb24gdG8gdXNlXG4gICAqIGFzIGEgbGVhZGluZyBpY29uIGZvciB0aGUgTWFzdGhlYWQgYWNjb3JkaW9uIGl0ZW0uXG4gICAqL1xuICBASW5wdXQoKVxuICBsZWFkaW5nSWNvbjogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBjb21wb25lbnRJRCA9IF8udW5pcXVlSWQoKTtcbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGFjY29yZGlvbl9jb250cm9sc19pZCA9IGBhY2NvcmRpb25IZWFkaW5nX18ke3RoaXMuY29tcG9uZW50SUR9YDtcbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIHB1YmxpYyBjdXJyZW50SWNvblR5cGUgPSB0aGlzLmljb25UeXBlQ2xvc2VkO1xuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgcHVibGljIGljb25TdGF0ZUNsYXNzID0gJyc7XG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBwdWJsaWMgYW5pbVN0YXRlID0gJ2Nsb3NlZCc7XG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGFjY29yZGlvblN0YXRlKCk6IHZvaWQge1xuICAgIHRoaXMuaXNPcGVuID09PSBmYWxzZVxuICAgICAgPyAodGhpcy5hbmltU3RhdGUgPSAnY2xvc2VkJylcbiAgICAgIDogKHRoaXMuYW5pbVN0YXRlID0gJ29wZW4nKTtcblxuICAgIHRoaXMuaXNPcGVuID09PSBmYWxzZVxuICAgICAgPyAodGhpcy5jdXJyZW50SWNvblR5cGUgPSB0aGlzLmljb25UeXBlQ2xvc2VkKVxuICAgICAgOiAodGhpcy5jdXJyZW50SWNvblR5cGUgPSB0aGlzLmljb25UeXBlT3Blbik7XG5cbiAgICB0aGlzLmlzT3BlbiA9PT0gZmFsc2VcbiAgICAgID8gKHRoaXMuaWNvblN0YXRlQ2xhc3MgPSAnJylcbiAgICAgIDogKHRoaXMuaWNvblN0YXRlQ2xhc3MgPSAnc3Byay1jLUljb24tLW9wZW4nKTtcbiAgfVxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgdG9nZ2xlQWNjb3JkaW9uKGV2ZW50KTogdm9pZCB7XG4gICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICB0aGlzLmlzT3BlbiA9ICF0aGlzLmlzT3BlbjtcbiAgICB0aGlzLmFjY29yZGlvblN0YXRlKCk7XG4gIH1cblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgZ2V0Q2xhc3NlcygpOiBzdHJpbmcge1xuICAgIGNvbnN0IGNsYXNzQXJyYXk6IHN0cmluZ1tdID0gW1xuICAgICAgJ3NwcmstYy1NYXN0aGVhZEFjY29yZGlvbl9faXRlbScsXG4gICAgICAnc3Byay11LU92ZXJmbG93LS1oaWRkZW4nXG4gICAgXTtcblxuICAgIGlmICh0aGlzLmlzT3Blbikge1xuICAgICAgY2xhc3NBcnJheS5wdXNoKCdzcHJrLWMtTWFzdGhlYWRBY2NvcmRpb25fX2l0ZW0tLW9wZW4nKTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5pc0FjdGl2ZSkge1xuICAgICAgY2xhc3NBcnJheS5wdXNoKCdzcHJrLWMtTWFzdGhlYWRBY2NvcmRpb25fX2l0ZW0tLWFjdGl2ZScpO1xuICAgIH1cblxuICAgIGlmICh0aGlzLmFkZGl0aW9uYWxDbGFzc2VzKSB7XG4gICAgICB0aGlzLmFkZGl0aW9uYWxDbGFzc2VzLnNwbGl0KCcgJykuZm9yRWFjaChjbGFzc05hbWUgPT4ge1xuICAgICAgICBjbGFzc0FycmF5LnB1c2goY2xhc3NOYW1lKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHJldHVybiBjbGFzc0FycmF5LmpvaW4oJyAnKTtcbiAgfVxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgZ2V0SGVhZGluZ0NsYXNzZXMoKTogc3RyaW5nIHtcbiAgICBjb25zdCBjbGFzc0FycmF5OiBzdHJpbmdbXSA9IFsnc3Byay1jLU1hc3RoZWFkQWNjb3JkaW9uX19oZWFkaW5nJ107XG5cbiAgICBpZiAodGhpcy5hZGRpdGlvbmFsSGVhZGluZ0NsYXNzZXMpIHtcbiAgICAgIHRoaXMuYWRkaXRpb25hbEhlYWRpbmdDbGFzc2VzLnNwbGl0KCcgJykuZm9yRWFjaChjbGFzc05hbWUgPT4ge1xuICAgICAgICBjbGFzc0FycmF5LnB1c2goY2xhc3NOYW1lKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHJldHVybiBjbGFzc0FycmF5LmpvaW4oJyAnKTtcbiAgfVxuXG4gIG5nT25Jbml0KCkge1xuICAgIHRoaXMuYWNjb3JkaW9uU3RhdGUoKTtcbiAgfVxufVxuIl19