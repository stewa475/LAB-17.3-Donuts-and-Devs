import { __decorate, __metadata } from "tslib";
import { Component, EventEmitter, HostListener, Input, Output } from '@angular/core';
import * as _ from 'lodash';
let SprkModalComponent = class SprkModalComponent {
    /**
     * @ignore
     */
    constructor() {
        /**
         * The value supplied will be
         * rendered as the text for the confirm button.
         */
        this.confirmText = 'Confirm';
        /**
         * The value supplied will be rendered
         * as the text for the cancel button.
         */
        this.cancelText = 'Cancel';
        /**
         * If `true`, the Modal will be shown.
         * If `false`, the modal will not be shown.
         */
        this.isVisible = false;
        /**
         * When the Modal is closed the hide event is
         * emitted and a callback function can
         * be triggered if supplied.
         */
        this.hide = new EventEmitter();
        /**
         * Available when the Modal type is `choice`.
         * The Modal will emit a confirm click event
         * when the confirmation button is clicked.
         * A callback function can be triggered if
         * supplied.
         */
        this.confirmClick = new EventEmitter();
        /**
         * Available when the Modal type is `choice`.
         * The Modal will emit a cancel click event
         * when the cancel link is clicked.
         * A callback function can be triggered if supplied.
         */
        this.cancelClick = new EventEmitter();
        /**
         * @ignore
         */
        this.componentID = _.uniqueId();
        /**
         * @ignore
         */
        this.heading_id = `modalHeading__${this.componentID}`;
        /**
         * @ignore
         */
        this.content_id = `modalContent__${this.componentID}`;
    }
    /**
     * @ignore
     */
    handleKeyboardEvent(event) {
        if (this.isVisible && event.key === 'Escape') {
            this.closeModal(event);
        }
    }
    /**
     * @ignore
     */
    closeModal(event) {
        if (this.modalType !== 'wait') {
            event.preventDefault();
            this.hide.emit(event);
        }
    }
    /**
     * Emits an event when the confirmation
     * button is clicked.
     */
    emitConfirmClick(event) {
        this.confirmClick.emit(event);
    }
    /**
     * Emits an event when the cancel
     * link is clicked.
     */
    emitCancelClick(event) {
        event.preventDefault();
        this.cancelClick.emit(event);
        this.closeModal(event);
    }
};
__decorate([
    Input(),
    __metadata("design:type", String)
], SprkModalComponent.prototype, "title", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], SprkModalComponent.prototype, "modalType", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], SprkModalComponent.prototype, "confirmText", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], SprkModalComponent.prototype, "cancelText", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], SprkModalComponent.prototype, "confirmAnalyticsString", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], SprkModalComponent.prototype, "cancelAnalyticsString", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], SprkModalComponent.prototype, "idString", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], SprkModalComponent.prototype, "isVisible", void 0);
__decorate([
    Output(),
    __metadata("design:type", Object)
], SprkModalComponent.prototype, "hide", void 0);
__decorate([
    Output(),
    __metadata("design:type", Object)
], SprkModalComponent.prototype, "confirmClick", void 0);
__decorate([
    Output(),
    __metadata("design:type", Object)
], SprkModalComponent.prototype, "cancelClick", void 0);
__decorate([
    HostListener('document:keydown', ['$event']),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [KeyboardEvent]),
    __metadata("design:returntype", void 0)
], SprkModalComponent.prototype, "handleKeyboardEvent", null);
SprkModalComponent = __decorate([
    Component({
        selector: 'sprk-modal',
        template: `
    <div
      *ngIf="isVisible"
      [ngClass]="{
        'sprk-c-Modal': true,
        'sprk-c-Modal--wait': modalType === 'wait'
      }"
      role="dialog"
      tabindex="1"
      [attr.aria-labelledby]="heading_id"
      aria-modal="true"
      [attr.aria-describedby]="content_id"
      [attr.data-id]="idString"
    >
      <div class="sprk-o-Stack sprk-o-Stack--large">
        <header class="sprk-o-Stack__item sprk-c-Modal__header">
          <h2
            class="sprk-c-Modal__heading sprk-b-TypeDisplayFour"
            [id]="heading_id"
          >
            {{ title }}
          </h2>

          <button
            *ngIf="modalType != 'wait'"
            class="sprk-c-Modal__icon"
            type="button"
            aria-label="Close Modal"
            (click)="closeModal($event)"
          >
            <sprk-icon
              iconType="close"
              additionalClasses="sprk-c-Icon--stroke-current-color"
            ></sprk-icon>
          </button>
        </header>

        <div
          class="sprk-o-Stack__item sprk-c-Modal__body sprk-o-Stack sprk-o-Stack--medium"
        >
          <div
            *ngIf="modalType == 'wait'"
            class="sprk-o-Stack__item sprk-c-Spinner sprk-c-Spinner--circle sprk-c-Spinner--large sprk-c-Spinner--dark"
          ></div>
          <ng-content></ng-content>
        </div>

        <footer
          *ngIf="modalType === 'choice'"
          class="sprk-o-Stack__item sprk-c-Modal__footer"
        >
          <button
            class="sprk-c-Button sprk-u-mrm"
            [attr.data-analytics]="confirmAnalyticsString"
            (click)="emitConfirmClick($event)"
          >
            {{ confirmText }}
          </button>

          <button
            class="sprk-c-Button sprk-c-Button--tertiary"
            [attr.data-analytics]="cancelAnalyticsString"
            (click)="emitCancelClick($event)"
          >
            {{ cancelText }}
          </button>
        </footer>
      </div>
    </div>

    <div
      *ngIf="isVisible"
      class="sprk-c-ModalMask"
      tabindex="-1"
      (click)="closeModal($event)"
    ></div>
  `
    }),
    __metadata("design:paramtypes", [])
], SprkModalComponent);
export { SprkModalComponent };
//# sourceMappingURL=data:application/json;base64,