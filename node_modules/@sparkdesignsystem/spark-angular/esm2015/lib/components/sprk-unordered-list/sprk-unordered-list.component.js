import { __decorate, __metadata } from "tslib";
import { Component, Input, ContentChildren, QueryList } from '@angular/core';
import { SprkListItemComponent } from '../sprk-list-item/sprk-list-item.component';
let SprkUnorderedListComponent = class SprkUnorderedListComponent {
    constructor() { }
    /**
     * @ignore
     */
    getClasses() {
        const classArray = [''];
        switch (this.listType) {
            case 'indented':
                classArray.push('sprk-b-List');
                classArray.push('sprk-b-List--indented');
                break;
            case 'bare':
                classArray.push('sprk-b-List');
                classArray.push('sprk-b-List--bare');
                break;
            case 'horizontal':
                classArray.push('sprk-o-HorizontalList');
                break;
            default:
                break;
        }
        if (this.additionalClasses) {
            this.additionalClasses.split(' ').forEach(className => {
                classArray.push(className);
            });
        }
        return classArray.join(' ');
    }
};
__decorate([
    Input(),
    __metadata("design:type", String)
], SprkUnorderedListComponent.prototype, "listType", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], SprkUnorderedListComponent.prototype, "additionalClasses", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], SprkUnorderedListComponent.prototype, "idString", void 0);
__decorate([
    ContentChildren(SprkListItemComponent),
    __metadata("design:type", QueryList)
], SprkUnorderedListComponent.prototype, "items", void 0);
SprkUnorderedListComponent = __decorate([
    Component({
        selector: 'sprk-unordered-list',
        template: `
    <ul [ngClass]="getClasses()" [attr.data-id]="idString">
      <li
        *ngFor="let item of items"
        [attr.data-analytics]="item.analyticsString"
        [attr.data-id]="item.idString"
        [ngClass]="item.additionalClasses"
      >
        <ng-container [ngTemplateOutlet]="item.content"></ng-container>
      </li>
    </ul>
  `
    }),
    __metadata("design:paramtypes", [])
], SprkUnorderedListComponent);
export { SprkUnorderedListComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3Byay11bm9yZGVyZWQtbGlzdC5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9Ac3BhcmtkZXNpZ25zeXN0ZW0vc3BhcmstYW5ndWxhci8iLCJzb3VyY2VzIjpbImxpYi9jb21wb25lbnRzL3NwcmstdW5vcmRlcmVkLWxpc3Qvc3Byay11bm9yZGVyZWQtbGlzdC5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFFLGVBQWUsRUFBRSxTQUFTLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDN0UsT0FBTyxFQUFFLHFCQUFxQixFQUFFLE1BQU0sNENBQTRDLENBQUM7QUFpQm5GLElBQWEsMEJBQTBCLEdBQXZDLE1BQWEsMEJBQTBCO0lBK0RyQyxnQkFBZSxDQUFDO0lBOUJoQjs7T0FFRztJQUNILFVBQVU7UUFDUixNQUFNLFVBQVUsR0FBYSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBRWxDLFFBQVEsSUFBSSxDQUFDLFFBQVEsRUFBRTtZQUNyQixLQUFLLFVBQVU7Z0JBQ2IsVUFBVSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQztnQkFDL0IsVUFBVSxDQUFDLElBQUksQ0FBQyx1QkFBdUIsQ0FBQyxDQUFDO2dCQUN6QyxNQUFNO1lBQ1IsS0FBSyxNQUFNO2dCQUNULFVBQVUsQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUM7Z0JBQy9CLFVBQVUsQ0FBQyxJQUFJLENBQUMsbUJBQW1CLENBQUMsQ0FBQztnQkFDckMsTUFBTTtZQUNSLEtBQUssWUFBWTtnQkFDZixVQUFVLENBQUMsSUFBSSxDQUFDLHVCQUF1QixDQUFDLENBQUM7Z0JBQ3pDLE1BQU07WUFDUjtnQkFDRSxNQUFNO1NBQ1Q7UUFFRCxJQUFJLElBQUksQ0FBQyxpQkFBaUIsRUFBRTtZQUMxQixJQUFJLENBQUMsaUJBQWlCLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsRUFBRTtnQkFDcEQsVUFBVSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQztZQUM3QixDQUFDLENBQUMsQ0FBQztTQUNKO1FBRUQsT0FBTyxVQUFVLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQzlCLENBQUM7Q0FFRixDQUFBO0FBMURDO0lBREMsS0FBSyxFQUFFOzs0REFDUztBQU9qQjtJQURDLEtBQUssRUFBRTs7cUVBQ2tCO0FBVTFCO0lBREMsS0FBSyxFQUFFOzs0REFDUztBQU11QjtJQUF2QyxlQUFlLENBQUMscUJBQXFCLENBQUM7OEJBQVEsU0FBUzt5REFFdEQ7QUEvQlMsMEJBQTBCO0lBZnRDLFNBQVMsQ0FBQztRQUNULFFBQVEsRUFBRSxxQkFBcUI7UUFDL0IsUUFBUSxFQUFFOzs7Ozs7Ozs7OztHQVdUO0tBQ0YsQ0FBQzs7R0FDVywwQkFBMEIsQ0FnRXRDO1NBaEVZLDBCQUEwQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgSW5wdXQsIENvbnRlbnRDaGlsZHJlbiwgUXVlcnlMaXN0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBTcHJrTGlzdEl0ZW1Db21wb25lbnQgfSBmcm9tICcuLi9zcHJrLWxpc3QtaXRlbS9zcHJrLWxpc3QtaXRlbS5jb21wb25lbnQnO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdzcHJrLXVub3JkZXJlZC1saXN0JyxcbiAgdGVtcGxhdGU6IGBcbiAgICA8dWwgW25nQ2xhc3NdPVwiZ2V0Q2xhc3NlcygpXCIgW2F0dHIuZGF0YS1pZF09XCJpZFN0cmluZ1wiPlxuICAgICAgPGxpXG4gICAgICAgICpuZ0Zvcj1cImxldCBpdGVtIG9mIGl0ZW1zXCJcbiAgICAgICAgW2F0dHIuZGF0YS1hbmFseXRpY3NdPVwiaXRlbS5hbmFseXRpY3NTdHJpbmdcIlxuICAgICAgICBbYXR0ci5kYXRhLWlkXT1cIml0ZW0uaWRTdHJpbmdcIlxuICAgICAgICBbbmdDbGFzc109XCJpdGVtLmFkZGl0aW9uYWxDbGFzc2VzXCJcbiAgICAgID5cbiAgICAgICAgPG5nLWNvbnRhaW5lciBbbmdUZW1wbGF0ZU91dGxldF09XCJpdGVtLmNvbnRlbnRcIj48L25nLWNvbnRhaW5lcj5cbiAgICAgIDwvbGk+XG4gICAgPC91bD5cbiAgYFxufSlcbmV4cG9ydCBjbGFzcyBTcHJrVW5vcmRlcmVkTGlzdENvbXBvbmVudCB7XG4gIC8qKlxuICAgKiBUaGlzIHZhbHVlIGRldGVybWluZXMgd2hhdCBMaXN0IHZhcmlhbnQgaXMgcmVuZGVyZWQuXG4gICAqIENhbiBiZSBgYmFyZWAgb3IgYGluZGVudGVkYC5cbiAgICovXG4gIEBJbnB1dCgpXG4gIGxpc3RUeXBlOiBzdHJpbmc7XG4gIC8qKlxuICAgKiBFeHBlY3RzIGEgc3BhY2Ugc2VwYXJhdGVkIHN0cmluZ1xuICAgKiBvZiBjbGFzc2VzIHRvIGJlIGFkZGVkIHRvIHRoZVxuICAgKiBjb21wb25lbnQuXG4gICAqL1xuICBASW5wdXQoKVxuICBhZGRpdGlvbmFsQ2xhc3Nlczogc3RyaW5nO1xuICAvKipcbiAgICogVGhlIHZhbHVlIHN1cHBsaWVkIHdpbGwgYmUgYXNzaWduZWRcbiAgICogdG8gdGhlIGBkYXRhLWlkYCBhdHRyaWJ1dGUgb24gdGhlXG4gICAqIGNvbXBvbmVudC4gVGhpcyBpcyBpbnRlbmRlZCB0byBiZVxuICAgKiB1c2VkIGFzIGEgc2VsZWN0b3IgZm9yIGF1dG9tYXRlZFxuICAgKiB0b29scy4gVGhpcyB2YWx1ZSBzaG91bGQgYmUgdW5pcXVlXG4gICAqIHBlciBwYWdlLlxuICAgKi9cbiAgQElucHV0KClcbiAgaWRTdHJpbmc6IHN0cmluZztcblxuICAvKipcbiAgICogVGhpcyBjb21wb25lbnQgZXhwZWN0cyBjaGlsZHJlbiBgPHNwcmstbGlzdC1pdGVtPjwvc3Byay1saXN0LWl0ZW0+YFxuICAgKiBjb21wb25lbnRzLlxuICAgKi9cbiAgQENvbnRlbnRDaGlsZHJlbihTcHJrTGlzdEl0ZW1Db21wb25lbnQpIGl0ZW1zOiBRdWVyeUxpc3Q8XG4gICAgU3Bya0xpc3RJdGVtQ29tcG9uZW50XG4gID47XG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGdldENsYXNzZXMoKTogc3RyaW5nIHtcbiAgICBjb25zdCBjbGFzc0FycmF5OiBzdHJpbmdbXSA9IFsnJ107XG5cbiAgICBzd2l0Y2ggKHRoaXMubGlzdFR5cGUpIHtcbiAgICAgIGNhc2UgJ2luZGVudGVkJzpcbiAgICAgICAgY2xhc3NBcnJheS5wdXNoKCdzcHJrLWItTGlzdCcpO1xuICAgICAgICBjbGFzc0FycmF5LnB1c2goJ3NwcmstYi1MaXN0LS1pbmRlbnRlZCcpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ2JhcmUnOlxuICAgICAgICBjbGFzc0FycmF5LnB1c2goJ3NwcmstYi1MaXN0Jyk7XG4gICAgICAgIGNsYXNzQXJyYXkucHVzaCgnc3Byay1iLUxpc3QtLWJhcmUnKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICdob3Jpem9udGFsJzpcbiAgICAgICAgY2xhc3NBcnJheS5wdXNoKCdzcHJrLW8tSG9yaXpvbnRhbExpc3QnKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICBicmVhaztcbiAgICB9XG5cbiAgICBpZiAodGhpcy5hZGRpdGlvbmFsQ2xhc3Nlcykge1xuICAgICAgdGhpcy5hZGRpdGlvbmFsQ2xhc3Nlcy5zcGxpdCgnICcpLmZvckVhY2goY2xhc3NOYW1lID0+IHtcbiAgICAgICAgY2xhc3NBcnJheS5wdXNoKGNsYXNzTmFtZSk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gY2xhc3NBcnJheS5qb2luKCcgJyk7XG4gIH1cbiAgY29uc3RydWN0b3IoKSB7fVxufVxuIl19