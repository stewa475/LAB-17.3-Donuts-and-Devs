import { __decorate, __metadata } from "tslib";
import { Component, Input, ContentChildren, QueryList } from '@angular/core';
import { SprkListItemComponent } from '../sprk-list-item/sprk-list-item.component';
let SprkOrderedListComponent = class SprkOrderedListComponent {
    constructor() { }
    /**
     * @ignore
     */
    getClasses() {
        const classArray = ['sprk-b-List'];
        switch (this.listType) {
            case 'indented':
                classArray.push('sprk-b-List--indented');
                break;
            case 'bare':
                classArray.push('sprk-b-List--bare');
                break;
            default:
                break;
        }
        if (this.additionalClasses) {
            this.additionalClasses.split(' ').forEach(className => {
                classArray.push(className);
            });
        }
        return classArray.join(' ');
    }
};
__decorate([
    Input(),
    __metadata("design:type", String)
], SprkOrderedListComponent.prototype, "listType", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], SprkOrderedListComponent.prototype, "additionalClasses", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], SprkOrderedListComponent.prototype, "idString", void 0);
__decorate([
    ContentChildren(SprkListItemComponent),
    __metadata("design:type", QueryList)
], SprkOrderedListComponent.prototype, "items", void 0);
SprkOrderedListComponent = __decorate([
    Component({
        selector: 'sprk-ordered-list',
        template: `
    <ol [ngClass]="getClasses()" [attr.data-id]="idString">
      <li
        *ngFor="let item of items"
        [attr.data-analytics]="item.analyticsString"
        [attr.data-id]="item.idString"
        [ngClass]="item.additionalClasses"
      >
        <ng-container [ngTemplateOutlet]="item.content"></ng-container>
      </li>
    </ol>
  `
    }),
    __metadata("design:paramtypes", [])
], SprkOrderedListComponent);
export { SprkOrderedListComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3Byay1vcmRlcmVkLWxpc3QuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHNwYXJrZGVzaWduc3lzdGVtL3NwYXJrLWFuZ3VsYXIvIiwic291cmNlcyI6WyJsaWIvY29tcG9uZW50cy9zcHJrLW9yZGVyZWQtbGlzdC9zcHJrLW9yZGVyZWQtbGlzdC5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFFLGVBQWUsRUFBRSxTQUFTLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDN0UsT0FBTyxFQUFFLHFCQUFxQixFQUFFLE1BQU0sNENBQTRDLENBQUM7QUFpQm5GLElBQWEsd0JBQXdCLEdBQXJDLE1BQWEsd0JBQXdCO0lBMERuQyxnQkFBZSxDQUFDO0lBekJoQjs7T0FFRztJQUNILFVBQVU7UUFDUixNQUFNLFVBQVUsR0FBYSxDQUFDLGFBQWEsQ0FBQyxDQUFDO1FBRTdDLFFBQVEsSUFBSSxDQUFDLFFBQVEsRUFBRTtZQUNyQixLQUFLLFVBQVU7Z0JBQ2IsVUFBVSxDQUFDLElBQUksQ0FBQyx1QkFBdUIsQ0FBQyxDQUFDO2dCQUN6QyxNQUFNO1lBQ1IsS0FBSyxNQUFNO2dCQUNULFVBQVUsQ0FBQyxJQUFJLENBQUMsbUJBQW1CLENBQUMsQ0FBQztnQkFDckMsTUFBTTtZQUNSO2dCQUNFLE1BQU07U0FDVDtRQUVELElBQUksSUFBSSxDQUFDLGlCQUFpQixFQUFFO1lBQzFCLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxFQUFFO2dCQUNwRCxVQUFVLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO1lBQzdCLENBQUMsQ0FBQyxDQUFDO1NBQ0o7UUFFRCxPQUFPLFVBQVUsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDOUIsQ0FBQztDQUVGLENBQUE7QUFyREM7SUFEQyxLQUFLLEVBQUU7OzBEQUNTO0FBT2pCO0lBREMsS0FBSyxFQUFFOzttRUFDa0I7QUFVMUI7SUFEQyxLQUFLLEVBQUU7OzBEQUNTO0FBTXVCO0lBQXZDLGVBQWUsQ0FBQyxxQkFBcUIsQ0FBQzs4QkFBUSxTQUFTO3VEQUV0RDtBQS9CUyx3QkFBd0I7SUFmcEMsU0FBUyxDQUFDO1FBQ1QsUUFBUSxFQUFFLG1CQUFtQjtRQUM3QixRQUFRLEVBQUU7Ozs7Ozs7Ozs7O0dBV1Q7S0FDRixDQUFDOztHQUNXLHdCQUF3QixDQTJEcEM7U0EzRFksd0JBQXdCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBJbnB1dCwgQ29udGVudENoaWxkcmVuLCBRdWVyeUxpc3QgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFNwcmtMaXN0SXRlbUNvbXBvbmVudCB9IGZyb20gJy4uL3NwcmstbGlzdC1pdGVtL3NwcmstbGlzdC1pdGVtLmNvbXBvbmVudCc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ3Nwcmstb3JkZXJlZC1saXN0JyxcbiAgdGVtcGxhdGU6IGBcbiAgICA8b2wgW25nQ2xhc3NdPVwiZ2V0Q2xhc3NlcygpXCIgW2F0dHIuZGF0YS1pZF09XCJpZFN0cmluZ1wiPlxuICAgICAgPGxpXG4gICAgICAgICpuZ0Zvcj1cImxldCBpdGVtIG9mIGl0ZW1zXCJcbiAgICAgICAgW2F0dHIuZGF0YS1hbmFseXRpY3NdPVwiaXRlbS5hbmFseXRpY3NTdHJpbmdcIlxuICAgICAgICBbYXR0ci5kYXRhLWlkXT1cIml0ZW0uaWRTdHJpbmdcIlxuICAgICAgICBbbmdDbGFzc109XCJpdGVtLmFkZGl0aW9uYWxDbGFzc2VzXCJcbiAgICAgID5cbiAgICAgICAgPG5nLWNvbnRhaW5lciBbbmdUZW1wbGF0ZU91dGxldF09XCJpdGVtLmNvbnRlbnRcIj48L25nLWNvbnRhaW5lcj5cbiAgICAgIDwvbGk+XG4gICAgPC9vbD5cbiAgYFxufSlcbmV4cG9ydCBjbGFzcyBTcHJrT3JkZXJlZExpc3RDb21wb25lbnQge1xuICAvKipcbiAgICogV2lsbCBjYXVzZSB0aGUgYXBwcm9wcmlhdGUgdmFyaWFudCB0eXBlIHRvIHJlbmRlci5cbiAgICogQ2FuIGJlIGBiYXJlYCBvciBgaW5kZW50ZWRgLlxuICAgKi9cbiAgQElucHV0KClcbiAgbGlzdFR5cGU6IHN0cmluZztcbiAgLyoqXG4gICAqIEV4cGVjdHMgYSBzcGFjZSBzZXBhcmF0ZWQgc3RyaW5nXG4gICAqIG9mIGNsYXNzZXMgdG8gYmUgYWRkZWQgdG8gdGhlXG4gICAqIGNvbXBvbmVudC5cbiAgICovXG4gIEBJbnB1dCgpXG4gIGFkZGl0aW9uYWxDbGFzc2VzOiBzdHJpbmc7XG4gIC8qKlxuICAgKiBUaGUgdmFsdWUgc3VwcGxpZWQgd2lsbCBiZSBhc3NpZ25lZFxuICAgKiB0byB0aGUgYGRhdGEtaWRgIGF0dHJpYnV0ZSBvbiB0aGVcbiAgICogY29tcG9uZW50LiBUaGlzIGlzIGludGVuZGVkIHRvIGJlXG4gICAqIHVzZWQgYXMgYSBzZWxlY3RvciBmb3IgYXV0b21hdGVkXG4gICAqIHRvb2xzLiBUaGlzIHZhbHVlIHNob3VsZCBiZSB1bmlxdWVcbiAgICogcGVyIHBhZ2UuXG4gICAqL1xuICBASW5wdXQoKVxuICBpZFN0cmluZzogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBUaGlzIGNvbXBvbmVudCBleHBlY3RzIGNoaWxkcmVuXG4gICAqIGNvbXBvbmVudHMgb2YgYDxzcHJrLWxpc3QtaXRlbT48LzxzcHJrLWxpc3QtaXRlbT5gLlxuICAgKi9cbiAgQENvbnRlbnRDaGlsZHJlbihTcHJrTGlzdEl0ZW1Db21wb25lbnQpIGl0ZW1zOiBRdWVyeUxpc3Q8XG4gICAgU3Bya0xpc3RJdGVtQ29tcG9uZW50XG4gID47XG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGdldENsYXNzZXMoKTogc3RyaW5nIHtcbiAgICBjb25zdCBjbGFzc0FycmF5OiBzdHJpbmdbXSA9IFsnc3Byay1iLUxpc3QnXTtcblxuICAgIHN3aXRjaCAodGhpcy5saXN0VHlwZSkge1xuICAgICAgY2FzZSAnaW5kZW50ZWQnOlxuICAgICAgICBjbGFzc0FycmF5LnB1c2goJ3NwcmstYi1MaXN0LS1pbmRlbnRlZCcpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ2JhcmUnOlxuICAgICAgICBjbGFzc0FycmF5LnB1c2goJ3NwcmstYi1MaXN0LS1iYXJlJyk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgYnJlYWs7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuYWRkaXRpb25hbENsYXNzZXMpIHtcbiAgICAgIHRoaXMuYWRkaXRpb25hbENsYXNzZXMuc3BsaXQoJyAnKS5mb3JFYWNoKGNsYXNzTmFtZSA9PiB7XG4gICAgICAgIGNsYXNzQXJyYXkucHVzaChjbGFzc05hbWUpO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGNsYXNzQXJyYXkuam9pbignICcpO1xuICB9XG4gIGNvbnN0cnVjdG9yKCkge31cbn1cbiJdfQ==