import { __decorate, __metadata } from "tslib";
import { Component, Input } from '@angular/core';
let SprkHighlightBoardComponent = class SprkHighlightBoardComponent {
    constructor() {
        /**
         * @ignore
         */
        this.centerBtns = '';
    }
    ngOnInit() {
        if (!this.ctaText && this.ctaText2) {
            console.warn(`
        Spark Design System Warning - <sprk-highlight-board> Component:
        A secondary call-to-action (CTA)
        should not exist without a primary CTA.
        If there is only one CTA, it must be set on
        ctaText and ctaHref.
      `);
        }
    }
    /**
     * @ignore
     */
    getClasses() {
        const classArray = ['sprk-c-HighlightBoard'];
        switch (this.type) {
            case 'noImage':
                this.centerBtns = 'sprk-o-Stack--center-row';
                break;
            case 'stacked':
                this.centerBtns = 'sprk-o-Stack--center-row';
                classArray.push('sprk-c-HighlightBoard--has-image sprk-c-HighlightBoard--stacked');
                break;
            default:
                classArray.push('sprk-c-HighlightBoard--has-image');
                break;
        }
        if (this.additionalClasses) {
            this.additionalClasses.split(' ').forEach(className => {
                classArray.push(className);
            });
        }
        return classArray.join(' ');
    }
};
__decorate([
    Input(),
    __metadata("design:type", String)
], SprkHighlightBoardComponent.prototype, "heading", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], SprkHighlightBoardComponent.prototype, "imgSrc", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], SprkHighlightBoardComponent.prototype, "imgAlt", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], SprkHighlightBoardComponent.prototype, "ctaText", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], SprkHighlightBoardComponent.prototype, "ctaHref", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], SprkHighlightBoardComponent.prototype, "ctaText2", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], SprkHighlightBoardComponent.prototype, "ctaHref2", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], SprkHighlightBoardComponent.prototype, "analyticsStringCta", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], SprkHighlightBoardComponent.prototype, "analyticsStringCta2", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], SprkHighlightBoardComponent.prototype, "additionalClasses", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], SprkHighlightBoardComponent.prototype, "type", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], SprkHighlightBoardComponent.prototype, "idString", void 0);
SprkHighlightBoardComponent = __decorate([
    Component({
        selector: 'sprk-highlight-board',
        template: `
    <div [ngClass]="getClasses()" [attr.data-id]="idString">
      <img
        *ngIf="type !== 'noImage'"
        class="sprk-c-HighlightBoard__image"
        src="{{ imgSrc }}"
        alt="{{ imgAlt }}"
      />

      <sprk-stack
        sprkStackItem
        itemSpacing="large"
        additionalClasses="sprk-c-HighlightBoard__content"
      >
        <h1
          sprkStackItem
          [ngClass]="{
            'sprk-b-TypeDisplayTwo': type === 'noImage',
            'sprk-b-TypeDisplayOne': type !== 'noImage',
            'sprk-c-HighlightBoard__heading': true
          }"
        >
          {{ heading }}
        </h1>

        <sprk-stack
          sprkStackItem
          *ngIf="ctaText"
          itemSpacing="medium"
          splitAt="tiny"
          additionalClasses="sprk-o-Stack--center-column {{ centerBtns }}"
        >
          <div sprkStackItem class="sprk-c-HighlightBoard__cta">
            <a
              sprkLink
              variant="unstyled"
              [attr.href]="ctaHref"
              class="sprk-c-Button sprk-c-Button--primary sprk-c-Button--full@sm"
              [analyticsString]="analyticsStringCta"
            >
              {{ ctaText }}
            </a>
          </div>

          <div
            sprkStackItem
            *ngIf="ctaText2"
            class="sprk-c-HighlightBoard__cta"
          >
            <a
              sprkLink
              variant="unstyled"
              [attr.href]="ctaHref2"
              class="sprk-c-Button sprk-c-Button--secondary sprk-c-Button--full@sm"
              [analyticsString]="analyticsStringCta2"
            >
              {{ ctaText2 }}
            </a>
          </div>
        </sprk-stack>
      </sprk-stack>
    </div>
  `
    })
], SprkHighlightBoardComponent);
export { SprkHighlightBoardComponent };
//# sourceMappingURL=data:application/json;base64,