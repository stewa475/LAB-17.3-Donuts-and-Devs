import { __decorate, __metadata } from "tslib";
import { Component, Input, Output, ElementRef, HostListener, EventEmitter } from '@angular/core';
let SprkDropdownComponent = class SprkDropdownComponent {
    /**
     * @ignore
     */
    constructor(ref) {
        this.ref = ref;
        /**
         * The variant of the Dropdown to render.
         */
        this.dropdownType = 'base';
        /**
         * If `true`, the Dropdown will be open when rendered.
         */
        this.isOpen = false;
        /**
         * The event that is
         * emitted from the Dropdown when a choice
         * is clicked. The event contains the value
         * of the choice that was clicked.
         */
        this.choiceMade = new EventEmitter();
    }
    /**
     * @ignore
     */
    toggle(event) {
        event.preventDefault();
        this.isOpen = !this.isOpen;
    }
    onClick(event) {
        if (!this.ref.nativeElement.contains(event.target) ||
            event.target.classList.contains('sprk-c-MastheadMask')) {
            this.hideDropdown();
        }
    }
    onFocusin(event) {
        /* istanbul ignore else: angular focus event isnt setting e.target */
        if (!this.ref.nativeElement.contains(event.target) ||
            event.target.classList.contains('sprk-c-MastheadMask')) {
            this.hideDropdown();
        }
    }
    /**
     * @ignore
     */
    choiceClick(event) {
        this.clearActiveChoices();
        const choiceIndex = event.currentTarget.getAttribute('data-sprk-dropdown-choice-index');
        const clickedChoice = this.choices[choiceIndex];
        if (this.dropdownType === 'informational' ||
            this.dropdownType === 'mastheadSelector') {
            this.setActiveChoice(event);
            this.updateTriggerText(event);
        }
        this.hideDropdown();
        this.choiceMade.emit(clickedChoice['value']);
    }
    /**
     * @ignore
     */
    setActiveChoice(event) {
        const choiceIndex = event.currentTarget.getAttribute('data-sprk-dropdown-choice-index');
        this.choices[choiceIndex]['active'] = true;
    }
    /**
     * @ignore
     */
    updateTriggerText(event) {
        const choiceIndex = event.currentTarget.getAttribute('data-sprk-dropdown-choice-index');
        this.triggerText = this.choices[choiceIndex]['value'];
    }
    /**
     * @ignore
     */
    clearActiveChoices() {
        this.choices.forEach((choice) => {
            choice['active'] = false;
        });
    }
    /**
     * @ignore
     */
    hideDropdown() {
        this.isOpen = false;
    }
    /**
     * @ignore
     */
    getClasses() {
        const classArray = ['sprk-c-Dropdown'];
        if (this.additionalClasses) {
            this.additionalClasses.split(' ').forEach(className => {
                classArray.push(className);
            });
        }
        return classArray.join(' ');
    }
    /**
     * @ignore
     */
    getTriggerClasses() {
        const classArray = [];
        if (this.additionalTriggerClasses) {
            this.additionalTriggerClasses.split(' ').forEach(className => {
                classArray.push(className);
            });
        }
        return classArray.join(' ');
    }
    /**
     * @ignore
     */
    getTriggerTextClasses() {
        const classArray = [''];
        if (this.additionalTriggerTextClasses) {
            this.additionalTriggerTextClasses.split(' ').forEach(className => {
                classArray.push(className);
            });
        }
        return classArray.join(' ');
    }
};
SprkDropdownComponent.ctorParameters = () => [
    { type: ElementRef }
];
__decorate([
    Input(),
    __metadata("design:type", Object)
], SprkDropdownComponent.prototype, "dropdownType", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], SprkDropdownComponent.prototype, "additionalClasses", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], SprkDropdownComponent.prototype, "additionalIconClasses", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], SprkDropdownComponent.prototype, "additionalTriggerClasses", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], SprkDropdownComponent.prototype, "additionalTriggerTextClasses", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], SprkDropdownComponent.prototype, "idString", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], SprkDropdownComponent.prototype, "analyticsString", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], SprkDropdownComponent.prototype, "isOpen", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], SprkDropdownComponent.prototype, "title", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], SprkDropdownComponent.prototype, "selector", void 0);
__decorate([
    Input(),
    __metadata("design:type", Array)
], SprkDropdownComponent.prototype, "choices", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], SprkDropdownComponent.prototype, "triggerIconType", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], SprkDropdownComponent.prototype, "triggerText", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], SprkDropdownComponent.prototype, "screenReaderText", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], SprkDropdownComponent.prototype, "choiceMade", void 0);
__decorate([
    HostListener('document:click', ['$event']),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", void 0)
], SprkDropdownComponent.prototype, "onClick", null);
__decorate([
    HostListener('document:focusin', ['$event']),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", void 0)
], SprkDropdownComponent.prototype, "onFocusin", null);
SprkDropdownComponent = __decorate([
    Component({
        selector: 'sprk-dropdown',
        template: `
    <div
      [ngClass]="{
        'sprk-c-MastheadMask': isOpen && dropdownType === 'mastheadSelector'
      }"
    >
      <div [ngClass]="{ 'sprk-o-Box': dropdownType === 'mastheadSelector' }">
        <a
          sprkLink
          [ngClass]="getTriggerClasses()"
          (click)="toggle($event)"
          [idString]="idString"
          [analyticsString]="analyticsString"
          aria-haspopup="listbox"
          href="#"
          [attr.aria-label]="triggerText ? triggerText : (screenReaderText || 'Choose One')"
        >
          <span [ngClass]="getTriggerTextClasses()">{{ triggerText }}</span>
          <span class="sprk-u-ScreenReaderText">{{ screenReaderText }}</span>
          <sprk-icon
            [iconType]="triggerIconType"
            additionalClasses="sprk-u-mls sprk-c-Icon--stroke-current-color {{
              additionalIconClasses
            }}"
          ></sprk-icon>
        </a>
      </div>

      <div [ngClass]="getClasses()" *ngIf="isOpen">
        <div
          class="sprk-c-Dropdown__header"
          *ngIf="dropdownType === 'mastheadSelector' || title || selector"
        >
          <h2 class="sprk-c-Dropdown__title sprk-b-TypeBodyTwo" *ngIf="title">
            {{ title }}
          </h2>

          <a
            sprkLink
            *ngIf="selector && !title"
            variant="plain"
            class="sprk-o-Stack sprk-o-Stack--split@xxs sprk-o-Stack--center-column sprk-u-Width-100"
            (click)="toggle($event)"
            [attr.aria-label]="title"
            href="#"
          >
            <span
              class="sprk-c-Dropdown__title sprk-b-TypeBodyTwo sprk-o-Stack__item sprk-o-Stack__item--flex@xxs"
              >{{ selector }}</span
            >
            <sprk-icon
              [iconType]="triggerIconType"
              additionalClasses="sprk-c-Icon--stroke-current-color sprk-u-mls sprk-c-Icon--toggle sprk-Stack__item {{
                additionalIconClasses
              }}"
            ></sprk-icon>
          </a>
        </div>

        <ul
          class="sprk-c-Dropdown__links"
          role="listbox"
          [attr.aria-label]="title ? title : (screenReaderText || 'My Choices')"
        >
          <li
            class="sprk-c-Dropdown__item"
            *ngFor="let choice of choices; let i = index"
            [attr.data-sprk-dropdown-choice-index]="i"
            (click)="choiceClick($event)"
            [attr.aria-selected]="choice.active"
            role="option"
          >
            <div *ngIf="choice.content; then content; else link"></div>
            <ng-template #link>
              <a
                sprkLink
                variant="unstyled"
                [attr.href]="choice.href"
                [analyticsString]="choice.analyticsString"
                [ngClass]="{
                  'sprk-c-Dropdown__link': true,
                  'sprk-c-Dropdown__link--active': choice.active
                }"
                [attr.aria-label]="choice.text"
                >{{ choice.text }}
              </a>
            </ng-template>
            <ng-template #content>
              <a
                sprkLink
                variant="unstyled"
                [attr.href]="choice.href"
                [analyticsString]="choice.analyticsString"
                [ngClass]="{
                  'sprk-c-Dropdown__link': true,
                  'sprk-c-Dropdown__link--active': choice.active
                }"
                [attr.aria-label]="choice.content.title"
              >
                <p class="sprk-b-TypeBodyOne">{{ choice.content.title }}</p>
                <p>{{ choice.content.infoLine1 }}</p>
                <p>{{ choice.content.infoLine2 }}</p>
              </a>
            </ng-template>
          </li>
        </ul>
        <ng-content select="[sprkDropdownFooter]"></ng-content>
      </div>
    </div>
  `
    }),
    __metadata("design:paramtypes", [ElementRef])
], SprkDropdownComponent);
export { SprkDropdownComponent };
//# sourceMappingURL=data:application/json;base64,