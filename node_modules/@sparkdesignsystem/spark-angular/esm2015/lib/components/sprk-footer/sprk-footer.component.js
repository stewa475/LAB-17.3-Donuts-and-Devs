import { __decorate, __metadata } from "tslib";
import { Component, Input } from '@angular/core';
let SprkFooterComponent = class SprkFooterComponent {
    /**
     * @ignore
     */
    getClasses() {
        const classArray = [
            'sprk-o-CenteredColumn sprk-o-Stack sprk-o-Stack--misc-b'
        ];
        if (this.additionalClasses) {
            this.additionalClasses.split(' ').forEach(className => {
                classArray.push(className);
            });
        }
        return classArray.join(' ');
    }
};
__decorate([
    Input(),
    __metadata("design:type", String)
], SprkFooterComponent.prototype, "additionalClasses", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], SprkFooterComponent.prototype, "idString", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], SprkFooterComponent.prototype, "globalHeading", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], SprkFooterComponent.prototype, "awardsHeading", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], SprkFooterComponent.prototype, "connectHeading", void 0);
__decorate([
    Input(),
    __metadata("design:type", Array)
], SprkFooterComponent.prototype, "globalLinks", void 0);
__decorate([
    Input(),
    __metadata("design:type", Array)
], SprkFooterComponent.prototype, "localLinks", void 0);
__decorate([
    Input(),
    __metadata("design:type", Array)
], SprkFooterComponent.prototype, "socialLinks", void 0);
__decorate([
    Input(),
    __metadata("design:type", Array)
], SprkFooterComponent.prototype, "awards", void 0);
__decorate([
    Input(),
    __metadata("design:type", Array)
], SprkFooterComponent.prototype, "badgeLinks", void 0);
__decorate([
    Input(),
    __metadata("design:type", Array)
], SprkFooterComponent.prototype, "disclaimerText", void 0);
__decorate([
    Input(),
    __metadata("design:type", Array)
], SprkFooterComponent.prototype, "disclaimerToggle", void 0);
SprkFooterComponent = __decorate([
    Component({
        selector: 'sprk-footer',
        template: `
    <div class="sprk-o-Box sprk-o-Box--large sprk-u-BackgroundColor--gray">
      <footer
        [ngClass]="getClasses()"
        role="contentinfo"
        [attr.data-id]="idString"
      >
        <div
          class="sprk-o-Stack__item sprk-o-Stack sprk-o-Stack--medium sprk-o-Stack--split@m"
        >
          <div
            *ngIf="globalLinks"
            class="sprk-o-Stack__item sprk-o-Stack__item--three-tenths@m sprk-o-Stack sprk-o-Stack--misc-b sprk-o-Box sprk-u-prh"
          >
            <h3 class="sprk-o-Stack__item sprk-b-TypeBodyOne">
              {{ globalHeading }}
            </h3>

            <div
              *ngFor="let item of globalLinks"
              class="sprk-o-Stack__item sprk-o-Stack sprk-o-Stack--medium"
            >
              <div class="sprk-o-Stack__item">
                <a
                  sprkLink
                  variant="plain"
                  href="{{ item.href }}"
                  analyticsString="{{ item.analytics || item.analyticsString }}"
                >
                  <sprk-icon
                    *ngIf="item.icon"
                    iconType="{{ item.icon }}"
                    additionalClasses="{{ item.iconCSS }}"
                  ></sprk-icon>
                  <span *ngIf="item.icon" class="sprk-u-ScreenReaderText">{{
                    item.iconScreenReaderText
                  }}</span>
                  <img
                    *ngIf="item.imgSrc"
                    src="{{ item.imgSrc }}"
                    alt="{{ item.imgAlt }}"
                    class="{{ item.imgCSS }}"
                  />
                </a>
              </div>

              <p class="sprk-o-Stack__item sprk-b-TypeBodyFour">
                {{ item.text }}
              </p>
            </div>
          </div>

          <div
            class="sprk-o-Stack__item sprk-o-Stack__item--seven-tenths@m sprk-o-Stack sprk-o-Stack--medium"
          >
            <div
              *ngIf="localLinks"
              class="sprk-o-Stack__item sprk-o-Stack sprk-o-Stack--medium sprk-o-Stack--split@m"
            >
              <div
                *ngFor="let item of localLinks"
                class="sprk-o-Stack__item sprk-o-Stack__item--third@m sprk-o-Box sprk-u-PaddingRight--a sprk-o-Stack sprk-o-Stack--large"
              >
                <h3 class="sprk-o-Stack__item sprk-b-TypeBodyOne">
                  {{ item.heading }}
                </h3>

                <ul
                  class="sprk-o-Stack__item sprk-o-Stack sprk-o-Stack--misc-a sprk-b-List sprk-b-List--bare"
                >
                  <li
                    class="sprk-o-Stack__item"
                    *ngFor="let link of item.links"
                  >
                    <a
                      sprkLink
                      variant="simple"
                      class="sprk-u-FontWeight--normal"
                      href="{{ link.href }}"
                      analyticsString="{{ link.analyticsString || link.analytics }}"
                    >
                      {{ link.text }}
                    </a>
                  </li>
                </ul>
              </div>
            </div>

            <div
              *ngIf="socialLinks"
              class="sprk-o-Stack__item sprk-o-Stack sprk-o-Stack--large sprk-o-Box"
            >
              <h3 class="sprk-o-Stack__item sprk-b-TypeBodyOne">
                {{ connectHeading }}
              </h3>

              <div
                class="sprk-o-Stack__item sprk-o-Stack sprk-o-Stack--large sprk-o-Stack--split@m"
              >
                <ul
                  *ngIf="socialLinks"
                  class="
                    sprk-o-Stack__item
                    sprk-o-Stack__item--flex@m
                    sprk-o-Stack
                    sprk-o-Stack--split@xxs
                    sprk-o-Stack--medium
                    sprk-b-List
                    sprk-b-List--bare"
                >
                  <li
                    *ngFor="let item of socialLinks"
                    class="sprk-o-Stack__item"
                  >
                    <a
                      sprkLink
                      variant="plain"
                      href="{{ item.href }}"
                      analyticsString="{{ item.analytics || item.analyticsString }}"
                    >
                      <sprk-icon
                        *ngIf="item.icon"
                        iconType="{{ item.icon }}"
                        additionalClasses="{{ item.iconCSS }}"
                      ></sprk-icon>
                      <span *ngIf="item.icon" class="sprk-u-ScreenReaderText">{{
                        item.iconScreenReaderText
                      }}</span>
                    </a>
                  </li>
                </ul>
              </div>
            </div>
          </div>
        </div>

        <span
          class="sprk-c-Divider sprk-u-mvn sprk-u-mhm"
          data-id="divider-1"
        ></span>

        <div
          class="sprk-o-Stack__item sprk-o-Stack sprk-o-Stack--misc-b sprk-o-Box sprk-u-PaddingTop--b"
        >
          <div
            *ngIf="awards"
            class="sprk-o-Stack__item sprk-o-Stack sprk-o-Stack--large"
          >
            <h3 class="sprk-o-Stack__item sprk-b-TypeBodyOne">
              {{ awardsHeading }}
            </h3>

            <div
              class="sprk-o-Stack__item sprk-o-Stack sprk-o-Stack--medium sprk-o-Stack--split@s sprk-u-mbm"
            >
              <div class="sprk-o-Stack__item" *ngFor="let award of awards">
                <a
                  sprkLink
                  variant="plain"
                  class="sprk-o-Stack__item"
                  href="{{ award.href }}"
                  analyticsString="{{ award.analytics || award.analyticsString }}"
                >
                  <img
                    *ngIf="award.imgSrc"
                    src="{{ award.imgSrc }}"
                    alt="{{ award.imgAlt }}"
                    class="{{ award.imgCSS }}"
                  />
                </a>
              </div>
            </div>

            <div
              *ngFor="let toggle of disclaimerToggle"
              class="sprk-o-Stack__item"
            >
              <sprk-toggle
                title="{{ toggle.title }}"
                analyticsString="{{ toggle.analytics || toggle.analyticsString }}"
                iconClass="sprk-c-Icon--stroke-current-color"
                titleFontClass="sprk-b-TypeBodyFour"
              >
                <p class="sprk-b-TypeBodyFour">{{ toggle.body }}</p>
              </sprk-toggle>
            </div>
          </div>

          <div
            *ngIf="disclaimerText"
            class="sprk-o-Stack__item sprk-o-Stack sprk-o-Stack--large"
          >
            <p
              *ngFor="let disclaimer of disclaimerText"
              class="sprk-o-Stack__item sprk-b-TypeBodyFour"
            >
              {{ disclaimer.text }}
            </p>
          </div>

          <ul
            *ngIf="badgeLinks"
            class="
              sprk-o-Stack__item
              sprk-o-Stack__item--flex@m
              sprk-o-Stack
              sprk-o-Stack--split@xxs
              sprk-o-Stack--medium
              sprk-b-List
              sprk-b-List--bare"
          >
            <li *ngFor="let item of badgeLinks" class="sprk-o-Stack__item">
              <a
                sprkLink
                variant="plain"
                href="{{ item.href }}"
                analyticsString="{{ item.analytics || item.analyticsString }}"
              >
                <sprk-icon
                  *ngIf="item.icon"
                  iconType="{{ item.icon }}"
                  additionalClasses="{{ item.iconCSS }}"
                ></sprk-icon>
                <span *ngIf="item.icon" class="sprk-u-ScreenReaderText">{{
                  item.iconScreenReaderText
                }}</span>
              </a>
            </li>
          </ul>
        </div>
      </footer>
    </div>
  `
    })
], SprkFooterComponent);
export { SprkFooterComponent };
//# sourceMappingURL=data:application/json;base64,