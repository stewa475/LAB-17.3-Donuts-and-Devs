import { __decorate, __metadata } from "tslib";
import { Component, Input } from '@angular/core';
let SprkFlagComponent = class SprkFlagComponent {
    constructor() {
        /**
         * The Flag component will use this to decide where
         * the media-slot is rendered in relation to the
         * body-slot. The default is the media-slot is on
         * the left of the body-slot. isReversed="true" places the
         * media-slot on the right of the body-slot.
         */
        this.isReversed = false;
        /**
         * The Flag component will use this to stack
         * the element at the `$sprk-flag-stacked-breakpoint`
         */
        this.isStacked = false;
        /**
         * Determines how much space between the
         * media and the body.
         */
        this.spacing = 'medium';
        /**
         * Determines the vertical alignment of content.
         */
        this.verticalAlignment = 'top';
    }
    /**
     * @ignore
     */
    getClasses() {
        const classArray = ['sprk-o-Flag'];
        if (this.spacing !== 'medium') {
            const spacingClasses = {
                flush: 'sprk-o-Flag--flush',
                tiny: 'sprk-o-Flag--tiny',
                small: 'sprk-o-Flag--small',
                large: 'sprk-o-Flag--large',
                huge: 'sprk-o-Flag--huge',
            };
            classArray.push(spacingClasses[this.spacing]);
        }
        if (this.verticalAlignment !== 'top') {
            const verticalAlignmentClasses = {
                middle: 'sprk-o-Flag--middle',
                bottom: 'sprk-o-Flag--bottom',
            };
            classArray.push(verticalAlignmentClasses[this.verticalAlignment]);
        }
        if (this.isReversed) {
            classArray.push('sprk-o-Flag--rev');
        }
        if (this.isStacked) {
            classArray.push('sprk-o-Flag--stacked');
        }
        if (this.additionalClasses) {
            this.additionalClasses.split(' ').forEach(className => {
                classArray.push(className);
            });
        }
        return classArray.join(' ');
    }
    /**
     * @ignore
     */
    getMediaClasses() {
        const mediaClassArray = ['sprk-o-Flag__figure'];
        if (this.additionalMediaClasses) {
            this.additionalMediaClasses.split(' ').forEach(className => {
                mediaClassArray.push(className);
            });
        }
        return mediaClassArray.join(' ');
    }
    /**
     * @ignore
     */
    getBodyClasses() {
        const bodyClassArray = ['sprk-o-Flag__body'];
        if (this.additionalBodyClasses) {
            this.additionalBodyClasses.split(' ').forEach(className => {
                bodyClassArray.push(className);
            });
        }
        return bodyClassArray.join(' ');
    }
};
__decorate([
    Input(),
    __metadata("design:type", String)
], SprkFlagComponent.prototype, "additionalClasses", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], SprkFlagComponent.prototype, "additionalMediaClasses", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], SprkFlagComponent.prototype, "additionalBodyClasses", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], SprkFlagComponent.prototype, "idString", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], SprkFlagComponent.prototype, "isReversed", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], SprkFlagComponent.prototype, "isStacked", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], SprkFlagComponent.prototype, "spacing", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], SprkFlagComponent.prototype, "verticalAlignment", void 0);
SprkFlagComponent = __decorate([
    Component({
        selector: 'sprk-flag',
        template: `
    <div
      [ngClass]="getClasses()"
      [attr.data-id]="idString"
    >
      <div [ngClass]="getMediaClasses()">
        <ng-content select="[media-slot]"></ng-content>
      </div>
      <div [ngClass]="getBodyClasses()">
        <ng-content select="[body-slot]"></ng-content>
      </div>
    </div>
  `
    })
], SprkFlagComponent);
export { SprkFlagComponent };
//# sourceMappingURL=data:application/json;base64,