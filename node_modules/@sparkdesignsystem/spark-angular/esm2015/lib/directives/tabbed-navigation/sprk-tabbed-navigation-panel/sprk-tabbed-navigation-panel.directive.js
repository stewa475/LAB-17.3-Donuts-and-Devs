import { __decorate, __metadata } from "tslib";
import { Directive, ElementRef, Input, OnInit } from '@angular/core';
let SprkTabbedNavigationPanelDirective = class SprkTabbedNavigationPanelDirective {
    /**
     * @ignore
     */
    constructor(ref) {
        this.ref = ref;
    }
    /**
     * @ignore
     */
    getClasses() {
        const classArray = ['sprk-c-Tabs__content'];
        if (!this.defaultActive) {
            classArray.push('sprk-u-HideWhenJs');
        }
        if (this.additionalClasses) {
            this.additionalClasses.split(' ').forEach(className => {
                classArray.push(className);
            });
        }
        return classArray;
    }
    ngOnInit() {
        this.ref.nativeElement.setAttribute('role', 'tabpanel');
        this.ref.nativeElement.setAttribute('tabindex', '0');
        this.getClasses().forEach(item => {
            this.ref.nativeElement.classList.add(item);
        });
    }
};
SprkTabbedNavigationPanelDirective.ctorParameters = () => [
    { type: ElementRef }
];
__decorate([
    Input(),
    __metadata("design:type", String)
], SprkTabbedNavigationPanelDirective.prototype, "additionalClasses", void 0);
__decorate([
    Input(),
    __metadata("design:type", Boolean)
], SprkTabbedNavigationPanelDirective.prototype, "defaultActive", void 0);
SprkTabbedNavigationPanelDirective = __decorate([
    Directive({
        selector: '[sprkTabbedNavigationPanel]'
    }),
    __metadata("design:paramtypes", [ElementRef])
], SprkTabbedNavigationPanelDirective);
export { SprkTabbedNavigationPanelDirective };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3Byay10YWJiZWQtbmF2aWdhdGlvbi1wYW5lbC5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9Ac3BhcmtkZXNpZ25zeXN0ZW0vc3BhcmstYW5ndWxhci8iLCJzb3VyY2VzIjpbImxpYi9kaXJlY3RpdmVzL3RhYmJlZC1uYXZpZ2F0aW9uL3NwcmstdGFiYmVkLW5hdmlnYXRpb24tcGFuZWwvc3Byay10YWJiZWQtbmF2aWdhdGlvbi1wYW5lbC5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsVUFBVSxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFLckUsSUFBYSxrQ0FBa0MsR0FBL0MsTUFBYSxrQ0FBa0M7SUEwQzdDOztPQUVHO0lBQ0gsWUFBbUIsR0FBZTtRQUFmLFFBQUcsR0FBSCxHQUFHLENBQVk7SUFBRyxDQUFDO0lBOUJ0Qzs7T0FFRztJQUNILFVBQVU7UUFDUixNQUFNLFVBQVUsR0FBYSxDQUFDLHNCQUFzQixDQUFDLENBQUM7UUFFdEQsSUFBSSxDQUFDLElBQUksQ0FBQyxhQUFhLEVBQUU7WUFDdkIsVUFBVSxDQUFDLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDO1NBQ3RDO1FBRUQsSUFBSSxJQUFJLENBQUMsaUJBQWlCLEVBQUU7WUFDMUIsSUFBSSxDQUFDLGlCQUFpQixDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLEVBQUU7Z0JBQ3BELFVBQVUsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7WUFDN0IsQ0FBQyxDQUFDLENBQUM7U0FDSjtRQUVELE9BQU8sVUFBVSxDQUFDO0lBQ3BCLENBQUM7SUFFRCxRQUFRO1FBQ04sSUFBSSxDQUFDLEdBQUcsQ0FBQyxhQUFhLENBQUMsWUFBWSxDQUFDLE1BQU0sRUFBRSxVQUFVLENBQUMsQ0FBQztRQUN4RCxJQUFJLENBQUMsR0FBRyxDQUFDLGFBQWEsQ0FBQyxZQUFZLENBQUMsVUFBVSxFQUFFLEdBQUcsQ0FBQyxDQUFDO1FBRXJELElBQUksQ0FBQyxVQUFVLEVBQUUsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLEVBQUU7WUFDL0IsSUFBSSxDQUFDLEdBQUcsQ0FBQyxhQUFhLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUM3QyxDQUFDLENBQUMsQ0FBQztJQUNMLENBQUM7Q0FLRixDQUFBOztZQUR5QixVQUFVOztBQXRDbEM7SUFEQyxLQUFLLEVBQUU7OzZFQUNrQjtBQU0xQjtJQURDLEtBQUssRUFBRTs7eUVBQ2U7QUFiWixrQ0FBa0M7SUFIOUMsU0FBUyxDQUFDO1FBQ1QsUUFBUSxFQUFFLDZCQUE2QjtLQUN4QyxDQUFDO3FDQThDd0IsVUFBVTtHQTdDdkIsa0NBQWtDLENBOEM5QztTQTlDWSxrQ0FBa0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEaXJlY3RpdmUsIEVsZW1lbnRSZWYsIElucHV0LCBPbkluaXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuQERpcmVjdGl2ZSh7XG4gIHNlbGVjdG9yOiAnW3NwcmtUYWJiZWROYXZpZ2F0aW9uUGFuZWxdJ1xufSlcbmV4cG9ydCBjbGFzcyBTcHJrVGFiYmVkTmF2aWdhdGlvblBhbmVsRGlyZWN0aXZlIGltcGxlbWVudHMgT25Jbml0IHtcbiAgLyoqXG4gICAqIEV4cGVjdHMgYSBzcGFjZSBzZXBhcmF0ZWQgc3RyaW5nXG4gICAqIG9mIGNsYXNzZXMgdG8gYmUgYWRkZWQgdG8gdGhlXG4gICAqIGVsZW1lbnQuXG4gICAqL1xuICBASW5wdXQoKVxuICBhZGRpdGlvbmFsQ2xhc3Nlczogc3RyaW5nO1xuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgUGFuZWwgd2lsbFxuICAgKiBiZSBzZXQgYXMgdGhlIGFjdGl2ZSBQYW5lbCBvbiByZW5kZXIuXG4gICAqL1xuICBASW5wdXQoKVxuICBkZWZhdWx0QWN0aXZlOiBib29sZWFuO1xuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBnZXRDbGFzc2VzKCk6IHN0cmluZ1tdIHtcbiAgICBjb25zdCBjbGFzc0FycmF5OiBzdHJpbmdbXSA9IFsnc3Byay1jLVRhYnNfX2NvbnRlbnQnXTtcblxuICAgIGlmICghdGhpcy5kZWZhdWx0QWN0aXZlKSB7XG4gICAgICBjbGFzc0FycmF5LnB1c2goJ3NwcmstdS1IaWRlV2hlbkpzJyk7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuYWRkaXRpb25hbENsYXNzZXMpIHtcbiAgICAgIHRoaXMuYWRkaXRpb25hbENsYXNzZXMuc3BsaXQoJyAnKS5mb3JFYWNoKGNsYXNzTmFtZSA9PiB7XG4gICAgICAgIGNsYXNzQXJyYXkucHVzaChjbGFzc05hbWUpO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGNsYXNzQXJyYXk7XG4gIH1cblxuICBuZ09uSW5pdCgpOiB2b2lkIHtcbiAgICB0aGlzLnJlZi5uYXRpdmVFbGVtZW50LnNldEF0dHJpYnV0ZSgncm9sZScsICd0YWJwYW5lbCcpO1xuICAgIHRoaXMucmVmLm5hdGl2ZUVsZW1lbnQuc2V0QXR0cmlidXRlKCd0YWJpbmRleCcsICcwJyk7XG5cbiAgICB0aGlzLmdldENsYXNzZXMoKS5mb3JFYWNoKGl0ZW0gPT4ge1xuICAgICAgdGhpcy5yZWYubmF0aXZlRWxlbWVudC5jbGFzc0xpc3QuYWRkKGl0ZW0pO1xuICAgIH0pO1xuICB9XG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBjb25zdHJ1Y3RvcihwdWJsaWMgcmVmOiBFbGVtZW50UmVmKSB7fVxufVxuIl19