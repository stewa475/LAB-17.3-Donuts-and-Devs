import { __decorate, __metadata } from "tslib";
import { Directive, Input, HostBinding, Renderer2, ElementRef, OnInit } from '@angular/core';
let SprkLinkDirective = class SprkLinkDirective {
    /**
     * @ignore
     */
    constructor(renderer, el) {
        this.renderer = renderer;
        this.el = el;
    }
    ngOnInit() {
        if (this.variant !== 'unstyled') {
            this.renderer.addClass(this.el.nativeElement, 'sprk-b-Link');
        }
        if (this.variant === 'simple' || this.variant === 'icon') {
            this.renderer.addClass(this.el.nativeElement, 'sprk-b-Link--simple');
        }
        if (this.variant === 'icon') {
            this.renderer.addClass(this.el.nativeElement, 'sprk-b-Link--has-icon');
        }
        if (this.variant === 'plain') {
            this.renderer.addClass(this.el.nativeElement, 'sprk-b-Link--plain');
        }
    }
};
SprkLinkDirective.ctorParameters = () => [
    { type: Renderer2 },
    { type: ElementRef }
];
__decorate([
    Input(),
    __metadata("design:type", String)
], SprkLinkDirective.prototype, "variant", void 0);
__decorate([
    HostBinding('class.sprk-b-Link--disabled'),
    Input(),
    __metadata("design:type", Boolean)
], SprkLinkDirective.prototype, "isDisabled", void 0);
__decorate([
    HostBinding('attr.data-analytics'),
    Input(),
    __metadata("design:type", String)
], SprkLinkDirective.prototype, "analyticsString", void 0);
__decorate([
    HostBinding('attr.data-id'),
    Input(),
    __metadata("design:type", String)
], SprkLinkDirective.prototype, "idString", void 0);
SprkLinkDirective = __decorate([
    Directive({
        selector: '[sprkLink]'
    }),
    __metadata("design:paramtypes", [Renderer2, ElementRef])
], SprkLinkDirective);
export { SprkLinkDirective };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3Byay1saW5rLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BzcGFya2Rlc2lnbnN5c3RlbS9zcGFyay1hbmd1bGFyLyIsInNvdXJjZXMiOlsibGliL2RpcmVjdGl2ZXMvc3Byay1saW5rL3NwcmstbGluay5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFDTCxTQUFTLEVBQ1QsS0FBSyxFQUNMLFdBQVcsRUFDWCxTQUFTLEVBQ1QsVUFBVSxFQUNWLE1BQU0sRUFDUCxNQUFNLGVBQWUsQ0FBQztBQUt2QixJQUFhLGlCQUFpQixHQUE5QixNQUFhLGlCQUFpQjtJQUM1Qjs7T0FFRztJQUNILFlBQW9CLFFBQW1CLEVBQVUsRUFBYztRQUEzQyxhQUFRLEdBQVIsUUFBUSxDQUFXO1FBQVUsT0FBRSxHQUFGLEVBQUUsQ0FBWTtJQUFJLENBQUM7SUFtQ3BFLFFBQVE7UUFDTixJQUFJLElBQUksQ0FBQyxPQUFPLEtBQUssVUFBVSxFQUFFO1lBQy9CLElBQUksQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsYUFBYSxFQUFFLGFBQWEsQ0FBQyxDQUFDO1NBQzlEO1FBQ0QsSUFBSSxJQUFJLENBQUMsT0FBTyxLQUFLLFFBQVEsSUFBSSxJQUFJLENBQUMsT0FBTyxLQUFLLE1BQU0sRUFBRTtZQUN4RCxJQUFJLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLGFBQWEsRUFBRSxxQkFBcUIsQ0FBQyxDQUFDO1NBQ3RFO1FBQ0QsSUFBSSxJQUFJLENBQUMsT0FBTyxLQUFLLE1BQU0sRUFBRTtZQUMzQixJQUFJLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLGFBQWEsRUFBRSx1QkFBdUIsQ0FBQyxDQUFDO1NBQ3hFO1FBQ0QsSUFBSSxJQUFJLENBQUMsT0FBTyxLQUFLLE9BQU8sRUFBRTtZQUM1QixJQUFJLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLGFBQWEsRUFBRSxvQkFBb0IsQ0FBQyxDQUFDO1NBQ3JFO0lBQ0gsQ0FBQztDQUVGLENBQUE7O1lBbEQrQixTQUFTO1lBQWMsVUFBVTs7QUFLdEQ7SUFBUixLQUFLLEVBQUU7O2tEQUlJO0FBTUg7SUFEUixXQUFXLENBQUMsNkJBQTZCLENBQUM7SUFDMUMsS0FBSyxFQUFFOztxREFBcUI7QUFRcEI7SUFEUixXQUFXLENBQUMscUJBQXFCLENBQUM7SUFDbEMsS0FBSyxFQUFFOzswREFBeUI7QUFVeEI7SUFEUixXQUFXLENBQUMsY0FBYyxDQUFDO0lBQzNCLEtBQUssRUFBRTs7bURBQWtCO0FBckNmLGlCQUFpQjtJQUg3QixTQUFTLENBQUM7UUFDVCxRQUFRLEVBQUUsWUFBWTtLQUN2QixDQUFDO3FDQUs4QixTQUFTLEVBQWMsVUFBVTtHQUpwRCxpQkFBaUIsQ0FzRDdCO1NBdERZLGlCQUFpQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIERpcmVjdGl2ZSxcbiAgSW5wdXQsXG4gIEhvc3RCaW5kaW5nLFxuICBSZW5kZXJlcjIsXG4gIEVsZW1lbnRSZWYsXG4gIE9uSW5pdFxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuQERpcmVjdGl2ZSh7XG4gIHNlbGVjdG9yOiAnW3NwcmtMaW5rXSdcbn0pXG5leHBvcnQgY2xhc3MgU3Bya0xpbmtEaXJlY3RpdmUgaW1wbGVtZW50cyBPbkluaXQge1xuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgY29uc3RydWN0b3IocHJpdmF0ZSByZW5kZXJlcjogUmVuZGVyZXIyLCBwcml2YXRlIGVsOiBFbGVtZW50UmVmKSB7IH1cbiAgLyoqXG4gICAqIFdpbGwgY2F1c2UgdGhlIGFwcHJvcHJpYXRlIHZhcmlhbnQgdHlwZSB0byByZW5kZXIuXG4gICAqIElmIG9taXR0ZWQsIHRoZSBkZWZhdWx0IFNwYXJrIExpbmsgY2xhc3MgaXMgYXBwbGllZC5cbiAgICovXG4gIEBJbnB1dCgpIHZhcmlhbnQ6XG4gICAgfCAnc2ltcGxlJ1xuICAgIHwgJ2ljb24nXG4gICAgfCAndW5zdHlsZWQnXG4gICAgfCAncGxhaW4nO1xuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHdpbGwgc2V0IGRpc2FibGVkIHN0eWxlcyBvbiB0aGUgbGluay5cbiAgICovXG4gIEBIb3N0QmluZGluZygnY2xhc3Muc3Byay1iLUxpbmstLWRpc2FibGVkJylcbiAgQElucHV0KCkgaXNEaXNhYmxlZDogYm9vbGVhbjtcbiAgLyoqXG4gICAqIFRoZSB2YWx1ZSBzdXBwbGllZCB3aWxsIGJlIGFzc2lnbmVkIHRvIHRoZVxuICAgKiBgZGF0YS1hbmFseXRpY3NgIGF0dHJpYnV0ZSBvbiB0aGUgZWxlbWVudC5cbiAgICogSW50ZW5kZWQgZm9yIGFuIG91dHNpZGVcbiAgICogbGlicmFyeSB0byBjYXB0dXJlIGRhdGEuXG4gICAqL1xuICBASG9zdEJpbmRpbmcoJ2F0dHIuZGF0YS1hbmFseXRpY3MnKVxuICBASW5wdXQoKSBhbmFseXRpY3NTdHJpbmc6IHN0cmluZztcbiAgLyoqXG4gICAqIFRoZSB2YWx1ZSBzdXBwbGllZCB3aWxsIGJlIGFzc2lnbmVkXG4gICAqIHRvIHRoZSBgZGF0YS1pZGAgYXR0cmlidXRlIG9uIHRoZVxuICAgKiBjb21wb25lbnQuIFRoaXMgaXMgaW50ZW5kZWQgdG8gYmVcbiAgICogdXNlZCBhcyBhIHNlbGVjdG9yIGZvciBhdXRvbWF0ZWRcbiAgICogdG9vbHMuIFRoaXMgdmFsdWUgc2hvdWxkIGJlIHVuaXF1ZVxuICAgKiBwZXIgcGFnZS5cbiAgICovXG4gIEBIb3N0QmluZGluZygnYXR0ci5kYXRhLWlkJylcbiAgQElucHV0KCkgaWRTdHJpbmc6IHN0cmluZztcblxuICBuZ09uSW5pdCgpIHtcbiAgICBpZiAodGhpcy52YXJpYW50ICE9PSAndW5zdHlsZWQnKSB7XG4gICAgICB0aGlzLnJlbmRlcmVyLmFkZENsYXNzKHRoaXMuZWwubmF0aXZlRWxlbWVudCwgJ3NwcmstYi1MaW5rJyk7XG4gICAgfVxuICAgIGlmICh0aGlzLnZhcmlhbnQgPT09ICdzaW1wbGUnIHx8IHRoaXMudmFyaWFudCA9PT0gJ2ljb24nKSB7XG4gICAgICB0aGlzLnJlbmRlcmVyLmFkZENsYXNzKHRoaXMuZWwubmF0aXZlRWxlbWVudCwgJ3NwcmstYi1MaW5rLS1zaW1wbGUnKTtcbiAgICB9XG4gICAgaWYgKHRoaXMudmFyaWFudCA9PT0gJ2ljb24nKSB7XG4gICAgICB0aGlzLnJlbmRlcmVyLmFkZENsYXNzKHRoaXMuZWwubmF0aXZlRWxlbWVudCwgJ3NwcmstYi1MaW5rLS1oYXMtaWNvbicpO1xuICAgIH1cbiAgICBpZiAodGhpcy52YXJpYW50ID09PSAncGxhaW4nKSB7XG4gICAgICB0aGlzLnJlbmRlcmVyLmFkZENsYXNzKHRoaXMuZWwubmF0aXZlRWxlbWVudCwgJ3NwcmstYi1MaW5rLS1wbGFpbicpO1xuICAgIH1cbiAgfVxuXG59XG4iXX0=