import { __decorate, __metadata } from "tslib";
import { Directive, ElementRef, OnInit, HostListener, } from '@angular/core';
let SprkInputDirective = class SprkInputDirective {
    /**
     * @ignore
     */
    constructor(ref) {
        this.ref = ref;
    }
    /**
     * @ignore
     */
    OnChange($event) {
        const value = this.ref.nativeElement.value;
        if (value.length > 0) {
            this.ref.nativeElement.classList.add('sprk-b-Input--has-floating-label');
        }
        else {
            this.ref.nativeElement.classList.remove('sprk-b-Input--has-floating-label');
        }
    }
    ngOnInit() {
        if (this.ref.nativeElement.nodeName === 'SELECT') {
            this.ref.nativeElement.classList.add('sprk-b-Select');
        }
        else if (this.ref.nativeElement.nodeName === 'TEXTAREA') {
            this.ref.nativeElement.classList.add('sprk-b-TextInput');
            this.ref.nativeElement.classList.add('sprk-b-TextArea');
        }
        else {
            this.ref.nativeElement.classList.add('sprk-b-TextInput');
        }
        if (this.ref.nativeElement.value.length > 0) {
            this.ref.nativeElement.classList.add('sprk-b-Input--has-floating-label');
        }
        this.ref.nativeElement.classList.add('sprk-u-Width-100');
    }
};
SprkInputDirective.ctorParameters = () => [
    { type: ElementRef }
];
__decorate([
    HostListener('change', ['$event']),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", void 0)
], SprkInputDirective.prototype, "OnChange", null);
SprkInputDirective = __decorate([
    Directive({
        selector: '[sprkInput]'
    }),
    __metadata("design:paramtypes", [ElementRef])
], SprkInputDirective);
export { SprkInputDirective };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3Byay1pbnB1dC5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9Ac3BhcmtkZXNpZ25zeXN0ZW0vc3BhcmstYW5ndWxhci8iLCJzb3VyY2VzIjpbImxpYi9kaXJlY3RpdmVzL2lucHV0cy9zcHJrLWlucHV0L3NwcmstaW5wdXQuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQ0wsU0FBUyxFQUNULFVBQVUsRUFDVixNQUFNLEVBQ04sWUFBWSxHQUNiLE1BQU0sZUFBZSxDQUFDO0FBS3ZCLElBQWEsa0JBQWtCLEdBQS9CLE1BQWEsa0JBQWtCO0lBQzdCOztPQUVHO0lBQ0gsWUFBbUIsR0FBZTtRQUFmLFFBQUcsR0FBSCxHQUFHLENBQVk7SUFBRyxDQUFDO0lBRXRDOztPQUVHO0lBRUgsUUFBUSxDQUFDLE1BQU07UUFDYixNQUFNLEtBQUssR0FBSSxJQUFJLENBQUMsR0FBRyxDQUFDLGFBQWtDLENBQUMsS0FBSyxDQUFDO1FBQ2pFLElBQUksS0FBSyxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUU7WUFDcEIsSUFBSSxDQUFDLEdBQUcsQ0FBQyxhQUFhLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxrQ0FBa0MsQ0FBQyxDQUFDO1NBQzFFO2FBQU07WUFDTCxJQUFJLENBQUMsR0FBRyxDQUFDLGFBQWEsQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLGtDQUFrQyxDQUFDLENBQUM7U0FDN0U7SUFDSCxDQUFDO0lBRUQsUUFBUTtRQUNOLElBQUksSUFBSSxDQUFDLEdBQUcsQ0FBQyxhQUFhLENBQUMsUUFBUSxLQUFLLFFBQVEsRUFBRTtZQUNoRCxJQUFJLENBQUMsR0FBRyxDQUFDLGFBQWEsQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLGVBQWUsQ0FBQyxDQUFDO1NBQ3ZEO2FBQU0sSUFBSSxJQUFJLENBQUMsR0FBRyxDQUFDLGFBQWEsQ0FBQyxRQUFRLEtBQUssVUFBVSxFQUFFO1lBQ3pELElBQUksQ0FBQyxHQUFHLENBQUMsYUFBYSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsa0JBQWtCLENBQUMsQ0FBQztZQUN6RCxJQUFJLENBQUMsR0FBRyxDQUFDLGFBQWEsQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLGlCQUFpQixDQUFDLENBQUM7U0FDekQ7YUFBTTtZQUNMLElBQUksQ0FBQyxHQUFHLENBQUMsYUFBYSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsa0JBQWtCLENBQUMsQ0FBQztTQUMxRDtRQUVELElBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxhQUFrQyxDQUFDLEtBQUssQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFHO1lBQ2xFLElBQUksQ0FBQyxHQUFHLENBQUMsYUFBYSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsa0NBQWtDLENBQUMsQ0FBQztTQUMxRTtRQUNELElBQUksQ0FBQyxHQUFHLENBQUMsYUFBYSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsa0JBQWtCLENBQUMsQ0FBQztJQUMzRCxDQUFDO0NBQ0YsQ0FBQTs7WUE5QnlCLFVBQVU7O0FBTWxDO0lBREMsWUFBWSxDQUFDLFFBQVEsRUFBRSxDQUFDLFFBQVEsQ0FBQyxDQUFDOzs7O2tEQVFsQztBQWpCVSxrQkFBa0I7SUFIOUIsU0FBUyxDQUFDO1FBQ1QsUUFBUSxFQUFFLGFBQWE7S0FDeEIsQ0FBQztxQ0FLd0IsVUFBVTtHQUp2QixrQkFBa0IsQ0FrQzlCO1NBbENZLGtCQUFrQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIERpcmVjdGl2ZSxcbiAgRWxlbWVudFJlZixcbiAgT25Jbml0LFxuICBIb3N0TGlzdGVuZXIsXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5ARGlyZWN0aXZlKHtcbiAgc2VsZWN0b3I6ICdbc3Bya0lucHV0XSdcbn0pXG5leHBvcnQgY2xhc3MgU3Bya0lucHV0RGlyZWN0aXZlIGltcGxlbWVudHMgT25Jbml0IHtcbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGNvbnN0cnVjdG9yKHB1YmxpYyByZWY6IEVsZW1lbnRSZWYpIHt9XG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIEBIb3N0TGlzdGVuZXIoJ2NoYW5nZScsIFsnJGV2ZW50J10pXG4gIE9uQ2hhbmdlKCRldmVudCkge1xuICAgIGNvbnN0IHZhbHVlID0gKHRoaXMucmVmLm5hdGl2ZUVsZW1lbnQgYXMgSFRNTElucHV0RWxlbWVudCkudmFsdWU7XG4gICAgaWYgKHZhbHVlLmxlbmd0aCA+IDApIHtcbiAgICAgIHRoaXMucmVmLm5hdGl2ZUVsZW1lbnQuY2xhc3NMaXN0LmFkZCgnc3Byay1iLUlucHV0LS1oYXMtZmxvYXRpbmctbGFiZWwnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5yZWYubmF0aXZlRWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKCdzcHJrLWItSW5wdXQtLWhhcy1mbG9hdGluZy1sYWJlbCcpO1xuICAgIH1cbiAgfVxuXG4gIG5nT25Jbml0KCk6IHZvaWQge1xuICAgIGlmICh0aGlzLnJlZi5uYXRpdmVFbGVtZW50Lm5vZGVOYW1lID09PSAnU0VMRUNUJykge1xuICAgICAgdGhpcy5yZWYubmF0aXZlRWxlbWVudC5jbGFzc0xpc3QuYWRkKCdzcHJrLWItU2VsZWN0Jyk7XG4gICAgfSBlbHNlIGlmICh0aGlzLnJlZi5uYXRpdmVFbGVtZW50Lm5vZGVOYW1lID09PSAnVEVYVEFSRUEnKSB7XG4gICAgICB0aGlzLnJlZi5uYXRpdmVFbGVtZW50LmNsYXNzTGlzdC5hZGQoJ3NwcmstYi1UZXh0SW5wdXQnKTtcbiAgICAgIHRoaXMucmVmLm5hdGl2ZUVsZW1lbnQuY2xhc3NMaXN0LmFkZCgnc3Byay1iLVRleHRBcmVhJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMucmVmLm5hdGl2ZUVsZW1lbnQuY2xhc3NMaXN0LmFkZCgnc3Byay1iLVRleHRJbnB1dCcpO1xuICAgIH1cblxuICAgIGlmICgodGhpcy5yZWYubmF0aXZlRWxlbWVudCBhcyBIVE1MSW5wdXRFbGVtZW50KS52YWx1ZS5sZW5ndGggPiAwICkge1xuICAgICAgdGhpcy5yZWYubmF0aXZlRWxlbWVudC5jbGFzc0xpc3QuYWRkKCdzcHJrLWItSW5wdXQtLWhhcy1mbG9hdGluZy1sYWJlbCcpO1xuICAgIH1cbiAgICB0aGlzLnJlZi5uYXRpdmVFbGVtZW50LmNsYXNzTGlzdC5hZGQoJ3NwcmstdS1XaWR0aC0xMDAnKTtcbiAgfVxufVxuIl19