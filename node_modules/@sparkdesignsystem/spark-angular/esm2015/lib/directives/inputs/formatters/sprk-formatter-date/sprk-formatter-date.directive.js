import { __decorate, __metadata } from "tslib";
import { Directive, ElementRef, HostListener } from '@angular/core';
let SprkFormatterDateDirective = class SprkFormatterDateDirective {
    constructor(ref) {
        this.ref = ref;
    }
    onFocus(value) {
        this.ref.nativeElement.value = this.formatDate(value);
    }
    formatDate(value) {
        const m = value.match(
        // tslint:disable-next-line:max-line-length
        /^(((0[13578]|1[02])([/-]?)(0[1-9]|[12]\d|3[01])|(0[469]|11)([/-]?)(0[1-9]|[12]\d|30)|02([/-]?)((0[1-9])|[12]\d))(\4|\7|\9)[12]\d{3})?$/);
        let newValue = '';
        const cleanValue = value.replace(/[/-]/g, '');
        if (m) {
            for (let i = 0; i < cleanValue.length; i += 1) {
                if (i === 1 || i === 3) {
                    newValue += `${cleanValue[i]}/`;
                }
                else {
                    newValue += cleanValue[i];
                }
            }
            return newValue;
        }
        else {
            return value;
        }
    }
};
SprkFormatterDateDirective.ctorParameters = () => [
    { type: ElementRef }
];
__decorate([
    HostListener('input', ['$event.target.value']),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", void 0)
], SprkFormatterDateDirective.prototype, "onFocus", null);
SprkFormatterDateDirective = __decorate([
    Directive({
        selector: '[sprkFormatterDate]'
    }),
    __metadata("design:paramtypes", [ElementRef])
], SprkFormatterDateDirective);
export { SprkFormatterDateDirective };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3Byay1mb3JtYXR0ZXItZGF0ZS5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9Ac3BhcmtkZXNpZ25zeXN0ZW0vc3BhcmstYW5ndWxhci8iLCJzb3VyY2VzIjpbImxpYi9kaXJlY3RpdmVzL2lucHV0cy9mb3JtYXR0ZXJzL3NwcmstZm9ybWF0dGVyLWRhdGUvc3Byay1mb3JtYXR0ZXItZGF0ZS5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsVUFBVSxFQUFFLFlBQVksRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUtwRSxJQUFhLDBCQUEwQixHQUF2QyxNQUFhLDBCQUEwQjtJQUNyQyxZQUFtQixHQUFlO1FBQWYsUUFBRyxHQUFILEdBQUcsQ0FBWTtJQUFHLENBQUM7SUFHdEMsT0FBTyxDQUFDLEtBQUs7UUFDWCxJQUFJLENBQUMsR0FBRyxDQUFDLGFBQWEsQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUN4RCxDQUFDO0lBRUQsVUFBVSxDQUFDLEtBQUs7UUFDZCxNQUFNLENBQUMsR0FBRyxLQUFLLENBQUMsS0FBSztRQUNuQiwyQ0FBMkM7UUFDM0Msd0lBQXdJLENBQ3pJLENBQUM7UUFFRixJQUFJLFFBQVEsR0FBRyxFQUFFLENBQUM7UUFDbEIsTUFBTSxVQUFVLEdBQUcsS0FBSyxDQUFDLE9BQU8sQ0FBQyxPQUFPLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFFOUMsSUFBSSxDQUFDLEVBQUU7WUFDTCxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsVUFBVSxDQUFDLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxFQUFFO2dCQUM3QyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRTtvQkFDdEIsUUFBUSxJQUFJLEdBQUcsVUFBVSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUM7aUJBQ2pDO3FCQUFNO29CQUNMLFFBQVEsSUFBSSxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUM7aUJBQzNCO2FBQ0Y7WUFDRCxPQUFPLFFBQVEsQ0FBQztTQUNqQjthQUFNO1lBQ0wsT0FBTyxLQUFLLENBQUM7U0FDZDtJQUNILENBQUM7Q0FDRixDQUFBOztZQTdCeUIsVUFBVTs7QUFHbEM7SUFEQyxZQUFZLENBQUMsT0FBTyxFQUFFLENBQUMscUJBQXFCLENBQUMsQ0FBQzs7Ozt5REFHOUM7QUFOVSwwQkFBMEI7SUFIdEMsU0FBUyxDQUFDO1FBQ1QsUUFBUSxFQUFFLHFCQUFxQjtLQUNoQyxDQUFDO3FDQUV3QixVQUFVO0dBRHZCLDBCQUEwQixDQThCdEM7U0E5QlksMEJBQTBCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGlyZWN0aXZlLCBFbGVtZW50UmVmLCBIb3N0TGlzdGVuZXIgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuQERpcmVjdGl2ZSh7XG4gIHNlbGVjdG9yOiAnW3NwcmtGb3JtYXR0ZXJEYXRlXSdcbn0pXG5leHBvcnQgY2xhc3MgU3Bya0Zvcm1hdHRlckRhdGVEaXJlY3RpdmUge1xuICBjb25zdHJ1Y3RvcihwdWJsaWMgcmVmOiBFbGVtZW50UmVmKSB7fVxuXG4gIEBIb3N0TGlzdGVuZXIoJ2lucHV0JywgWyckZXZlbnQudGFyZ2V0LnZhbHVlJ10pXG4gIG9uRm9jdXModmFsdWUpIHtcbiAgICB0aGlzLnJlZi5uYXRpdmVFbGVtZW50LnZhbHVlID0gdGhpcy5mb3JtYXREYXRlKHZhbHVlKTtcbiAgfVxuXG4gIGZvcm1hdERhdGUodmFsdWUpOiBzdHJpbmcge1xuICAgIGNvbnN0IG0gPSB2YWx1ZS5tYXRjaChcbiAgICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTptYXgtbGluZS1sZW5ndGhcbiAgICAgIC9eKCgoMFsxMzU3OF18MVswMl0pKFsvLV0/KSgwWzEtOV18WzEyXVxcZHwzWzAxXSl8KDBbNDY5XXwxMSkoWy8tXT8pKDBbMS05XXxbMTJdXFxkfDMwKXwwMihbLy1dPykoKDBbMS05XSl8WzEyXVxcZCkpKFxcNHxcXDd8XFw5KVsxMl1cXGR7M30pPyQvXG4gICAgKTtcblxuICAgIGxldCBuZXdWYWx1ZSA9ICcnO1xuICAgIGNvbnN0IGNsZWFuVmFsdWUgPSB2YWx1ZS5yZXBsYWNlKC9bLy1dL2csICcnKTtcblxuICAgIGlmIChtKSB7XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNsZWFuVmFsdWUubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgaWYgKGkgPT09IDEgfHwgaSA9PT0gMykge1xuICAgICAgICAgIG5ld1ZhbHVlICs9IGAke2NsZWFuVmFsdWVbaV19L2A7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgbmV3VmFsdWUgKz0gY2xlYW5WYWx1ZVtpXTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIG5ld1ZhbHVlO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gdmFsdWU7XG4gICAgfVxuICB9XG59XG4iXX0=