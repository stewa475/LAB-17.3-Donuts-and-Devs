import { __decorate, __metadata } from "tslib";
import { Directive, ElementRef, OnInit, Input, HostBinding, OnChanges, Renderer2, AfterViewInit, SimpleChanges, } from '@angular/core';
let SprkButtonDirective = class SprkButtonDirective {
    /**
     * @ignore
     */
    constructor(ref, renderer) {
        this.ref = ref;
        this.renderer = renderer;
        /**
         * Will show a spinner inside the
         * button if set to `true`.
         */
        this.isSpinning = false;
        /**
         * Optional string value that is
         * set for the `aria-label`
         * when `isSpinning` is `true`.
         */
        this.spinningAriaLabel = 'Loading';
        /**
         *  Determines the coresponding button style.
         */
        this.variant = 'primary';
        /**
         * @ignore
         */
        this.setSpinning = (element) => {
            const el = element;
            const width = element.offsetWidth;
            const ariaLabel = this.spinningAriaLabel;
            let spinnerClass = 'sprk-c-Spinner sprk-c-Spinner--circle';
            if (el.classList.contains('sprk-c-Button--secondary') ||
                this.variant === 'secondary') {
                spinnerClass += ' sprk-c-Spinner--dark';
            }
            this.renderer.setAttribute(el, 'data-sprk-spinner-text', el.textContent);
            this.renderer.setAttribute(el, 'aria-label', ariaLabel);
            el.innerHTML = `<div class="${spinnerClass}"></div>`;
            el.setAttribute('data-sprk-has-spinner', 'true');
            this.renderer.setAttribute(el, 'data-sprk-has-spinner', 'true');
            this.renderer.setAttribute(el, 'style', `width: ${width}px`);
        };
    }
    ngOnInit() {
        if (this.variant === 'secondary') {
            this.renderer.addClass(this.ref.nativeElement, 'sprk-c-Button--secondary');
        }
        if (this.variant === 'tertiary') {
            this.renderer.addClass(this.ref.nativeElement, 'sprk-c-Button--tertiary');
        }
    }
    /**
     * Add spinner only after view has loaded.
     * This is to allow time for the text
     * content of the button to load so that
     * the width value accounts for that text.
     */
    ngAfterViewInit() {
        if (this.isSpinning) {
            this.setSpinning(this.ref.nativeElement);
        }
    }
    ngOnChanges(changes) {
        if (this.isSpinning && !changes['isSpinning'].isFirstChange()) {
            this.setSpinning(this.ref.nativeElement);
        }
    }
};
SprkButtonDirective.ctorParameters = () => [
    { type: ElementRef },
    { type: Renderer2 }
];
__decorate([
    Input(),
    __metadata("design:type", Object)
], SprkButtonDirective.prototype, "isSpinning", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], SprkButtonDirective.prototype, "spinningAriaLabel", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], SprkButtonDirective.prototype, "variant", void 0);
__decorate([
    HostBinding('class.sprk-c-Button'),
    __metadata("design:type", Object)
], SprkButtonDirective.prototype, "true", void 0);
__decorate([
    HostBinding('attr.data-id'),
    Input(),
    __metadata("design:type", String)
], SprkButtonDirective.prototype, "idString", void 0);
__decorate([
    HostBinding('attr.data-analytics'),
    Input(),
    __metadata("design:type", String)
], SprkButtonDirective.prototype, "analyticsString", void 0);
SprkButtonDirective = __decorate([
    Directive({
        selector: '[sprkButton]'
    }),
    __metadata("design:paramtypes", [ElementRef, Renderer2])
], SprkButtonDirective);
export { SprkButtonDirective };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3Byay1idXR0b24uZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHNwYXJrZGVzaWduc3lzdGVtL3NwYXJrLWFuZ3VsYXIvIiwic291cmNlcyI6WyJsaWIvZGlyZWN0aXZlcy9pbnB1dHMvc3Byay1idXR0b24vc3Byay1idXR0b24uZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQ0wsU0FBUyxFQUNULFVBQVUsRUFDVixNQUFNLEVBQ04sS0FBSyxFQUNMLFdBQVcsRUFDWCxTQUFTLEVBQ1QsU0FBUyxFQUNULGFBQWEsRUFDYixhQUFhLEdBQ2QsTUFBTSxlQUFlLENBQUM7QUFLdkIsSUFBYSxtQkFBbUIsR0FBaEMsTUFBYSxtQkFBbUI7SUFDOUI7O09BRUc7SUFDSCxZQUFtQixHQUFlLEVBQVUsUUFBbUI7UUFBNUMsUUFBRyxHQUFILEdBQUcsQ0FBWTtRQUFVLGFBQVEsR0FBUixRQUFRLENBQVc7UUFFL0Q7OztXQUdHO1FBQ00sZUFBVSxHQUFHLEtBQUssQ0FBQztRQUU1Qjs7OztXQUlHO1FBQ00sc0JBQWlCLEdBQUcsU0FBUyxDQUFDO1FBRXZDOztXQUVHO1FBQ00sWUFBTyxHQUF3QyxTQUFTLENBQUM7UUEwRGxFOztXQUVHO1FBQ0gsZ0JBQVcsR0FBRyxDQUFDLE9BQU8sRUFBRSxFQUFFO1lBQ3hCLE1BQU0sRUFBRSxHQUFHLE9BQU8sQ0FBQztZQUNuQixNQUFNLEtBQUssR0FBRyxPQUFPLENBQUMsV0FBVyxDQUFDO1lBQ2xDLE1BQU0sU0FBUyxHQUFHLElBQUksQ0FBQyxpQkFBaUIsQ0FBQztZQUN6QyxJQUFJLFlBQVksR0FBRyx1Q0FBdUMsQ0FBQztZQUMzRCxJQUNJLEVBQUUsQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDLDBCQUEwQixDQUFDO2dCQUNqRCxJQUFJLENBQUMsT0FBTyxLQUFLLFdBQVcsRUFBRTtnQkFDaEMsWUFBWSxJQUFJLHVCQUF1QixDQUFDO2FBQ3pDO1lBQ0QsSUFBSSxDQUFDLFFBQVEsQ0FBQyxZQUFZLENBQ3hCLEVBQUUsRUFDRix3QkFBd0IsRUFDeEIsRUFBRSxDQUFDLFdBQVcsQ0FDZixDQUFDO1lBQ0YsSUFBSSxDQUFDLFFBQVEsQ0FBQyxZQUFZLENBQ3hCLEVBQUUsRUFDRixZQUFZLEVBQ1osU0FBUyxDQUNWLENBQUM7WUFDRixFQUFFLENBQUMsU0FBUyxHQUFHLGVBQWUsWUFBWSxVQUFVLENBQUM7WUFDckQsRUFBRSxDQUFDLFlBQVksQ0FBQyx1QkFBdUIsRUFBRSxNQUFNLENBQUMsQ0FBQztZQUNqRCxJQUFJLENBQUMsUUFBUSxDQUFDLFlBQVksQ0FDeEIsRUFBRSxFQUNGLHVCQUF1QixFQUN2QixNQUFNLENBQ1AsQ0FBQztZQUNGLElBQUksQ0FBQyxRQUFRLENBQUMsWUFBWSxDQUN4QixFQUFFLEVBQ0YsT0FBTyxFQUNQLFVBQVUsS0FBSyxJQUFJLENBQ3BCLENBQUM7UUFDSixDQUFDLENBQUE7SUEvR2lFLENBQUM7SUEyQ25FLFFBQVE7UUFDTixJQUFJLElBQUksQ0FBQyxPQUFPLEtBQUssV0FBVyxFQUFFO1lBQ2hDLElBQUksQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUNwQixJQUFJLENBQUMsR0FBRyxDQUFDLGFBQWEsRUFDdEIsMEJBQTBCLENBQzNCLENBQUM7U0FDSDtRQUNELElBQUksSUFBSSxDQUFDLE9BQU8sS0FBSyxVQUFVLEVBQUU7WUFDL0IsSUFBSSxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQ3BCLElBQUksQ0FBQyxHQUFHLENBQUMsYUFBYSxFQUN0Qix5QkFBeUIsQ0FDMUIsQ0FBQztTQUNIO0lBQ0gsQ0FBQztJQUVEOzs7OztPQUtHO0lBQ0gsZUFBZTtRQUNiLElBQUksSUFBSSxDQUFDLFVBQVUsRUFBRTtZQUNuQixJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsYUFBYSxDQUFDLENBQUM7U0FDMUM7SUFDSCxDQUFDO0lBRUQsV0FBVyxDQUFDLE9BQXNCO1FBQ2hDLElBQUksSUFBSSxDQUFDLFVBQVUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxZQUFZLENBQUMsQ0FBQyxhQUFhLEVBQUUsRUFBRTtZQUM3RCxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsYUFBYSxDQUFDLENBQUM7U0FDMUM7SUFDSCxDQUFDO0NBc0NGLENBQUE7O1lBaEh5QixVQUFVO1lBQW9CLFNBQVM7O0FBTXREO0lBQVIsS0FBSyxFQUFFOzt1REFBb0I7QUFPbkI7SUFBUixLQUFLLEVBQUU7OzhEQUErQjtBQUs5QjtJQUFSLEtBQUssRUFBRTs7b0RBQTBEO0FBRzlCO0lBQW5DLFdBQVcsQ0FBQyxxQkFBcUIsQ0FBQzs7aURBQU07QUFXaEM7SUFEUixXQUFXLENBQUMsY0FBYyxDQUFDO0lBQzNCLEtBQUssRUFBRTs7cURBQWtCO0FBU2pCO0lBRFIsV0FBVyxDQUFDLHFCQUFxQixDQUFDO0lBQ2xDLEtBQUssRUFBRTs7NERBQXlCO0FBN0N0QixtQkFBbUI7SUFIL0IsU0FBUyxDQUFDO1FBQ1QsUUFBUSxFQUFFLGNBQWM7S0FDekIsQ0FBQztxQ0FLd0IsVUFBVSxFQUFvQixTQUFTO0dBSnBELG1CQUFtQixDQW9IL0I7U0FwSFksbUJBQW1CIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgRGlyZWN0aXZlLFxuICBFbGVtZW50UmVmLFxuICBPbkluaXQsXG4gIElucHV0LFxuICBIb3N0QmluZGluZyxcbiAgT25DaGFuZ2VzLFxuICBSZW5kZXJlcjIsXG4gIEFmdGVyVmlld0luaXQsXG4gIFNpbXBsZUNoYW5nZXMsXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5ARGlyZWN0aXZlKHtcbiAgc2VsZWN0b3I6ICdbc3Bya0J1dHRvbl0nXG59KVxuZXhwb3J0IGNsYXNzIFNwcmtCdXR0b25EaXJlY3RpdmUgaW1wbGVtZW50cyBPbkluaXQsIE9uQ2hhbmdlcywgQWZ0ZXJWaWV3SW5pdCB7XG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBjb25zdHJ1Y3RvcihwdWJsaWMgcmVmOiBFbGVtZW50UmVmLCBwcml2YXRlIHJlbmRlcmVyOiBSZW5kZXJlcjIpIHt9XG5cbiAgLyoqXG4gICAqIFdpbGwgc2hvdyBhIHNwaW5uZXIgaW5zaWRlIHRoZVxuICAgKiBidXR0b24gaWYgc2V0IHRvIGB0cnVlYC5cbiAgICovXG4gIEBJbnB1dCgpIGlzU3Bpbm5pbmcgPSBmYWxzZTtcblxuICAvKipcbiAgICogT3B0aW9uYWwgc3RyaW5nIHZhbHVlIHRoYXQgaXNcbiAgICogc2V0IGZvciB0aGUgYGFyaWEtbGFiZWxgXG4gICAqIHdoZW4gYGlzU3Bpbm5pbmdgIGlzIGB0cnVlYC5cbiAgICovXG4gIEBJbnB1dCgpIHNwaW5uaW5nQXJpYUxhYmVsID0gJ0xvYWRpbmcnO1xuXG4gIC8qKlxuICAgKiAgRGV0ZXJtaW5lcyB0aGUgY29yZXNwb25kaW5nIGJ1dHRvbiBzdHlsZS5cbiAgICovXG4gIEBJbnB1dCgpIHZhcmlhbnQ6ICdwcmltYXJ5J3wgJ3NlY29uZGFyeScgfCAndGVydGlhcnknID0gJ3ByaW1hcnknO1xuXG4gIC8vIEFsd2F5cyBzZXQgdGhlIGJ1dHRvbiBjbGFzcyBvbiB0aGUgZWxlbWVudFxuICBASG9zdEJpbmRpbmcoJ2NsYXNzLnNwcmstYy1CdXR0b24nKSB0cnVlO1xuXG4gIC8qKlxuICAgKiBUaGUgdmFsdWUgc3VwcGxpZWQgd2lsbCBiZSBhc3NpZ25lZFxuICAgKiB0byB0aGUgYGRhdGEtaWRgIGF0dHJpYnV0ZSBvbiB0aGVcbiAgICogY29tcG9uZW50LiBUaGlzIGlzIGludGVuZGVkIHRvIGJlXG4gICAqIHVzZWQgYXMgYSBzZWxlY3RvciBmb3IgYXV0b21hdGVkXG4gICAqIHRvb2xzLiBUaGlzIHZhbHVlIHNob3VsZCBiZSB1bmlxdWVcbiAgICogcGVyIHBhZ2UuXG4gICAqL1xuICBASG9zdEJpbmRpbmcoJ2F0dHIuZGF0YS1pZCcpXG4gIEBJbnB1dCgpIGlkU3RyaW5nOiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIFRoZSB2YWx1ZSBzdXBwbGllZCB3aWxsIGJlIGFzc2lnbmVkIHRvIHRoZVxuICAgKiBgZGF0YS1hbmFseXRpY3NgIGF0dHJpYnV0ZSBvbiB0aGUgZWxlbWVudC5cbiAgICogSW50ZW5kZWQgZm9yIGFuIG91dHNpZGVcbiAgICogbGlicmFyeSB0byBjYXB0dXJlIGRhdGEuXG4gICAqL1xuICBASG9zdEJpbmRpbmcoJ2F0dHIuZGF0YS1hbmFseXRpY3MnKVxuICBASW5wdXQoKSBhbmFseXRpY3NTdHJpbmc6IHN0cmluZztcblxuICBuZ09uSW5pdCgpOiB2b2lkIHtcbiAgICBpZiAodGhpcy52YXJpYW50ID09PSAnc2Vjb25kYXJ5Jykge1xuICAgICAgdGhpcy5yZW5kZXJlci5hZGRDbGFzcyhcbiAgICAgICAgdGhpcy5yZWYubmF0aXZlRWxlbWVudCxcbiAgICAgICAgJ3NwcmstYy1CdXR0b24tLXNlY29uZGFyeSdcbiAgICAgICk7XG4gICAgfVxuICAgIGlmICh0aGlzLnZhcmlhbnQgPT09ICd0ZXJ0aWFyeScpIHtcbiAgICAgIHRoaXMucmVuZGVyZXIuYWRkQ2xhc3MoXG4gICAgICAgIHRoaXMucmVmLm5hdGl2ZUVsZW1lbnQsXG4gICAgICAgICdzcHJrLWMtQnV0dG9uLS10ZXJ0aWFyeSdcbiAgICAgICk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEFkZCBzcGlubmVyIG9ubHkgYWZ0ZXIgdmlldyBoYXMgbG9hZGVkLlxuICAgKiBUaGlzIGlzIHRvIGFsbG93IHRpbWUgZm9yIHRoZSB0ZXh0XG4gICAqIGNvbnRlbnQgb2YgdGhlIGJ1dHRvbiB0byBsb2FkIHNvIHRoYXRcbiAgICogdGhlIHdpZHRoIHZhbHVlIGFjY291bnRzIGZvciB0aGF0IHRleHQuXG4gICAqL1xuICBuZ0FmdGVyVmlld0luaXQoKSB7XG4gICAgaWYgKHRoaXMuaXNTcGlubmluZykge1xuICAgICAgdGhpcy5zZXRTcGlubmluZyh0aGlzLnJlZi5uYXRpdmVFbGVtZW50KTtcbiAgICB9XG4gIH1cblxuICBuZ09uQ2hhbmdlcyhjaGFuZ2VzOiBTaW1wbGVDaGFuZ2VzKSB7XG4gICAgaWYgKHRoaXMuaXNTcGlubmluZyAmJiAhY2hhbmdlc1snaXNTcGlubmluZyddLmlzRmlyc3RDaGFuZ2UoKSkge1xuICAgICAgdGhpcy5zZXRTcGlubmluZyh0aGlzLnJlZi5uYXRpdmVFbGVtZW50KTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgc2V0U3Bpbm5pbmcgPSAoZWxlbWVudCkgPT4ge1xuICAgIGNvbnN0IGVsID0gZWxlbWVudDtcbiAgICBjb25zdCB3aWR0aCA9IGVsZW1lbnQub2Zmc2V0V2lkdGg7XG4gICAgY29uc3QgYXJpYUxhYmVsID0gdGhpcy5zcGlubmluZ0FyaWFMYWJlbDtcbiAgICBsZXQgc3Bpbm5lckNsYXNzID0gJ3NwcmstYy1TcGlubmVyIHNwcmstYy1TcGlubmVyLS1jaXJjbGUnO1xuICAgIGlmIChcbiAgICAgICAgZWwuY2xhc3NMaXN0LmNvbnRhaW5zKCdzcHJrLWMtQnV0dG9uLS1zZWNvbmRhcnknKSB8fFxuICAgICAgICB0aGlzLnZhcmlhbnQgPT09ICdzZWNvbmRhcnknKSB7XG4gICAgICBzcGlubmVyQ2xhc3MgKz0gJyBzcHJrLWMtU3Bpbm5lci0tZGFyayc7XG4gICAgfVxuICAgIHRoaXMucmVuZGVyZXIuc2V0QXR0cmlidXRlKFxuICAgICAgZWwsXG4gICAgICAnZGF0YS1zcHJrLXNwaW5uZXItdGV4dCcsXG4gICAgICBlbC50ZXh0Q29udGVudCxcbiAgICApO1xuICAgIHRoaXMucmVuZGVyZXIuc2V0QXR0cmlidXRlKFxuICAgICAgZWwsXG4gICAgICAnYXJpYS1sYWJlbCcsXG4gICAgICBhcmlhTGFiZWwsXG4gICAgKTtcbiAgICBlbC5pbm5lckhUTUwgPSBgPGRpdiBjbGFzcz1cIiR7c3Bpbm5lckNsYXNzfVwiPjwvZGl2PmA7XG4gICAgZWwuc2V0QXR0cmlidXRlKCdkYXRhLXNwcmstaGFzLXNwaW5uZXInLCAndHJ1ZScpO1xuICAgIHRoaXMucmVuZGVyZXIuc2V0QXR0cmlidXRlKFxuICAgICAgZWwsXG4gICAgICAnZGF0YS1zcHJrLWhhcy1zcGlubmVyJyxcbiAgICAgICd0cnVlJyxcbiAgICApO1xuICAgIHRoaXMucmVuZGVyZXIuc2V0QXR0cmlidXRlKFxuICAgICAgZWwsXG4gICAgICAnc3R5bGUnLFxuICAgICAgYHdpZHRoOiAke3dpZHRofXB4YCxcbiAgICApO1xuICB9XG59XG4iXX0=