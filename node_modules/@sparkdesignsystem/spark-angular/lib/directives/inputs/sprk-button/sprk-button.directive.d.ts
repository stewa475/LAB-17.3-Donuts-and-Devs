import { ElementRef, OnInit, OnChanges, Renderer2, AfterViewInit, SimpleChanges } from '@angular/core';
import * as ɵngcc0 from '@angular/core';
export declare class SprkButtonDirective implements OnInit, OnChanges, AfterViewInit {
    ref: ElementRef;
    private renderer;
    /**
     * @ignore
     */
    constructor(ref: ElementRef, renderer: Renderer2);
    /**
     * Will show a spinner inside the
     * button if set to `true`.
     */
    isSpinning: boolean;
    /**
     * Optional string value that is
     * set for the `aria-label`
     * when `isSpinning` is `true`.
     */
    spinningAriaLabel: string;
    /**
     *  Determines the coresponding button style.
     */
    variant: 'primary' | 'secondary' | 'tertiary';
    true: any;
    /**
     * The value supplied will be assigned
     * to the `data-id` attribute on the
     * component. This is intended to be
     * used as a selector for automated
     * tools. This value should be unique
     * per page.
     */
    idString: string;
    /**
     * The value supplied will be assigned to the
     * `data-analytics` attribute on the element.
     * Intended for an outside
     * library to capture data.
     */
    analyticsString: string;
    ngOnInit(): void;
    /**
     * Add spinner only after view has loaded.
     * This is to allow time for the text
     * content of the button to load so that
     * the width value accounts for that text.
     */
    ngAfterViewInit(): void;
    ngOnChanges(changes: SimpleChanges): void;
    /**
     * @ignore
     */
    setSpinning: (element: any) => void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<SprkButtonDirective, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<SprkButtonDirective, "[sprkButton]", never, { "isSpinning": "isSpinning"; "spinningAriaLabel": "spinningAriaLabel"; "variant": "variant"; "idString": "idString"; "analyticsString": "analyticsString"; }, {}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3Byay1idXR0b24uZGlyZWN0aXZlLmQudHMiLCJzb3VyY2VzIjpbInNwcmstYnV0dG9uLmRpcmVjdGl2ZS5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEVsZW1lbnRSZWYsIE9uSW5pdCwgT25DaGFuZ2VzLCBSZW5kZXJlcjIsIEFmdGVyVmlld0luaXQsIFNpbXBsZUNoYW5nZXMgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmV4cG9ydCBkZWNsYXJlIGNsYXNzIFNwcmtCdXR0b25EaXJlY3RpdmUgaW1wbGVtZW50cyBPbkluaXQsIE9uQ2hhbmdlcywgQWZ0ZXJWaWV3SW5pdCB7XG4gICAgcmVmOiBFbGVtZW50UmVmO1xuICAgIHByaXZhdGUgcmVuZGVyZXI7XG4gICAgLyoqXG4gICAgICogQGlnbm9yZVxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKHJlZjogRWxlbWVudFJlZiwgcmVuZGVyZXI6IFJlbmRlcmVyMik7XG4gICAgLyoqXG4gICAgICogV2lsbCBzaG93IGEgc3Bpbm5lciBpbnNpZGUgdGhlXG4gICAgICogYnV0dG9uIGlmIHNldCB0byBgdHJ1ZWAuXG4gICAgICovXG4gICAgaXNTcGlubmluZzogYm9vbGVhbjtcbiAgICAvKipcbiAgICAgKiBPcHRpb25hbCBzdHJpbmcgdmFsdWUgdGhhdCBpc1xuICAgICAqIHNldCBmb3IgdGhlIGBhcmlhLWxhYmVsYFxuICAgICAqIHdoZW4gYGlzU3Bpbm5pbmdgIGlzIGB0cnVlYC5cbiAgICAgKi9cbiAgICBzcGlubmluZ0FyaWFMYWJlbDogc3RyaW5nO1xuICAgIC8qKlxuICAgICAqICBEZXRlcm1pbmVzIHRoZSBjb3Jlc3BvbmRpbmcgYnV0dG9uIHN0eWxlLlxuICAgICAqL1xuICAgIHZhcmlhbnQ6ICdwcmltYXJ5JyB8ICdzZWNvbmRhcnknIHwgJ3RlcnRpYXJ5JztcbiAgICB0cnVlOiBhbnk7XG4gICAgLyoqXG4gICAgICogVGhlIHZhbHVlIHN1cHBsaWVkIHdpbGwgYmUgYXNzaWduZWRcbiAgICAgKiB0byB0aGUgYGRhdGEtaWRgIGF0dHJpYnV0ZSBvbiB0aGVcbiAgICAgKiBjb21wb25lbnQuIFRoaXMgaXMgaW50ZW5kZWQgdG8gYmVcbiAgICAgKiB1c2VkIGFzIGEgc2VsZWN0b3IgZm9yIGF1dG9tYXRlZFxuICAgICAqIHRvb2xzLiBUaGlzIHZhbHVlIHNob3VsZCBiZSB1bmlxdWVcbiAgICAgKiBwZXIgcGFnZS5cbiAgICAgKi9cbiAgICBpZFN0cmluZzogc3RyaW5nO1xuICAgIC8qKlxuICAgICAqIFRoZSB2YWx1ZSBzdXBwbGllZCB3aWxsIGJlIGFzc2lnbmVkIHRvIHRoZVxuICAgICAqIGBkYXRhLWFuYWx5dGljc2AgYXR0cmlidXRlIG9uIHRoZSBlbGVtZW50LlxuICAgICAqIEludGVuZGVkIGZvciBhbiBvdXRzaWRlXG4gICAgICogbGlicmFyeSB0byBjYXB0dXJlIGRhdGEuXG4gICAgICovXG4gICAgYW5hbHl0aWNzU3RyaW5nOiBzdHJpbmc7XG4gICAgbmdPbkluaXQoKTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBBZGQgc3Bpbm5lciBvbmx5IGFmdGVyIHZpZXcgaGFzIGxvYWRlZC5cbiAgICAgKiBUaGlzIGlzIHRvIGFsbG93IHRpbWUgZm9yIHRoZSB0ZXh0XG4gICAgICogY29udGVudCBvZiB0aGUgYnV0dG9uIHRvIGxvYWQgc28gdGhhdFxuICAgICAqIHRoZSB3aWR0aCB2YWx1ZSBhY2NvdW50cyBmb3IgdGhhdCB0ZXh0LlxuICAgICAqL1xuICAgIG5nQWZ0ZXJWaWV3SW5pdCgpOiB2b2lkO1xuICAgIG5nT25DaGFuZ2VzKGNoYW5nZXM6IFNpbXBsZUNoYW5nZXMpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIEBpZ25vcmVcbiAgICAgKi9cbiAgICBzZXRTcGlubmluZzogKGVsZW1lbnQ6IGFueSkgPT4gdm9pZDtcbn1cbiJdfQ==