import { EventEmitter } from '@angular/core';
import * as ɵngcc0 from '@angular/core';
export declare class SprkModalComponent {
    title: string;
    /**
     * This determines the variant of the Modal.
     * Can be `choice`, `info`, or `wait`.
     */
    modalType: string;
    /**
     * The value supplied will be
     * rendered as the text for the confirm button.
     */
    confirmText: string;
    /**
     * The value supplied will be rendered
     * as the text for the cancel button.
     */
    cancelText: string;
    /**
     * The value supplied will be assigned to the
     * `data-analytics` attribute
     * on the confirm button. Intended
     * for an outside library to capture data.
     */
    confirmAnalyticsString: string;
    /**
     * The value supplied will be assigned to the
     * `data-analytics` attribute
     * on the cancel button. Intended
     * for an outside library to capture data.
     */
    cancelAnalyticsString: string;
    /**
     * The value supplied will be assigned
     * to the `data-id` attribute on the
     * component. This is intended to be
     * used as a selector for automated
     * tools. This value should be unique
     * per page.
     */
    idString: string;
    /**
     * If `true`, the Modal will be shown.
     * If `false`, the modal will not be shown.
     */
    isVisible: boolean;
    /**
     * When the Modal is closed the hide event is
     * emitted and a callback function can
     * be triggered if supplied.
     */
    hide: EventEmitter<any>;
    /**
     * Available when the Modal type is `choice`.
     * The Modal will emit a confirm click event
     * when the confirmation button is clicked.
     * A callback function can be triggered if
     * supplied.
     */
    confirmClick: EventEmitter<any>;
    /**
     * Available when the Modal type is `choice`.
     * The Modal will emit a cancel click event
     * when the cancel link is clicked.
     * A callback function can be triggered if supplied.
     */
    cancelClick: EventEmitter<any>;
    /**
     * @ignore
     */
    componentID: string;
    /**
     * @ignore
     */
    heading_id: string;
    /**
     * @ignore
     */
    content_id: string;
    /**
     * @ignore
     */
    handleKeyboardEvent(event: KeyboardEvent): void;
    /**
     * @ignore
     */
    constructor();
    /**
     * @ignore
     */
    closeModal(event: any): void;
    /**
     * Emits an event when the confirmation
     * button is clicked.
     */
    emitConfirmClick(event: any): void;
    /**
     * Emits an event when the cancel
     * link is clicked.
     */
    emitCancelClick(event: any): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<SprkModalComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<SprkModalComponent, "sprk-modal", never, { "confirmText": "confirmText"; "cancelText": "cancelText"; "isVisible": "isVisible"; "title": "title"; "modalType": "modalType"; "confirmAnalyticsString": "confirmAnalyticsString"; "cancelAnalyticsString": "cancelAnalyticsString"; "idString": "idString"; }, { "hide": "hide"; "confirmClick": "confirmClick"; "cancelClick": "cancelClick"; }, never, ["*"]>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3Byay1tb2RhbC5jb21wb25lbnQuZC50cyIsInNvdXJjZXMiOlsic3Byay1tb2RhbC5jb21wb25lbnQuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBFdmVudEVtaXR0ZXIgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmV4cG9ydCBkZWNsYXJlIGNsYXNzIFNwcmtNb2RhbENvbXBvbmVudCB7XG4gICAgdGl0bGU6IHN0cmluZztcbiAgICAvKipcbiAgICAgKiBUaGlzIGRldGVybWluZXMgdGhlIHZhcmlhbnQgb2YgdGhlIE1vZGFsLlxuICAgICAqIENhbiBiZSBgY2hvaWNlYCwgYGluZm9gLCBvciBgd2FpdGAuXG4gICAgICovXG4gICAgbW9kYWxUeXBlOiBzdHJpbmc7XG4gICAgLyoqXG4gICAgICogVGhlIHZhbHVlIHN1cHBsaWVkIHdpbGwgYmVcbiAgICAgKiByZW5kZXJlZCBhcyB0aGUgdGV4dCBmb3IgdGhlIGNvbmZpcm0gYnV0dG9uLlxuICAgICAqL1xuICAgIGNvbmZpcm1UZXh0OiBzdHJpbmc7XG4gICAgLyoqXG4gICAgICogVGhlIHZhbHVlIHN1cHBsaWVkIHdpbGwgYmUgcmVuZGVyZWRcbiAgICAgKiBhcyB0aGUgdGV4dCBmb3IgdGhlIGNhbmNlbCBidXR0b24uXG4gICAgICovXG4gICAgY2FuY2VsVGV4dDogc3RyaW5nO1xuICAgIC8qKlxuICAgICAqIFRoZSB2YWx1ZSBzdXBwbGllZCB3aWxsIGJlIGFzc2lnbmVkIHRvIHRoZVxuICAgICAqIGBkYXRhLWFuYWx5dGljc2AgYXR0cmlidXRlXG4gICAgICogb24gdGhlIGNvbmZpcm0gYnV0dG9uLiBJbnRlbmRlZFxuICAgICAqIGZvciBhbiBvdXRzaWRlIGxpYnJhcnkgdG8gY2FwdHVyZSBkYXRhLlxuICAgICAqL1xuICAgIGNvbmZpcm1BbmFseXRpY3NTdHJpbmc6IHN0cmluZztcbiAgICAvKipcbiAgICAgKiBUaGUgdmFsdWUgc3VwcGxpZWQgd2lsbCBiZSBhc3NpZ25lZCB0byB0aGVcbiAgICAgKiBgZGF0YS1hbmFseXRpY3NgIGF0dHJpYnV0ZVxuICAgICAqIG9uIHRoZSBjYW5jZWwgYnV0dG9uLiBJbnRlbmRlZFxuICAgICAqIGZvciBhbiBvdXRzaWRlIGxpYnJhcnkgdG8gY2FwdHVyZSBkYXRhLlxuICAgICAqL1xuICAgIGNhbmNlbEFuYWx5dGljc1N0cmluZzogc3RyaW5nO1xuICAgIC8qKlxuICAgICAqIFRoZSB2YWx1ZSBzdXBwbGllZCB3aWxsIGJlIGFzc2lnbmVkXG4gICAgICogdG8gdGhlIGBkYXRhLWlkYCBhdHRyaWJ1dGUgb24gdGhlXG4gICAgICogY29tcG9uZW50LiBUaGlzIGlzIGludGVuZGVkIHRvIGJlXG4gICAgICogdXNlZCBhcyBhIHNlbGVjdG9yIGZvciBhdXRvbWF0ZWRcbiAgICAgKiB0b29scy4gVGhpcyB2YWx1ZSBzaG91bGQgYmUgdW5pcXVlXG4gICAgICogcGVyIHBhZ2UuXG4gICAgICovXG4gICAgaWRTdHJpbmc6IHN0cmluZztcbiAgICAvKipcbiAgICAgKiBJZiBgdHJ1ZWAsIHRoZSBNb2RhbCB3aWxsIGJlIHNob3duLlxuICAgICAqIElmIGBmYWxzZWAsIHRoZSBtb2RhbCB3aWxsIG5vdCBiZSBzaG93bi5cbiAgICAgKi9cbiAgICBpc1Zpc2libGU6IGJvb2xlYW47XG4gICAgLyoqXG4gICAgICogV2hlbiB0aGUgTW9kYWwgaXMgY2xvc2VkIHRoZSBoaWRlIGV2ZW50IGlzXG4gICAgICogZW1pdHRlZCBhbmQgYSBjYWxsYmFjayBmdW5jdGlvbiBjYW5cbiAgICAgKiBiZSB0cmlnZ2VyZWQgaWYgc3VwcGxpZWQuXG4gICAgICovXG4gICAgaGlkZTogRXZlbnRFbWl0dGVyPGFueT47XG4gICAgLyoqXG4gICAgICogQXZhaWxhYmxlIHdoZW4gdGhlIE1vZGFsIHR5cGUgaXMgYGNob2ljZWAuXG4gICAgICogVGhlIE1vZGFsIHdpbGwgZW1pdCBhIGNvbmZpcm0gY2xpY2sgZXZlbnRcbiAgICAgKiB3aGVuIHRoZSBjb25maXJtYXRpb24gYnV0dG9uIGlzIGNsaWNrZWQuXG4gICAgICogQSBjYWxsYmFjayBmdW5jdGlvbiBjYW4gYmUgdHJpZ2dlcmVkIGlmXG4gICAgICogc3VwcGxpZWQuXG4gICAgICovXG4gICAgY29uZmlybUNsaWNrOiBFdmVudEVtaXR0ZXI8YW55PjtcbiAgICAvKipcbiAgICAgKiBBdmFpbGFibGUgd2hlbiB0aGUgTW9kYWwgdHlwZSBpcyBgY2hvaWNlYC5cbiAgICAgKiBUaGUgTW9kYWwgd2lsbCBlbWl0IGEgY2FuY2VsIGNsaWNrIGV2ZW50XG4gICAgICogd2hlbiB0aGUgY2FuY2VsIGxpbmsgaXMgY2xpY2tlZC5cbiAgICAgKiBBIGNhbGxiYWNrIGZ1bmN0aW9uIGNhbiBiZSB0cmlnZ2VyZWQgaWYgc3VwcGxpZWQuXG4gICAgICovXG4gICAgY2FuY2VsQ2xpY2s6IEV2ZW50RW1pdHRlcjxhbnk+O1xuICAgIC8qKlxuICAgICAqIEBpZ25vcmVcbiAgICAgKi9cbiAgICBjb21wb25lbnRJRDogc3RyaW5nO1xuICAgIC8qKlxuICAgICAqIEBpZ25vcmVcbiAgICAgKi9cbiAgICBoZWFkaW5nX2lkOiBzdHJpbmc7XG4gICAgLyoqXG4gICAgICogQGlnbm9yZVxuICAgICAqL1xuICAgIGNvbnRlbnRfaWQ6IHN0cmluZztcbiAgICAvKipcbiAgICAgKiBAaWdub3JlXG4gICAgICovXG4gICAgaGFuZGxlS2V5Ym9hcmRFdmVudChldmVudDogS2V5Ym9hcmRFdmVudCk6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogQGlnbm9yZVxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKCk7XG4gICAgLyoqXG4gICAgICogQGlnbm9yZVxuICAgICAqL1xuICAgIGNsb3NlTW9kYWwoZXZlbnQ6IGFueSk6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogRW1pdHMgYW4gZXZlbnQgd2hlbiB0aGUgY29uZmlybWF0aW9uXG4gICAgICogYnV0dG9uIGlzIGNsaWNrZWQuXG4gICAgICovXG4gICAgZW1pdENvbmZpcm1DbGljayhldmVudDogYW55KTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBFbWl0cyBhbiBldmVudCB3aGVuIHRoZSBjYW5jZWxcbiAgICAgKiBsaW5rIGlzIGNsaWNrZWQuXG4gICAgICovXG4gICAgZW1pdENhbmNlbENsaWNrKGV2ZW50OiBhbnkpOiB2b2lkO1xufVxuIl19