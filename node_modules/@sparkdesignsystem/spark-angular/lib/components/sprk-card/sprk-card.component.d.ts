import * as ɵngcc0 from '@angular/core';
export declare class SprkCardComponent {
    /**
     * The type of Card variant to render.
     * The available values are `base`, `teaser`, and `teaserHeading`.
     */
    cardType: 'base' | 'teaser' | 'teaserHeading';
    /**
     * The main content
     * of the Card. Placed between
     * the title and call to action.
     */
    body: string;
    /**
     * Determines which type of media will be rendered.
     * The available values are `image` and `icon`.
     */
    media: string;
    /**
     * Expects a space separated string
     * of classes to be added to the
     * icon if the media type is icon.
     */
    additionalClassesIcon: string;
    /**
     * The title of the Card.
     */
    title: string;
    /**
     * If the `media` input is set to `image`,
     * this is the text that will be applied to the
     * `src` attribute of the image.
     */
    imgSrc: string;
    /**
     * If the `media` input is set to `image`,
     * this is the text that is applied to
     * the `alt` attribute of the image.
     */
    imgAlt: string;
    /**
     * If the `media` input is set to `icon`, this
     * is used to supply the name of the icon to use.
     */
    iconType: string;
    /**
     * If the `media` input is set to `icon`, this
     * is used to supply the `href` for the icon.
     */
    iconHref: string;
    /**
     * If the `media` input is set to `img`, this
     * is used to supply the `href` of the image.
     */
    imgHref: string;
    /**
     * Determines what icon `sprk-icon` renders
     * next to the call-to-action link.
     */
    ctaIcon: string;
    /**
     * Determines which type of call to action is rendered.
     * The available values are `link` and `button`.
     */
    ctaType: 'link' | 'button';
    /**
     * The text content of the call to action.
     */
    ctaText: string;
    /**
     * The text that will be applied to the `data-analytics` attribute
     * of the call to action.
     */
    ctaAnalytics: string;
    /**
     * The text that will be applied to the `data-analytics` attribute
     * of the link surrounding the image.
     */
    imgLinkAnalytics: string;
    /**
     * The text that will be applied to the `data-analytics` attribute
     * of the link surrounding the icon.
     */
    iconLinkAnalytics: string;
    /**
     * The `href` value for the call to action.
     */
    ctaHref: string;
    /**
     * Expects a space separated string
     * of classes to be added to the
     * component.
     */
    additionalClasses: string;
    /**
     * Expects a space separated string
     * of classes to be added to the
     * call to action.
     */
    additionalCtaClasses: string;
    /**
     * The value supplied will be assigned
     * to the `data-id` attribute on the
     * component. This is intended to be
     * used as a selector for automated
     * tools. This value should be unique
     * per page.
     */
    idString: string;
    /**
     * @ignore
     */
    getClassesCta(): string;
    /**
     * @ignore
     */
    getClassesCard(): string;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<SprkCardComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<SprkCardComponent, "sprk-card", never, { "cardType": "cardType"; "ctaType": "ctaType"; "body": "body"; "media": "media"; "additionalClassesIcon": "additionalClassesIcon"; "title": "title"; "imgSrc": "imgSrc"; "imgAlt": "imgAlt"; "iconType": "iconType"; "iconHref": "iconHref"; "imgHref": "imgHref"; "ctaIcon": "ctaIcon"; "ctaText": "ctaText"; "ctaAnalytics": "ctaAnalytics"; "imgLinkAnalytics": "imgLinkAnalytics"; "iconLinkAnalytics": "iconLinkAnalytics"; "ctaHref": "ctaHref"; "additionalClasses": "additionalClasses"; "additionalCtaClasses": "additionalCtaClasses"; "idString": "idString"; }, {}, never, ["*"]>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3Byay1jYXJkLmNvbXBvbmVudC5kLnRzIiwic291cmNlcyI6WyJzcHJrLWNhcmQuY29tcG9uZW50LmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGRlY2xhcmUgY2xhc3MgU3Bya0NhcmRDb21wb25lbnQge1xuICAgIC8qKlxuICAgICAqIFRoZSB0eXBlIG9mIENhcmQgdmFyaWFudCB0byByZW5kZXIuXG4gICAgICogVGhlIGF2YWlsYWJsZSB2YWx1ZXMgYXJlIGBiYXNlYCwgYHRlYXNlcmAsIGFuZCBgdGVhc2VySGVhZGluZ2AuXG4gICAgICovXG4gICAgY2FyZFR5cGU6ICdiYXNlJyB8ICd0ZWFzZXInIHwgJ3RlYXNlckhlYWRpbmcnO1xuICAgIC8qKlxuICAgICAqIFRoZSBtYWluIGNvbnRlbnRcbiAgICAgKiBvZiB0aGUgQ2FyZC4gUGxhY2VkIGJldHdlZW5cbiAgICAgKiB0aGUgdGl0bGUgYW5kIGNhbGwgdG8gYWN0aW9uLlxuICAgICAqL1xuICAgIGJvZHk6IHN0cmluZztcbiAgICAvKipcbiAgICAgKiBEZXRlcm1pbmVzIHdoaWNoIHR5cGUgb2YgbWVkaWEgd2lsbCBiZSByZW5kZXJlZC5cbiAgICAgKiBUaGUgYXZhaWxhYmxlIHZhbHVlcyBhcmUgYGltYWdlYCBhbmQgYGljb25gLlxuICAgICAqL1xuICAgIG1lZGlhOiBzdHJpbmc7XG4gICAgLyoqXG4gICAgICogRXhwZWN0cyBhIHNwYWNlIHNlcGFyYXRlZCBzdHJpbmdcbiAgICAgKiBvZiBjbGFzc2VzIHRvIGJlIGFkZGVkIHRvIHRoZVxuICAgICAqIGljb24gaWYgdGhlIG1lZGlhIHR5cGUgaXMgaWNvbi5cbiAgICAgKi9cbiAgICBhZGRpdGlvbmFsQ2xhc3Nlc0ljb246IHN0cmluZztcbiAgICAvKipcbiAgICAgKiBUaGUgdGl0bGUgb2YgdGhlIENhcmQuXG4gICAgICovXG4gICAgdGl0bGU6IHN0cmluZztcbiAgICAvKipcbiAgICAgKiBJZiB0aGUgYG1lZGlhYCBpbnB1dCBpcyBzZXQgdG8gYGltYWdlYCxcbiAgICAgKiB0aGlzIGlzIHRoZSB0ZXh0IHRoYXQgd2lsbCBiZSBhcHBsaWVkIHRvIHRoZVxuICAgICAqIGBzcmNgIGF0dHJpYnV0ZSBvZiB0aGUgaW1hZ2UuXG4gICAgICovXG4gICAgaW1nU3JjOiBzdHJpbmc7XG4gICAgLyoqXG4gICAgICogSWYgdGhlIGBtZWRpYWAgaW5wdXQgaXMgc2V0IHRvIGBpbWFnZWAsXG4gICAgICogdGhpcyBpcyB0aGUgdGV4dCB0aGF0IGlzIGFwcGxpZWQgdG9cbiAgICAgKiB0aGUgYGFsdGAgYXR0cmlidXRlIG9mIHRoZSBpbWFnZS5cbiAgICAgKi9cbiAgICBpbWdBbHQ6IHN0cmluZztcbiAgICAvKipcbiAgICAgKiBJZiB0aGUgYG1lZGlhYCBpbnB1dCBpcyBzZXQgdG8gYGljb25gLCB0aGlzXG4gICAgICogaXMgdXNlZCB0byBzdXBwbHkgdGhlIG5hbWUgb2YgdGhlIGljb24gdG8gdXNlLlxuICAgICAqL1xuICAgIGljb25UeXBlOiBzdHJpbmc7XG4gICAgLyoqXG4gICAgICogSWYgdGhlIGBtZWRpYWAgaW5wdXQgaXMgc2V0IHRvIGBpY29uYCwgdGhpc1xuICAgICAqIGlzIHVzZWQgdG8gc3VwcGx5IHRoZSBgaHJlZmAgZm9yIHRoZSBpY29uLlxuICAgICAqL1xuICAgIGljb25IcmVmOiBzdHJpbmc7XG4gICAgLyoqXG4gICAgICogSWYgdGhlIGBtZWRpYWAgaW5wdXQgaXMgc2V0IHRvIGBpbWdgLCB0aGlzXG4gICAgICogaXMgdXNlZCB0byBzdXBwbHkgdGhlIGBocmVmYCBvZiB0aGUgaW1hZ2UuXG4gICAgICovXG4gICAgaW1nSHJlZjogc3RyaW5nO1xuICAgIC8qKlxuICAgICAqIERldGVybWluZXMgd2hhdCBpY29uIGBzcHJrLWljb25gIHJlbmRlcnNcbiAgICAgKiBuZXh0IHRvIHRoZSBjYWxsLXRvLWFjdGlvbiBsaW5rLlxuICAgICAqL1xuICAgIGN0YUljb246IHN0cmluZztcbiAgICAvKipcbiAgICAgKiBEZXRlcm1pbmVzIHdoaWNoIHR5cGUgb2YgY2FsbCB0byBhY3Rpb24gaXMgcmVuZGVyZWQuXG4gICAgICogVGhlIGF2YWlsYWJsZSB2YWx1ZXMgYXJlIGBsaW5rYCBhbmQgYGJ1dHRvbmAuXG4gICAgICovXG4gICAgY3RhVHlwZTogJ2xpbmsnIHwgJ2J1dHRvbic7XG4gICAgLyoqXG4gICAgICogVGhlIHRleHQgY29udGVudCBvZiB0aGUgY2FsbCB0byBhY3Rpb24uXG4gICAgICovXG4gICAgY3RhVGV4dDogc3RyaW5nO1xuICAgIC8qKlxuICAgICAqIFRoZSB0ZXh0IHRoYXQgd2lsbCBiZSBhcHBsaWVkIHRvIHRoZSBgZGF0YS1hbmFseXRpY3NgIGF0dHJpYnV0ZVxuICAgICAqIG9mIHRoZSBjYWxsIHRvIGFjdGlvbi5cbiAgICAgKi9cbiAgICBjdGFBbmFseXRpY3M6IHN0cmluZztcbiAgICAvKipcbiAgICAgKiBUaGUgdGV4dCB0aGF0IHdpbGwgYmUgYXBwbGllZCB0byB0aGUgYGRhdGEtYW5hbHl0aWNzYCBhdHRyaWJ1dGVcbiAgICAgKiBvZiB0aGUgbGluayBzdXJyb3VuZGluZyB0aGUgaW1hZ2UuXG4gICAgICovXG4gICAgaW1nTGlua0FuYWx5dGljczogc3RyaW5nO1xuICAgIC8qKlxuICAgICAqIFRoZSB0ZXh0IHRoYXQgd2lsbCBiZSBhcHBsaWVkIHRvIHRoZSBgZGF0YS1hbmFseXRpY3NgIGF0dHJpYnV0ZVxuICAgICAqIG9mIHRoZSBsaW5rIHN1cnJvdW5kaW5nIHRoZSBpY29uLlxuICAgICAqL1xuICAgIGljb25MaW5rQW5hbHl0aWNzOiBzdHJpbmc7XG4gICAgLyoqXG4gICAgICogVGhlIGBocmVmYCB2YWx1ZSBmb3IgdGhlIGNhbGwgdG8gYWN0aW9uLlxuICAgICAqL1xuICAgIGN0YUhyZWY6IHN0cmluZztcbiAgICAvKipcbiAgICAgKiBFeHBlY3RzIGEgc3BhY2Ugc2VwYXJhdGVkIHN0cmluZ1xuICAgICAqIG9mIGNsYXNzZXMgdG8gYmUgYWRkZWQgdG8gdGhlXG4gICAgICogY29tcG9uZW50LlxuICAgICAqL1xuICAgIGFkZGl0aW9uYWxDbGFzc2VzOiBzdHJpbmc7XG4gICAgLyoqXG4gICAgICogRXhwZWN0cyBhIHNwYWNlIHNlcGFyYXRlZCBzdHJpbmdcbiAgICAgKiBvZiBjbGFzc2VzIHRvIGJlIGFkZGVkIHRvIHRoZVxuICAgICAqIGNhbGwgdG8gYWN0aW9uLlxuICAgICAqL1xuICAgIGFkZGl0aW9uYWxDdGFDbGFzc2VzOiBzdHJpbmc7XG4gICAgLyoqXG4gICAgICogVGhlIHZhbHVlIHN1cHBsaWVkIHdpbGwgYmUgYXNzaWduZWRcbiAgICAgKiB0byB0aGUgYGRhdGEtaWRgIGF0dHJpYnV0ZSBvbiB0aGVcbiAgICAgKiBjb21wb25lbnQuIFRoaXMgaXMgaW50ZW5kZWQgdG8gYmVcbiAgICAgKiB1c2VkIGFzIGEgc2VsZWN0b3IgZm9yIGF1dG9tYXRlZFxuICAgICAqIHRvb2xzLiBUaGlzIHZhbHVlIHNob3VsZCBiZSB1bmlxdWVcbiAgICAgKiBwZXIgcGFnZS5cbiAgICAgKi9cbiAgICBpZFN0cmluZzogc3RyaW5nO1xuICAgIC8qKlxuICAgICAqIEBpZ25vcmVcbiAgICAgKi9cbiAgICBnZXRDbGFzc2VzQ3RhKCk6IHN0cmluZztcbiAgICAvKipcbiAgICAgKiBAaWdub3JlXG4gICAgICovXG4gICAgZ2V0Q2xhc3Nlc0NhcmQoKTogc3RyaW5nO1xufVxuIl19