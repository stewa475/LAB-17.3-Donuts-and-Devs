import { AfterContentInit, ElementRef, QueryList } from '@angular/core';
import { SprkTabbedNavigationPanelDirective } from '../../directives/tabbed-navigation/sprk-tabbed-navigation-panel/sprk-tabbed-navigation-panel.directive';
import { SprkTabbedNavigationTabDirective } from '../../directives/tabbed-navigation/sprk-tabbed-navigation-tab/sprk-tabbed-navigation-tab.directive';
export declare class SprkTabbedNavigationComponent implements AfterContentInit {
    ref: ElementRef;
    /**
     * Expects a space separated string
     * of classes to be added to the
     * component.
     */
    additionalClasses: string;
    /**
     * The value supplied will be assigned
     * to the `data-id` attribute on the
     * component. This is intended to be
     * used as a selector for automated
     * tools. This value should be unique
     * per page.
     */
    idString: string;
    /**
     * This component expects children `<button>` elements
     * with the `SprkTabbedNavigationTabDirective` on them.
     * These serve as the Tabs.
     */
    tabs: QueryList<SprkTabbedNavigationTabDirective>;
    /**
     * This component expects children `<div>` elements
     * with the `SprkTabbedNavigationPanelDirective` on them.
     * These serve as the Panels.
     */
    panels: QueryList<SprkTabbedNavigationPanelDirective>;
    /**
     * @ignore
     */
    componentID: string;
    /**
     * @ignore
     */
    activeClass: string;
    /**
     * @ignore
     */
    onClick($event: any): void;
    /**
     * @ignore
     */
    onResize(): void;
    /**
     * @ignore
     */
    onKeydown($event: any): void;
    /**
     * @ignore
     */
    getClasses(): string;
    /**
     * @ignore
     */
    ngAfterContentInit(): void;
    /**
     * @ignore
     */
    ariaOrientation(width: any, element: any): void;
    /**
     * @ignore
     */
    getActiveTabIndex(tabs: any, activeClass: any): any;
    /**
     * @ignore
     */
    resetTabs(tabs: any, tabpanels: any, activeClass: any): void;
    /**
     * @ignore
     */
    incrementTab(tabs: any, tabpanels: any, activeClass: any, direction: any): void;
    goToEndTab(tabs: any, tabpanels: any, activeClass: any, direction: any): void;
    /**
     * @ignore
     */
    setActiveTab(tab: any, tabpanel: any, activeClass: any): void;
    /**
     * @ignore
     */
    constructor(ref: ElementRef);
}
