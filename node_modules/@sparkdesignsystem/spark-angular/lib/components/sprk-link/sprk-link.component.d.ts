import { OnInit } from '@angular/core';
import { Router } from '@angular/router';
import * as ɵngcc0 from '@angular/core';
export declare class SprkLinkComponent implements OnInit {
    router: Router;
    /**
     * @ignore
     */
    constructor(router: Router);
    /**
     * Will cause the appropriate variant type to render.
     * Optional values are: `simple`, `icon`, `unstyled` or `plain`.
     * If omitted, the default Spark Link class is applied.
     * The `unstyled` variant will render an `href` with no
     * CSS classes.
     */
    linkType: string;
    /**
     * The `href` value of the link. If omitted,
     * the href will be set to `#`
     * and the routing will be disabled. If
     * set to reference an ID then the page
     * will scroll to that anchor as normal.
     */
    href: string;
    /**
     * The value supplied will be assigned
     * to the `data-id` attribute on the
     * component. This is intended to be
     * used as a selector for automated
     * tools. This value should be unique
     * per page.
     */
    idString: string;
    /**
     * Value for the `role`
     * attribute of the link.
     */
    role: string;
    /**
     * The string that will be
     * assigned to the `id` attribute of
     * the link.
     */
    id: string;
    /**
     * Expects a value to assign to the
     * `aria-controls` attribute of the link.
     */
    ariaControls: string;
    /**
     * Expects a value to assign to
     * the `aria-labelledby` attribute of the link.
     */
    ariaLabelledby: string;
    /**
     * Expects a value to assign to
     * the `aria-selected` attribute of the link.
     */
    ariaSelected: string;
    /**
     * Expects a value to assign to
     * the `aria-hidden` attribute of the link.
     */
    ariaHidden: string;
    /**
     * Expects a value to assign
     * to the `aria-curren`t attribute of the link.
     */
    ariaCurrent: string;
    /**
     * Expects a value to assign to
     * the `aria-expanded `attribute of the link.
     */
    ariaExpanded: string;
    /**
     * Expects a value to assign
     * to the `aria-haspopup` attribute of the link.
     */
    ariaHasPopUp: string;
    /**
     * Expects a value to assign to
     * the `aria-label` attribute of the link.
     */
    ariaLabel: string;
    /**
     * The value supplied will be assigned to the
     * `data-analytics` attribute on the component.
     * Intended for an outside
     * library to capture data.
     */
    analyticsString: string;
    /**
     * Expects a value to assign to
     * the `target` attribute of the link.
     */
    target: string;
    /**
     * Expects a space separated string
     * of classes to be added to the
     * component.
     */
    additionalClasses: string;
    /**
     * If `true`, will set disabled styles on the link.
     */
    isDisabled: boolean;
    /**
     * By default, the component determines if
     * the `href` is an external or internal link
     * by looking for the `:` character in the
     * `href` string. If external link functionality
     * is desired with an `href` value that contains
     * a `:` set this input to true. This overrides
     * the default and avoids using the Angular Router.
     */
    isExternal: boolean;
    ngOnInit(): void;
    /**
     * @ignore
     */
    isExternalLink(value: any): boolean;
    /**
     * @ignore
     */
    isJumpLinkWithPage(value: any): boolean;
    /**
     * @ignore
     */
    isJumpLink(value: any): boolean;
    /**
     * @ignore
     */
    isNoActionLink(value: any): boolean;
    /**
     * @ignore
     */
    getPathWithoutHash(value: any): string;
    /**
     * @ignore
     */
    scrollToId(): void;
    /**
     * @ignore
     */
    handleClick(event: any): void;
    /**
     * @ignore
     */
    getClasses(): string;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<SprkLinkComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<SprkLinkComponent, "sprk-link", never, { "isExternal": "isExternal"; "href": "href"; "linkType": "linkType"; "idString": "idString"; "role": "role"; "id": "id"; "ariaControls": "ariaControls"; "ariaLabelledby": "ariaLabelledby"; "ariaSelected": "ariaSelected"; "ariaHidden": "ariaHidden"; "ariaCurrent": "ariaCurrent"; "ariaExpanded": "ariaExpanded"; "ariaHasPopUp": "ariaHasPopUp"; "ariaLabel": "ariaLabel"; "analyticsString": "analyticsString"; "target": "target"; "additionalClasses": "additionalClasses"; "isDisabled": "isDisabled"; }, {}, never, ["*"]>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3Byay1saW5rLmNvbXBvbmVudC5kLnRzIiwic291cmNlcyI6WyJzcHJrLWxpbmsuY29tcG9uZW50LmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgT25Jbml0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBSb3V0ZXIgfSBmcm9tICdAYW5ndWxhci9yb3V0ZXInO1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgU3Bya0xpbmtDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQge1xuICAgIHJvdXRlcjogUm91dGVyO1xuICAgIC8qKlxuICAgICAqIEBpZ25vcmVcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3Rvcihyb3V0ZXI6IFJvdXRlcik7XG4gICAgLyoqXG4gICAgICogV2lsbCBjYXVzZSB0aGUgYXBwcm9wcmlhdGUgdmFyaWFudCB0eXBlIHRvIHJlbmRlci5cbiAgICAgKiBPcHRpb25hbCB2YWx1ZXMgYXJlOiBgc2ltcGxlYCwgYGljb25gLCBgdW5zdHlsZWRgIG9yIGBwbGFpbmAuXG4gICAgICogSWYgb21pdHRlZCwgdGhlIGRlZmF1bHQgU3BhcmsgTGluayBjbGFzcyBpcyBhcHBsaWVkLlxuICAgICAqIFRoZSBgdW5zdHlsZWRgIHZhcmlhbnQgd2lsbCByZW5kZXIgYW4gYGhyZWZgIHdpdGggbm9cbiAgICAgKiBDU1MgY2xhc3Nlcy5cbiAgICAgKi9cbiAgICBsaW5rVHlwZTogc3RyaW5nO1xuICAgIC8qKlxuICAgICAqIFRoZSBgaHJlZmAgdmFsdWUgb2YgdGhlIGxpbmsuIElmIG9taXR0ZWQsXG4gICAgICogdGhlIGhyZWYgd2lsbCBiZSBzZXQgdG8gYCNgXG4gICAgICogYW5kIHRoZSByb3V0aW5nIHdpbGwgYmUgZGlzYWJsZWQuIElmXG4gICAgICogc2V0IHRvIHJlZmVyZW5jZSBhbiBJRCB0aGVuIHRoZSBwYWdlXG4gICAgICogd2lsbCBzY3JvbGwgdG8gdGhhdCBhbmNob3IgYXMgbm9ybWFsLlxuICAgICAqL1xuICAgIGhyZWY6IHN0cmluZztcbiAgICAvKipcbiAgICAgKiBUaGUgdmFsdWUgc3VwcGxpZWQgd2lsbCBiZSBhc3NpZ25lZFxuICAgICAqIHRvIHRoZSBgZGF0YS1pZGAgYXR0cmlidXRlIG9uIHRoZVxuICAgICAqIGNvbXBvbmVudC4gVGhpcyBpcyBpbnRlbmRlZCB0byBiZVxuICAgICAqIHVzZWQgYXMgYSBzZWxlY3RvciBmb3IgYXV0b21hdGVkXG4gICAgICogdG9vbHMuIFRoaXMgdmFsdWUgc2hvdWxkIGJlIHVuaXF1ZVxuICAgICAqIHBlciBwYWdlLlxuICAgICAqL1xuICAgIGlkU3RyaW5nOiBzdHJpbmc7XG4gICAgLyoqXG4gICAgICogVmFsdWUgZm9yIHRoZSBgcm9sZWBcbiAgICAgKiBhdHRyaWJ1dGUgb2YgdGhlIGxpbmsuXG4gICAgICovXG4gICAgcm9sZTogc3RyaW5nO1xuICAgIC8qKlxuICAgICAqIFRoZSBzdHJpbmcgdGhhdCB3aWxsIGJlXG4gICAgICogYXNzaWduZWQgdG8gdGhlIGBpZGAgYXR0cmlidXRlIG9mXG4gICAgICogdGhlIGxpbmsuXG4gICAgICovXG4gICAgaWQ6IHN0cmluZztcbiAgICAvKipcbiAgICAgKiBFeHBlY3RzIGEgdmFsdWUgdG8gYXNzaWduIHRvIHRoZVxuICAgICAqIGBhcmlhLWNvbnRyb2xzYCBhdHRyaWJ1dGUgb2YgdGhlIGxpbmsuXG4gICAgICovXG4gICAgYXJpYUNvbnRyb2xzOiBzdHJpbmc7XG4gICAgLyoqXG4gICAgICogRXhwZWN0cyBhIHZhbHVlIHRvIGFzc2lnbiB0b1xuICAgICAqIHRoZSBgYXJpYS1sYWJlbGxlZGJ5YCBhdHRyaWJ1dGUgb2YgdGhlIGxpbmsuXG4gICAgICovXG4gICAgYXJpYUxhYmVsbGVkYnk6IHN0cmluZztcbiAgICAvKipcbiAgICAgKiBFeHBlY3RzIGEgdmFsdWUgdG8gYXNzaWduIHRvXG4gICAgICogdGhlIGBhcmlhLXNlbGVjdGVkYCBhdHRyaWJ1dGUgb2YgdGhlIGxpbmsuXG4gICAgICovXG4gICAgYXJpYVNlbGVjdGVkOiBzdHJpbmc7XG4gICAgLyoqXG4gICAgICogRXhwZWN0cyBhIHZhbHVlIHRvIGFzc2lnbiB0b1xuICAgICAqIHRoZSBgYXJpYS1oaWRkZW5gIGF0dHJpYnV0ZSBvZiB0aGUgbGluay5cbiAgICAgKi9cbiAgICBhcmlhSGlkZGVuOiBzdHJpbmc7XG4gICAgLyoqXG4gICAgICogRXhwZWN0cyBhIHZhbHVlIHRvIGFzc2lnblxuICAgICAqIHRvIHRoZSBgYXJpYS1jdXJyZW5gdCBhdHRyaWJ1dGUgb2YgdGhlIGxpbmsuXG4gICAgICovXG4gICAgYXJpYUN1cnJlbnQ6IHN0cmluZztcbiAgICAvKipcbiAgICAgKiBFeHBlY3RzIGEgdmFsdWUgdG8gYXNzaWduIHRvXG4gICAgICogdGhlIGBhcmlhLWV4cGFuZGVkIGBhdHRyaWJ1dGUgb2YgdGhlIGxpbmsuXG4gICAgICovXG4gICAgYXJpYUV4cGFuZGVkOiBzdHJpbmc7XG4gICAgLyoqXG4gICAgICogRXhwZWN0cyBhIHZhbHVlIHRvIGFzc2lnblxuICAgICAqIHRvIHRoZSBgYXJpYS1oYXNwb3B1cGAgYXR0cmlidXRlIG9mIHRoZSBsaW5rLlxuICAgICAqL1xuICAgIGFyaWFIYXNQb3BVcDogc3RyaW5nO1xuICAgIC8qKlxuICAgICAqIEV4cGVjdHMgYSB2YWx1ZSB0byBhc3NpZ24gdG9cbiAgICAgKiB0aGUgYGFyaWEtbGFiZWxgIGF0dHJpYnV0ZSBvZiB0aGUgbGluay5cbiAgICAgKi9cbiAgICBhcmlhTGFiZWw6IHN0cmluZztcbiAgICAvKipcbiAgICAgKiBUaGUgdmFsdWUgc3VwcGxpZWQgd2lsbCBiZSBhc3NpZ25lZCB0byB0aGVcbiAgICAgKiBgZGF0YS1hbmFseXRpY3NgIGF0dHJpYnV0ZSBvbiB0aGUgY29tcG9uZW50LlxuICAgICAqIEludGVuZGVkIGZvciBhbiBvdXRzaWRlXG4gICAgICogbGlicmFyeSB0byBjYXB0dXJlIGRhdGEuXG4gICAgICovXG4gICAgYW5hbHl0aWNzU3RyaW5nOiBzdHJpbmc7XG4gICAgLyoqXG4gICAgICogRXhwZWN0cyBhIHZhbHVlIHRvIGFzc2lnbiB0b1xuICAgICAqIHRoZSBgdGFyZ2V0YCBhdHRyaWJ1dGUgb2YgdGhlIGxpbmsuXG4gICAgICovXG4gICAgdGFyZ2V0OiBzdHJpbmc7XG4gICAgLyoqXG4gICAgICogRXhwZWN0cyBhIHNwYWNlIHNlcGFyYXRlZCBzdHJpbmdcbiAgICAgKiBvZiBjbGFzc2VzIHRvIGJlIGFkZGVkIHRvIHRoZVxuICAgICAqIGNvbXBvbmVudC5cbiAgICAgKi9cbiAgICBhZGRpdGlvbmFsQ2xhc3Nlczogc3RyaW5nO1xuICAgIC8qKlxuICAgICAqIElmIGB0cnVlYCwgd2lsbCBzZXQgZGlzYWJsZWQgc3R5bGVzIG9uIHRoZSBsaW5rLlxuICAgICAqL1xuICAgIGlzRGlzYWJsZWQ6IGJvb2xlYW47XG4gICAgLyoqXG4gICAgICogQnkgZGVmYXVsdCwgdGhlIGNvbXBvbmVudCBkZXRlcm1pbmVzIGlmXG4gICAgICogdGhlIGBocmVmYCBpcyBhbiBleHRlcm5hbCBvciBpbnRlcm5hbCBsaW5rXG4gICAgICogYnkgbG9va2luZyBmb3IgdGhlIGA6YCBjaGFyYWN0ZXIgaW4gdGhlXG4gICAgICogYGhyZWZgIHN0cmluZy4gSWYgZXh0ZXJuYWwgbGluayBmdW5jdGlvbmFsaXR5XG4gICAgICogaXMgZGVzaXJlZCB3aXRoIGFuIGBocmVmYCB2YWx1ZSB0aGF0IGNvbnRhaW5zXG4gICAgICogYSBgOmAgc2V0IHRoaXMgaW5wdXQgdG8gdHJ1ZS4gVGhpcyBvdmVycmlkZXNcbiAgICAgKiB0aGUgZGVmYXVsdCBhbmQgYXZvaWRzIHVzaW5nIHRoZSBBbmd1bGFyIFJvdXRlci5cbiAgICAgKi9cbiAgICBpc0V4dGVybmFsOiBib29sZWFuO1xuICAgIG5nT25Jbml0KCk6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogQGlnbm9yZVxuICAgICAqL1xuICAgIGlzRXh0ZXJuYWxMaW5rKHZhbHVlOiBhbnkpOiBib29sZWFuO1xuICAgIC8qKlxuICAgICAqIEBpZ25vcmVcbiAgICAgKi9cbiAgICBpc0p1bXBMaW5rV2l0aFBhZ2UodmFsdWU6IGFueSk6IGJvb2xlYW47XG4gICAgLyoqXG4gICAgICogQGlnbm9yZVxuICAgICAqL1xuICAgIGlzSnVtcExpbmsodmFsdWU6IGFueSk6IGJvb2xlYW47XG4gICAgLyoqXG4gICAgICogQGlnbm9yZVxuICAgICAqL1xuICAgIGlzTm9BY3Rpb25MaW5rKHZhbHVlOiBhbnkpOiBib29sZWFuO1xuICAgIC8qKlxuICAgICAqIEBpZ25vcmVcbiAgICAgKi9cbiAgICBnZXRQYXRoV2l0aG91dEhhc2godmFsdWU6IGFueSk6IHN0cmluZztcbiAgICAvKipcbiAgICAgKiBAaWdub3JlXG4gICAgICovXG4gICAgc2Nyb2xsVG9JZCgpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIEBpZ25vcmVcbiAgICAgKi9cbiAgICBoYW5kbGVDbGljayhldmVudDogYW55KTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBAaWdub3JlXG4gICAgICovXG4gICAgZ2V0Q2xhc3NlcygpOiBzdHJpbmc7XG59XG4iXX0=