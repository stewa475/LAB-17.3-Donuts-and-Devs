import { OnInit } from '@angular/core';
import { Router } from '@angular/router';
export declare class SprkLinkComponent implements OnInit {
    router: Router;
    /**
     * @ignore
     */
    constructor(router: Router);
    /**
     * Will cause the appropriate variant type to render.
     * Optional values are: `simple`, `icon`, `unstyled` or `plain`.
     * If omitted, the default Spark Link class is applied.
     * The `unstyled` variant will render an `href` with no
     * CSS classes.
     */
    linkType: string;
    /**
     * The `href` value of the link. If omitted,
     * the href will be set to `#`
     * and the routing will be disabled. If
     * set to reference an ID then the page
     * will scroll to that anchor as normal.
     */
    href: string;
    /**
     * The value supplied will be assigned
     * to the `data-id` attribute on the
     * component. This is intended to be
     * used as a selector for automated
     * tools. This value should be unique
     * per page.
     */
    idString: string;
    /**
     * Value for the `role`
     * attribute of the link.
     */
    role: string;
    /**
     * The string that will be
     * assigned to the `id` attribute of
     * the link.
     */
    id: string;
    /**
     * Expects a value to assign to the
     * `aria-controls` attribute of the link.
     */
    ariaControls: string;
    /**
     * Expects a value to assign to
     * the `aria-labelledby` attribute of the link.
     */
    ariaLabelledby: string;
    /**
     * Expects a value to assign to
     * the `aria-selected` attribute of the link.
     */
    ariaSelected: string;
    /**
     * Expects a value to assign to
     * the `aria-hidden` attribute of the link.
     */
    ariaHidden: string;
    /**
     * Expects a value to assign
     * to the `aria-curren`t attribute of the link.
     */
    ariaCurrent: string;
    /**
     * Expects a value to assign to
     * the `aria-expanded `attribute of the link.
     */
    ariaExpanded: string;
    /**
     * Expects a value to assign
     * to the `aria-haspopup` attribute of the link.
     */
    ariaHasPopUp: string;
    /**
     * Expects a value to assign to
     * the `aria-label` attribute of the link.
     */
    ariaLabel: string;
    /**
     * The value supplied will be assigned to the
     * `data-analytics` attribute on the component.
     * Intended for an outside
     * library to capture data.
     */
    analyticsString: string;
    /**
     * Expects a value to assign to
     * the `target` attribute of the link.
     */
    target: string;
    /**
     * Expects a space separated string
     * of classes to be added to the
     * component.
     */
    additionalClasses: string;
    /**
     * If `true`, will set disabled styles on the link.
     */
    isDisabled: boolean;
    /**
     * By default, the component determines if
     * the `href` is an external or internal link
     * by looking for the `:` character in the
     * `href` string. If external link functionality
     * is desired with an `href` value that contains
     * a `:` set this input to true. This overrides
     * the default and avoids using the Angular Router.
     */
    isExternal: boolean;
    ngOnInit(): void;
    /**
     * @ignore
     */
    isExternalLink(value: any): boolean;
    /**
     * @ignore
     */
    isJumpLinkWithPage(value: any): boolean;
    /**
     * @ignore
     */
    isJumpLink(value: any): boolean;
    /**
     * @ignore
     */
    isNoActionLink(value: any): boolean;
    /**
     * @ignore
     */
    getPathWithoutHash(value: any): string;
    /**
     * @ignore
     */
    scrollToId(): void;
    /**
     * @ignore
     */
    handleClick(event: any): void;
    /**
     * @ignore
     */
    getClasses(): string;
}
