import { ElementRef, EventEmitter } from '@angular/core';
import { ISprkDropdownChoice } from './sprk-dropdown.interfaces';
import * as ɵngcc0 from '@angular/core';
export declare class SprkDropdownComponent {
    ref: ElementRef;
    /**
     * The variant of the Dropdown to render.
     */
    dropdownType: string;
    /**
     * Expects a space separated string
     * of classes to be added to the
     * component.
     */
    additionalClasses: string;
    /**
     * Expects a space separated string
     * of classes to be added to the
     * icon.
     */
    additionalIconClasses: string;
    /**
     * Expects a space separated string of
     * classes to be added to the trigger link element.
     */
    additionalTriggerClasses: string;
    /**
     * Expects a space separated string of
     * classes to be added to the trigger text.
     */
    additionalTriggerTextClasses: string;
    /**
     * The value supplied will be assigned
     * to the `data-id` attribute on the
     * component. This is intended to be
     * used as a selector for automated
     * tools. This value should be unique
     * per page.
     */
    idString: string;
    /**
     * The value supplied will be assigned to the
     * `data-analytics` attribute on the component.
     * Intended for an outside
     * library to capture data.
     */
    analyticsString: string;
    /**
     * If `true`, the Dropdown will be open when rendered.
     */
    isOpen: boolean;
    /**
     * The value supplied will be displayed
     * in a box above the choices.
     */
    title: string;
    /**
     * The value supplied will be assigned to
     * the title text.
     */
    selector: string;
    /**
     * Expects an array of
     * [ISprkDropdownChoice](https://github.com/sparkdesignsystem/spark-design-system/tree/master/src/angular/projects/spark-angular/src/lib/components/sprk-dropdown/sprk-dropdown.interfaces.ts)
     *  objects.
     */
    choices: ISprkDropdownChoice[];
    /**
     * If supplied, will render the icon
     * to the right of the trigger text.
     */
    triggerIconType: string;
    /**
     * The text that is initially rendered to the trigger.
     * If `dropdownType` is `informational`,
     * clicking on a choice will change the trigger text.
     */
    triggerText: string;
    /**
     * The value supplied will be visually hidden
     * inside the trigger. Userful
     * for when title is empty,
     * and only `triggerIconType` is supplied.
     */
    screenReaderText: string;
    /**
     * The event that is
     * emitted from the Dropdown when a choice
     * is clicked. The event contains the value
     * of the choice that was clicked.
     */
    choiceMade: EventEmitter<string>;
    /**
     * @ignore
     */
    constructor(ref: ElementRef);
    /**
     * @ignore
     */
    toggle(event: any): void;
    onClick(event: any): void;
    onFocusin(event: any): void;
    /**
     * @ignore
     */
    choiceClick(event: any): void;
    /**
     * @ignore
     */
    setActiveChoice(event: any): void;
    /**
     * @ignore
     */
    updateTriggerText(event: any): void;
    /**
     * @ignore
     */
    clearActiveChoices(): void;
    /**
     * @ignore
     */
    hideDropdown(): void;
    /**
     * @ignore
     */
    getClasses(): string;
    /**
     * @ignore
     */
    getTriggerClasses(): string;
    /**
     * @ignore
     */
    getTriggerTextClasses(): string;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<SprkDropdownComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<SprkDropdownComponent, "sprk-dropdown", never, { "dropdownType": "dropdownType"; "isOpen": "isOpen"; "triggerText": "triggerText"; "additionalClasses": "additionalClasses"; "additionalIconClasses": "additionalIconClasses"; "additionalTriggerClasses": "additionalTriggerClasses"; "additionalTriggerTextClasses": "additionalTriggerTextClasses"; "idString": "idString"; "analyticsString": "analyticsString"; "title": "title"; "selector": "selector"; "choices": "choices"; "triggerIconType": "triggerIconType"; "screenReaderText": "screenReaderText"; }, { "choiceMade": "choiceMade"; }, never, ["[sprkDropdownFooter]"]>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3Byay1kcm9wZG93bi5jb21wb25lbnQuZC50cyIsInNvdXJjZXMiOlsic3Byay1kcm9wZG93bi5jb21wb25lbnQuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRWxlbWVudFJlZiwgRXZlbnRFbWl0dGVyIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBJU3Bya0Ryb3Bkb3duQ2hvaWNlIH0gZnJvbSAnLi9zcHJrLWRyb3Bkb3duLmludGVyZmFjZXMnO1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgU3Bya0Ryb3Bkb3duQ29tcG9uZW50IHtcbiAgICByZWY6IEVsZW1lbnRSZWY7XG4gICAgLyoqXG4gICAgICogVGhlIHZhcmlhbnQgb2YgdGhlIERyb3Bkb3duIHRvIHJlbmRlci5cbiAgICAgKi9cbiAgICBkcm9wZG93blR5cGU6IHN0cmluZztcbiAgICAvKipcbiAgICAgKiBFeHBlY3RzIGEgc3BhY2Ugc2VwYXJhdGVkIHN0cmluZ1xuICAgICAqIG9mIGNsYXNzZXMgdG8gYmUgYWRkZWQgdG8gdGhlXG4gICAgICogY29tcG9uZW50LlxuICAgICAqL1xuICAgIGFkZGl0aW9uYWxDbGFzc2VzOiBzdHJpbmc7XG4gICAgLyoqXG4gICAgICogRXhwZWN0cyBhIHNwYWNlIHNlcGFyYXRlZCBzdHJpbmdcbiAgICAgKiBvZiBjbGFzc2VzIHRvIGJlIGFkZGVkIHRvIHRoZVxuICAgICAqIGljb24uXG4gICAgICovXG4gICAgYWRkaXRpb25hbEljb25DbGFzc2VzOiBzdHJpbmc7XG4gICAgLyoqXG4gICAgICogRXhwZWN0cyBhIHNwYWNlIHNlcGFyYXRlZCBzdHJpbmcgb2ZcbiAgICAgKiBjbGFzc2VzIHRvIGJlIGFkZGVkIHRvIHRoZSB0cmlnZ2VyIGxpbmsgZWxlbWVudC5cbiAgICAgKi9cbiAgICBhZGRpdGlvbmFsVHJpZ2dlckNsYXNzZXM6IHN0cmluZztcbiAgICAvKipcbiAgICAgKiBFeHBlY3RzIGEgc3BhY2Ugc2VwYXJhdGVkIHN0cmluZyBvZlxuICAgICAqIGNsYXNzZXMgdG8gYmUgYWRkZWQgdG8gdGhlIHRyaWdnZXIgdGV4dC5cbiAgICAgKi9cbiAgICBhZGRpdGlvbmFsVHJpZ2dlclRleHRDbGFzc2VzOiBzdHJpbmc7XG4gICAgLyoqXG4gICAgICogVGhlIHZhbHVlIHN1cHBsaWVkIHdpbGwgYmUgYXNzaWduZWRcbiAgICAgKiB0byB0aGUgYGRhdGEtaWRgIGF0dHJpYnV0ZSBvbiB0aGVcbiAgICAgKiBjb21wb25lbnQuIFRoaXMgaXMgaW50ZW5kZWQgdG8gYmVcbiAgICAgKiB1c2VkIGFzIGEgc2VsZWN0b3IgZm9yIGF1dG9tYXRlZFxuICAgICAqIHRvb2xzLiBUaGlzIHZhbHVlIHNob3VsZCBiZSB1bmlxdWVcbiAgICAgKiBwZXIgcGFnZS5cbiAgICAgKi9cbiAgICBpZFN0cmluZzogc3RyaW5nO1xuICAgIC8qKlxuICAgICAqIFRoZSB2YWx1ZSBzdXBwbGllZCB3aWxsIGJlIGFzc2lnbmVkIHRvIHRoZVxuICAgICAqIGBkYXRhLWFuYWx5dGljc2AgYXR0cmlidXRlIG9uIHRoZSBjb21wb25lbnQuXG4gICAgICogSW50ZW5kZWQgZm9yIGFuIG91dHNpZGVcbiAgICAgKiBsaWJyYXJ5IHRvIGNhcHR1cmUgZGF0YS5cbiAgICAgKi9cbiAgICBhbmFseXRpY3NTdHJpbmc6IHN0cmluZztcbiAgICAvKipcbiAgICAgKiBJZiBgdHJ1ZWAsIHRoZSBEcm9wZG93biB3aWxsIGJlIG9wZW4gd2hlbiByZW5kZXJlZC5cbiAgICAgKi9cbiAgICBpc09wZW46IGJvb2xlYW47XG4gICAgLyoqXG4gICAgICogVGhlIHZhbHVlIHN1cHBsaWVkIHdpbGwgYmUgZGlzcGxheWVkXG4gICAgICogaW4gYSBib3ggYWJvdmUgdGhlIGNob2ljZXMuXG4gICAgICovXG4gICAgdGl0bGU6IHN0cmluZztcbiAgICAvKipcbiAgICAgKiBUaGUgdmFsdWUgc3VwcGxpZWQgd2lsbCBiZSBhc3NpZ25lZCB0b1xuICAgICAqIHRoZSB0aXRsZSB0ZXh0LlxuICAgICAqL1xuICAgIHNlbGVjdG9yOiBzdHJpbmc7XG4gICAgLyoqXG4gICAgICogRXhwZWN0cyBhbiBhcnJheSBvZlxuICAgICAqIFtJU3Bya0Ryb3Bkb3duQ2hvaWNlXShodHRwczovL2dpdGh1Yi5jb20vc3BhcmtkZXNpZ25zeXN0ZW0vc3BhcmstZGVzaWduLXN5c3RlbS90cmVlL21hc3Rlci9zcmMvYW5ndWxhci9wcm9qZWN0cy9zcGFyay1hbmd1bGFyL3NyYy9saWIvY29tcG9uZW50cy9zcHJrLWRyb3Bkb3duL3NwcmstZHJvcGRvd24uaW50ZXJmYWNlcy50cylcbiAgICAgKiAgb2JqZWN0cy5cbiAgICAgKi9cbiAgICBjaG9pY2VzOiBJU3Bya0Ryb3Bkb3duQ2hvaWNlW107XG4gICAgLyoqXG4gICAgICogSWYgc3VwcGxpZWQsIHdpbGwgcmVuZGVyIHRoZSBpY29uXG4gICAgICogdG8gdGhlIHJpZ2h0IG9mIHRoZSB0cmlnZ2VyIHRleHQuXG4gICAgICovXG4gICAgdHJpZ2dlckljb25UeXBlOiBzdHJpbmc7XG4gICAgLyoqXG4gICAgICogVGhlIHRleHQgdGhhdCBpcyBpbml0aWFsbHkgcmVuZGVyZWQgdG8gdGhlIHRyaWdnZXIuXG4gICAgICogSWYgYGRyb3Bkb3duVHlwZWAgaXMgYGluZm9ybWF0aW9uYWxgLFxuICAgICAqIGNsaWNraW5nIG9uIGEgY2hvaWNlIHdpbGwgY2hhbmdlIHRoZSB0cmlnZ2VyIHRleHQuXG4gICAgICovXG4gICAgdHJpZ2dlclRleHQ6IHN0cmluZztcbiAgICAvKipcbiAgICAgKiBUaGUgdmFsdWUgc3VwcGxpZWQgd2lsbCBiZSB2aXN1YWxseSBoaWRkZW5cbiAgICAgKiBpbnNpZGUgdGhlIHRyaWdnZXIuIFVzZXJmdWxcbiAgICAgKiBmb3Igd2hlbiB0aXRsZSBpcyBlbXB0eSxcbiAgICAgKiBhbmQgb25seSBgdHJpZ2dlckljb25UeXBlYCBpcyBzdXBwbGllZC5cbiAgICAgKi9cbiAgICBzY3JlZW5SZWFkZXJUZXh0OiBzdHJpbmc7XG4gICAgLyoqXG4gICAgICogVGhlIGV2ZW50IHRoYXQgaXNcbiAgICAgKiBlbWl0dGVkIGZyb20gdGhlIERyb3Bkb3duIHdoZW4gYSBjaG9pY2VcbiAgICAgKiBpcyBjbGlja2VkLiBUaGUgZXZlbnQgY29udGFpbnMgdGhlIHZhbHVlXG4gICAgICogb2YgdGhlIGNob2ljZSB0aGF0IHdhcyBjbGlja2VkLlxuICAgICAqL1xuICAgIGNob2ljZU1hZGU6IEV2ZW50RW1pdHRlcjxzdHJpbmc+O1xuICAgIC8qKlxuICAgICAqIEBpZ25vcmVcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcihyZWY6IEVsZW1lbnRSZWYpO1xuICAgIC8qKlxuICAgICAqIEBpZ25vcmVcbiAgICAgKi9cbiAgICB0b2dnbGUoZXZlbnQ6IGFueSk6IHZvaWQ7XG4gICAgb25DbGljayhldmVudDogYW55KTogdm9pZDtcbiAgICBvbkZvY3VzaW4oZXZlbnQ6IGFueSk6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogQGlnbm9yZVxuICAgICAqL1xuICAgIGNob2ljZUNsaWNrKGV2ZW50OiBhbnkpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIEBpZ25vcmVcbiAgICAgKi9cbiAgICBzZXRBY3RpdmVDaG9pY2UoZXZlbnQ6IGFueSk6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogQGlnbm9yZVxuICAgICAqL1xuICAgIHVwZGF0ZVRyaWdnZXJUZXh0KGV2ZW50OiBhbnkpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIEBpZ25vcmVcbiAgICAgKi9cbiAgICBjbGVhckFjdGl2ZUNob2ljZXMoKTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBAaWdub3JlXG4gICAgICovXG4gICAgaGlkZURyb3Bkb3duKCk6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogQGlnbm9yZVxuICAgICAqL1xuICAgIGdldENsYXNzZXMoKTogc3RyaW5nO1xuICAgIC8qKlxuICAgICAqIEBpZ25vcmVcbiAgICAgKi9cbiAgICBnZXRUcmlnZ2VyQ2xhc3NlcygpOiBzdHJpbmc7XG4gICAgLyoqXG4gICAgICogQGlnbm9yZVxuICAgICAqL1xuICAgIGdldFRyaWdnZXJUZXh0Q2xhc3NlcygpOiBzdHJpbmc7XG59XG4iXX0=