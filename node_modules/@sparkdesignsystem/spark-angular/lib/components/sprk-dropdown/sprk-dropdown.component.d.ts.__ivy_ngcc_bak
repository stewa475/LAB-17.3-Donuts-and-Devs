import { ElementRef, EventEmitter } from '@angular/core';
import { ISprkDropdownChoice } from './sprk-dropdown.interfaces';
export declare class SprkDropdownComponent {
    ref: ElementRef;
    /**
     * The variant of the Dropdown to render.
     */
    dropdownType: string;
    /**
     * Expects a space separated string
     * of classes to be added to the
     * component.
     */
    additionalClasses: string;
    /**
     * Expects a space separated string
     * of classes to be added to the
     * icon.
     */
    additionalIconClasses: string;
    /**
     * Expects a space separated string of
     * classes to be added to the trigger link element.
     */
    additionalTriggerClasses: string;
    /**
     * Expects a space separated string of
     * classes to be added to the trigger text.
     */
    additionalTriggerTextClasses: string;
    /**
     * The value supplied will be assigned
     * to the `data-id` attribute on the
     * component. This is intended to be
     * used as a selector for automated
     * tools. This value should be unique
     * per page.
     */
    idString: string;
    /**
     * The value supplied will be assigned to the
     * `data-analytics` attribute on the component.
     * Intended for an outside
     * library to capture data.
     */
    analyticsString: string;
    /**
     * If `true`, the Dropdown will be open when rendered.
     */
    isOpen: boolean;
    /**
     * The value supplied will be displayed
     * in a box above the choices.
     */
    title: string;
    /**
     * The value supplied will be assigned to
     * the title text.
     */
    selector: string;
    /**
     * Expects an array of
     * [ISprkDropdownChoice](https://github.com/sparkdesignsystem/spark-design-system/tree/master/src/angular/projects/spark-angular/src/lib/components/sprk-dropdown/sprk-dropdown.interfaces.ts)
     *  objects.
     */
    choices: ISprkDropdownChoice[];
    /**
     * If supplied, will render the icon
     * to the right of the trigger text.
     */
    triggerIconType: string;
    /**
     * The text that is initially rendered to the trigger.
     * If `dropdownType` is `informational`,
     * clicking on a choice will change the trigger text.
     */
    triggerText: string;
    /**
     * The value supplied will be visually hidden
     * inside the trigger. Userful
     * for when title is empty,
     * and only `triggerIconType` is supplied.
     */
    screenReaderText: string;
    /**
     * The event that is
     * emitted from the Dropdown when a choice
     * is clicked. The event contains the value
     * of the choice that was clicked.
     */
    choiceMade: EventEmitter<string>;
    /**
     * @ignore
     */
    constructor(ref: ElementRef);
    /**
     * @ignore
     */
    toggle(event: any): void;
    onClick(event: any): void;
    onFocusin(event: any): void;
    /**
     * @ignore
     */
    choiceClick(event: any): void;
    /**
     * @ignore
     */
    setActiveChoice(event: any): void;
    /**
     * @ignore
     */
    updateTriggerText(event: any): void;
    /**
     * @ignore
     */
    clearActiveChoices(): void;
    /**
     * @ignore
     */
    hideDropdown(): void;
    /**
     * @ignore
     */
    getClasses(): string;
    /**
     * @ignore
     */
    getTriggerClasses(): string;
    /**
     * @ignore
     */
    getTriggerTextClasses(): string;
}
