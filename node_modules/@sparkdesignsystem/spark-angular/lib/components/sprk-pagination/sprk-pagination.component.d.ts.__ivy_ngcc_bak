import { EventEmitter } from '@angular/core';
export declare class SprkPaginationComponent {
    /**
     * If set to `pager`, the component will render
     * in the Pager variant with no visible number
     * links. Otherwise, the component will render in
     * the Default variant if there three or fewer
     * pages or in the Long variant if there are
     * more than three pages.
     */
    paginationType: string;
    /**
     * The total number of items in the
     * paged data. This is used to calculate
     * the number of pages.
     */
    totalItems: number;
    /**
     * The total number of items
     * to render per page. This is
     * used to calculate the number of pages.
     */
    itemsPerPage: number;
    /**
     * Expects a space separated string
     * of classes to be added to the
     * component.
     */
    additionalClasses: string;
    /**
     * Screen reader text for the "Next Page" icon.
     */
    nextLinkText: string;
    /**
     * Screen reader text for the "Previous Page"
     * icon.
     */
    prevLinkText: string;
    /**
     * The value supplied will be assigned
     * to the `data-analytics` attribute on
     * the first link. Intended for an outside
     * library to capture data.
     */
    analyticsStringFirstLink: string;
    /**
     * The value supplied will be assigned
     * to the `data-analytics` attribute on
     * the second link. Intended for an outside
     * library to capture data.
     */
    analyticsStringSecondLink: string;
    /**
     * The value supplied will be assigned
     * to the `data-analytics` attribute on
     * the third link. Intended for an outside
     * library to capture data.
     */
    analyticsStringThirdLink: string;
    /**
     * The value supplied will be assigned
     * to the `data-analytics` attribute on
     * the "Next" link. Intended for an outside
     * library to capture data.
     */
    analyticsStringLinkNext: string;
    /**
     * The value supplied will be assigned
     * to the `data-analytics` attribute on
     * the "Prev" link. Intended for an outside
     * library to capture data.
     */
    analyticsStringLinkPrev: string;
    /**
     * The value supplied will be assigned
     * to the `data-id` attribute on the
     * component. This is intended to be
     * used as a selector for automated
     * tools. This value should be unique
     * per page.
     */
    idString: string;
    /**
     * @ignore
     */
    private _currentPage;
    /**
     * The current page number.
     * In the Default and Long variants,
     * this value corresponds to the active page link.
     */
    currentPage: number;
    /**
     * Accepts a function to run when the
     * previous link is clicked.
     * On click, `previousClick`
     * will emit the click event and current page.
     */
    previousClick: EventEmitter<any>;
    /**
     * Accepts a function
     * to run when the next link is clicked.
     * On click, `nextClick` will emit the click event and current page.
     */
    nextClick: EventEmitter<any>;
    /**
     * Accepts a function to run when the individual page
     * links are clicked. On click, `pageClick` will
     * emit the click event and current page.
     */
    pageClick: EventEmitter<any>;
    /**
     * @ignore
     */
    goToPage(event: any, page: any): void;
    /**
     * @ignore
     */
    goBack(event: any, page: any): void;
    /**
     * @ignore
     */
    goForward(event: any, page: any): void;
    /**
     * @ignore
     * @returns total number of pages based on total
     * number of items and the desired number of
     * items to show per page.
     */
    totalPages(): number;
    /**
     * @ignore
     * @returns true if currently on the last page.
     */
    isLastPage(): boolean;
    /**
     * @ignore
     * @returns true if the component is in
     * either the default or long variant.
     */
    showNumbers(): boolean;
    /**
     * @ignore
     */
    getClasses(): string;
    constructor();
}
