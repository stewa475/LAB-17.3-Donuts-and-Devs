import { EventEmitter } from '@angular/core';
import * as ɵngcc0 from '@angular/core';
export declare class SprkPaginationComponent {
    /**
     * If set to `pager`, the component will render
     * in the Pager variant with no visible number
     * links. Otherwise, the component will render in
     * the Default variant if there three or fewer
     * pages or in the Long variant if there are
     * more than three pages.
     */
    paginationType: string;
    /**
     * The total number of items in the
     * paged data. This is used to calculate
     * the number of pages.
     */
    totalItems: number;
    /**
     * The total number of items
     * to render per page. This is
     * used to calculate the number of pages.
     */
    itemsPerPage: number;
    /**
     * Expects a space separated string
     * of classes to be added to the
     * component.
     */
    additionalClasses: string;
    /**
     * Screen reader text for the "Next Page" icon.
     */
    nextLinkText: string;
    /**
     * Screen reader text for the "Previous Page"
     * icon.
     */
    prevLinkText: string;
    /**
     * The value supplied will be assigned
     * to the `data-analytics` attribute on
     * the first link. Intended for an outside
     * library to capture data.
     */
    analyticsStringFirstLink: string;
    /**
     * The value supplied will be assigned
     * to the `data-analytics` attribute on
     * the second link. Intended for an outside
     * library to capture data.
     */
    analyticsStringSecondLink: string;
    /**
     * The value supplied will be assigned
     * to the `data-analytics` attribute on
     * the third link. Intended for an outside
     * library to capture data.
     */
    analyticsStringThirdLink: string;
    /**
     * The value supplied will be assigned
     * to the `data-analytics` attribute on
     * the "Next" link. Intended for an outside
     * library to capture data.
     */
    analyticsStringLinkNext: string;
    /**
     * The value supplied will be assigned
     * to the `data-analytics` attribute on
     * the "Prev" link. Intended for an outside
     * library to capture data.
     */
    analyticsStringLinkPrev: string;
    /**
     * The value supplied will be assigned
     * to the `data-id` attribute on the
     * component. This is intended to be
     * used as a selector for automated
     * tools. This value should be unique
     * per page.
     */
    idString: string;
    /**
     * @ignore
     */
    private _currentPage;
    /**
     * The current page number.
     * In the Default and Long variants,
     * this value corresponds to the active page link.
     */
    currentPage: number;
    /**
     * Accepts a function to run when the
     * previous link is clicked.
     * On click, `previousClick`
     * will emit the click event and current page.
     */
    previousClick: EventEmitter<any>;
    /**
     * Accepts a function
     * to run when the next link is clicked.
     * On click, `nextClick` will emit the click event and current page.
     */
    nextClick: EventEmitter<any>;
    /**
     * Accepts a function to run when the individual page
     * links are clicked. On click, `pageClick` will
     * emit the click event and current page.
     */
    pageClick: EventEmitter<any>;
    /**
     * @ignore
     */
    goToPage(event: any, page: any): void;
    /**
     * @ignore
     */
    goBack(event: any, page: any): void;
    /**
     * @ignore
     */
    goForward(event: any, page: any): void;
    /**
     * @ignore
     * @returns total number of pages based on total
     * number of items and the desired number of
     * items to show per page.
     */
    totalPages(): number;
    /**
     * @ignore
     * @returns true if currently on the last page.
     */
    isLastPage(): boolean;
    /**
     * @ignore
     * @returns true if the component is in
     * either the default or long variant.
     */
    showNumbers(): boolean;
    /**
     * @ignore
     */
    getClasses(): string;
    constructor();
    static ɵfac: ɵngcc0.ɵɵFactoryDef<SprkPaginationComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<SprkPaginationComponent, "sprk-pagination", never, { "paginationType": "paginationType"; "nextLinkText": "nextLinkText"; "prevLinkText": "prevLinkText"; "currentPage": "currentPage"; "totalItems": "totalItems"; "itemsPerPage": "itemsPerPage"; "additionalClasses": "additionalClasses"; "analyticsStringFirstLink": "analyticsStringFirstLink"; "analyticsStringSecondLink": "analyticsStringSecondLink"; "analyticsStringThirdLink": "analyticsStringThirdLink"; "analyticsStringLinkNext": "analyticsStringLinkNext"; "analyticsStringLinkPrev": "analyticsStringLinkPrev"; "idString": "idString"; }, { "previousClick": "previousClick"; "nextClick": "nextClick"; "pageClick": "pageClick"; }, never, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3Byay1wYWdpbmF0aW9uLmNvbXBvbmVudC5kLnRzIiwic291cmNlcyI6WyJzcHJrLXBhZ2luYXRpb24uY29tcG9uZW50LmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRXZlbnRFbWl0dGVyIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5leHBvcnQgZGVjbGFyZSBjbGFzcyBTcHJrUGFnaW5hdGlvbkNvbXBvbmVudCB7XG4gICAgLyoqXG4gICAgICogSWYgc2V0IHRvIGBwYWdlcmAsIHRoZSBjb21wb25lbnQgd2lsbCByZW5kZXJcbiAgICAgKiBpbiB0aGUgUGFnZXIgdmFyaWFudCB3aXRoIG5vIHZpc2libGUgbnVtYmVyXG4gICAgICogbGlua3MuIE90aGVyd2lzZSwgdGhlIGNvbXBvbmVudCB3aWxsIHJlbmRlciBpblxuICAgICAqIHRoZSBEZWZhdWx0IHZhcmlhbnQgaWYgdGhlcmUgdGhyZWUgb3IgZmV3ZXJcbiAgICAgKiBwYWdlcyBvciBpbiB0aGUgTG9uZyB2YXJpYW50IGlmIHRoZXJlIGFyZVxuICAgICAqIG1vcmUgdGhhbiB0aHJlZSBwYWdlcy5cbiAgICAgKi9cbiAgICBwYWdpbmF0aW9uVHlwZTogc3RyaW5nO1xuICAgIC8qKlxuICAgICAqIFRoZSB0b3RhbCBudW1iZXIgb2YgaXRlbXMgaW4gdGhlXG4gICAgICogcGFnZWQgZGF0YS4gVGhpcyBpcyB1c2VkIHRvIGNhbGN1bGF0ZVxuICAgICAqIHRoZSBudW1iZXIgb2YgcGFnZXMuXG4gICAgICovXG4gICAgdG90YWxJdGVtczogbnVtYmVyO1xuICAgIC8qKlxuICAgICAqIFRoZSB0b3RhbCBudW1iZXIgb2YgaXRlbXNcbiAgICAgKiB0byByZW5kZXIgcGVyIHBhZ2UuIFRoaXMgaXNcbiAgICAgKiB1c2VkIHRvIGNhbGN1bGF0ZSB0aGUgbnVtYmVyIG9mIHBhZ2VzLlxuICAgICAqL1xuICAgIGl0ZW1zUGVyUGFnZTogbnVtYmVyO1xuICAgIC8qKlxuICAgICAqIEV4cGVjdHMgYSBzcGFjZSBzZXBhcmF0ZWQgc3RyaW5nXG4gICAgICogb2YgY2xhc3NlcyB0byBiZSBhZGRlZCB0byB0aGVcbiAgICAgKiBjb21wb25lbnQuXG4gICAgICovXG4gICAgYWRkaXRpb25hbENsYXNzZXM6IHN0cmluZztcbiAgICAvKipcbiAgICAgKiBTY3JlZW4gcmVhZGVyIHRleHQgZm9yIHRoZSBcIk5leHQgUGFnZVwiIGljb24uXG4gICAgICovXG4gICAgbmV4dExpbmtUZXh0OiBzdHJpbmc7XG4gICAgLyoqXG4gICAgICogU2NyZWVuIHJlYWRlciB0ZXh0IGZvciB0aGUgXCJQcmV2aW91cyBQYWdlXCJcbiAgICAgKiBpY29uLlxuICAgICAqL1xuICAgIHByZXZMaW5rVGV4dDogc3RyaW5nO1xuICAgIC8qKlxuICAgICAqIFRoZSB2YWx1ZSBzdXBwbGllZCB3aWxsIGJlIGFzc2lnbmVkXG4gICAgICogdG8gdGhlIGBkYXRhLWFuYWx5dGljc2AgYXR0cmlidXRlIG9uXG4gICAgICogdGhlIGZpcnN0IGxpbmsuIEludGVuZGVkIGZvciBhbiBvdXRzaWRlXG4gICAgICogbGlicmFyeSB0byBjYXB0dXJlIGRhdGEuXG4gICAgICovXG4gICAgYW5hbHl0aWNzU3RyaW5nRmlyc3RMaW5rOiBzdHJpbmc7XG4gICAgLyoqXG4gICAgICogVGhlIHZhbHVlIHN1cHBsaWVkIHdpbGwgYmUgYXNzaWduZWRcbiAgICAgKiB0byB0aGUgYGRhdGEtYW5hbHl0aWNzYCBhdHRyaWJ1dGUgb25cbiAgICAgKiB0aGUgc2Vjb25kIGxpbmsuIEludGVuZGVkIGZvciBhbiBvdXRzaWRlXG4gICAgICogbGlicmFyeSB0byBjYXB0dXJlIGRhdGEuXG4gICAgICovXG4gICAgYW5hbHl0aWNzU3RyaW5nU2Vjb25kTGluazogc3RyaW5nO1xuICAgIC8qKlxuICAgICAqIFRoZSB2YWx1ZSBzdXBwbGllZCB3aWxsIGJlIGFzc2lnbmVkXG4gICAgICogdG8gdGhlIGBkYXRhLWFuYWx5dGljc2AgYXR0cmlidXRlIG9uXG4gICAgICogdGhlIHRoaXJkIGxpbmsuIEludGVuZGVkIGZvciBhbiBvdXRzaWRlXG4gICAgICogbGlicmFyeSB0byBjYXB0dXJlIGRhdGEuXG4gICAgICovXG4gICAgYW5hbHl0aWNzU3RyaW5nVGhpcmRMaW5rOiBzdHJpbmc7XG4gICAgLyoqXG4gICAgICogVGhlIHZhbHVlIHN1cHBsaWVkIHdpbGwgYmUgYXNzaWduZWRcbiAgICAgKiB0byB0aGUgYGRhdGEtYW5hbHl0aWNzYCBhdHRyaWJ1dGUgb25cbiAgICAgKiB0aGUgXCJOZXh0XCIgbGluay4gSW50ZW5kZWQgZm9yIGFuIG91dHNpZGVcbiAgICAgKiBsaWJyYXJ5IHRvIGNhcHR1cmUgZGF0YS5cbiAgICAgKi9cbiAgICBhbmFseXRpY3NTdHJpbmdMaW5rTmV4dDogc3RyaW5nO1xuICAgIC8qKlxuICAgICAqIFRoZSB2YWx1ZSBzdXBwbGllZCB3aWxsIGJlIGFzc2lnbmVkXG4gICAgICogdG8gdGhlIGBkYXRhLWFuYWx5dGljc2AgYXR0cmlidXRlIG9uXG4gICAgICogdGhlIFwiUHJldlwiIGxpbmsuIEludGVuZGVkIGZvciBhbiBvdXRzaWRlXG4gICAgICogbGlicmFyeSB0byBjYXB0dXJlIGRhdGEuXG4gICAgICovXG4gICAgYW5hbHl0aWNzU3RyaW5nTGlua1ByZXY6IHN0cmluZztcbiAgICAvKipcbiAgICAgKiBUaGUgdmFsdWUgc3VwcGxpZWQgd2lsbCBiZSBhc3NpZ25lZFxuICAgICAqIHRvIHRoZSBgZGF0YS1pZGAgYXR0cmlidXRlIG9uIHRoZVxuICAgICAqIGNvbXBvbmVudC4gVGhpcyBpcyBpbnRlbmRlZCB0byBiZVxuICAgICAqIHVzZWQgYXMgYSBzZWxlY3RvciBmb3IgYXV0b21hdGVkXG4gICAgICogdG9vbHMuIFRoaXMgdmFsdWUgc2hvdWxkIGJlIHVuaXF1ZVxuICAgICAqIHBlciBwYWdlLlxuICAgICAqL1xuICAgIGlkU3RyaW5nOiBzdHJpbmc7XG4gICAgLyoqXG4gICAgICogQGlnbm9yZVxuICAgICAqL1xuICAgIHByaXZhdGUgX2N1cnJlbnRQYWdlO1xuICAgIC8qKlxuICAgICAqIFRoZSBjdXJyZW50IHBhZ2UgbnVtYmVyLlxuICAgICAqIEluIHRoZSBEZWZhdWx0IGFuZCBMb25nIHZhcmlhbnRzLFxuICAgICAqIHRoaXMgdmFsdWUgY29ycmVzcG9uZHMgdG8gdGhlIGFjdGl2ZSBwYWdlIGxpbmsuXG4gICAgICovXG4gICAgY3VycmVudFBhZ2U6IG51bWJlcjtcbiAgICAvKipcbiAgICAgKiBBY2NlcHRzIGEgZnVuY3Rpb24gdG8gcnVuIHdoZW4gdGhlXG4gICAgICogcHJldmlvdXMgbGluayBpcyBjbGlja2VkLlxuICAgICAqIE9uIGNsaWNrLCBgcHJldmlvdXNDbGlja2BcbiAgICAgKiB3aWxsIGVtaXQgdGhlIGNsaWNrIGV2ZW50IGFuZCBjdXJyZW50IHBhZ2UuXG4gICAgICovXG4gICAgcHJldmlvdXNDbGljazogRXZlbnRFbWl0dGVyPGFueT47XG4gICAgLyoqXG4gICAgICogQWNjZXB0cyBhIGZ1bmN0aW9uXG4gICAgICogdG8gcnVuIHdoZW4gdGhlIG5leHQgbGluayBpcyBjbGlja2VkLlxuICAgICAqIE9uIGNsaWNrLCBgbmV4dENsaWNrYCB3aWxsIGVtaXQgdGhlIGNsaWNrIGV2ZW50IGFuZCBjdXJyZW50IHBhZ2UuXG4gICAgICovXG4gICAgbmV4dENsaWNrOiBFdmVudEVtaXR0ZXI8YW55PjtcbiAgICAvKipcbiAgICAgKiBBY2NlcHRzIGEgZnVuY3Rpb24gdG8gcnVuIHdoZW4gdGhlIGluZGl2aWR1YWwgcGFnZVxuICAgICAqIGxpbmtzIGFyZSBjbGlja2VkLiBPbiBjbGljaywgYHBhZ2VDbGlja2Agd2lsbFxuICAgICAqIGVtaXQgdGhlIGNsaWNrIGV2ZW50IGFuZCBjdXJyZW50IHBhZ2UuXG4gICAgICovXG4gICAgcGFnZUNsaWNrOiBFdmVudEVtaXR0ZXI8YW55PjtcbiAgICAvKipcbiAgICAgKiBAaWdub3JlXG4gICAgICovXG4gICAgZ29Ub1BhZ2UoZXZlbnQ6IGFueSwgcGFnZTogYW55KTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBAaWdub3JlXG4gICAgICovXG4gICAgZ29CYWNrKGV2ZW50OiBhbnksIHBhZ2U6IGFueSk6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogQGlnbm9yZVxuICAgICAqL1xuICAgIGdvRm9yd2FyZChldmVudDogYW55LCBwYWdlOiBhbnkpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIEBpZ25vcmVcbiAgICAgKiBAcmV0dXJucyB0b3RhbCBudW1iZXIgb2YgcGFnZXMgYmFzZWQgb24gdG90YWxcbiAgICAgKiBudW1iZXIgb2YgaXRlbXMgYW5kIHRoZSBkZXNpcmVkIG51bWJlciBvZlxuICAgICAqIGl0ZW1zIHRvIHNob3cgcGVyIHBhZ2UuXG4gICAgICovXG4gICAgdG90YWxQYWdlcygpOiBudW1iZXI7XG4gICAgLyoqXG4gICAgICogQGlnbm9yZVxuICAgICAqIEByZXR1cm5zIHRydWUgaWYgY3VycmVudGx5IG9uIHRoZSBsYXN0IHBhZ2UuXG4gICAgICovXG4gICAgaXNMYXN0UGFnZSgpOiBib29sZWFuO1xuICAgIC8qKlxuICAgICAqIEBpZ25vcmVcbiAgICAgKiBAcmV0dXJucyB0cnVlIGlmIHRoZSBjb21wb25lbnQgaXMgaW5cbiAgICAgKiBlaXRoZXIgdGhlIGRlZmF1bHQgb3IgbG9uZyB2YXJpYW50LlxuICAgICAqL1xuICAgIHNob3dOdW1iZXJzKCk6IGJvb2xlYW47XG4gICAgLyoqXG4gICAgICogQGlnbm9yZVxuICAgICAqL1xuICAgIGdldENsYXNzZXMoKTogc3RyaW5nO1xuICAgIGNvbnN0cnVjdG9yKCk7XG59XG4iXX0=