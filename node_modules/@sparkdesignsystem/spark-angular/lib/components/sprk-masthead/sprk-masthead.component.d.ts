import { Renderer2, AfterContentInit } from '@angular/core';
import { Router } from '@angular/router';
import * as _ from 'lodash';
import { ISprkNarrowNavLink, ISprkNarrowSelector, ISprkBigNavLink } from './sprk-masthead.interfaces';
import * as ɵngcc0 from '@angular/core';
export declare class SprkMastheadComponent implements AfterContentInit {
    private renderer;
    /**
     * @ignore
     */
    constructor(renderer: Renderer2, router: Router);
    /**
     *  The `href` value of the logo.
     */
    logoHref: string;
    /**
     * The value supplied will be used as
     * screen reader text that is visually hidden
     * for the link that wraps the logo.
     */
    logoLinkScreenReaderText: string;
    /**
     * Expects a space separated string
     * of classes to be added to the
     * component.
     */
    additionalClasses: string;
    /**
     * Expects a space separated string
     * of classes to be added to the
     * big navigation link container.
     */
    additionalBigNavClasses: string;
    /**
     * Expects a space separated string
     * of classes to be added to the
     * narrow navigation container.
     */
    additionalNarrowNavClasses: string;
    /**
     * Expects an array of
     * [ISprkNarrowNavLink](https://github.com/sparkdesignsystem/spark-design-system/tree/master/src/angular/projects/spark-angular/src/lib/components/sprk-masthead/sprk-masthead.interfaces.ts)
     * to be
     * represented in the narrow nav element
     * of the Masthead component.
     */
    narrowNavLinks: ISprkNarrowNavLink[];
    /**
     * Represents the initial state of the
     * narrow nav element of the Masthead component.
     */
    isNarrowNavOpen: boolean;
    /**
     * The value supplied will be assigned
     * to the `data-id` attribute on the
     * component. This is intended to be
     * used as a selector for automated
     * tools. This value should be unique
     * per page.
     */
    idString: string;
    /**
     * Expects an array of
     * [ISprkBigNavLink](https://github.com/sparkdesignsystem/spark-design-system/tree/master/src/angular/projects/spark-angular/src/lib/components/sprk-masthead/sprk-masthead.interfaces.ts)
     * to be
     * used to create the Big Navigation of
     * the Masthead component.
     */
    bigNavLinks: ISprkBigNavLink[];
    /**
     * Expects a [ISprkNarrowSelector](https://github.com/sparkdesignsystem/spark-design-system/tree/master/src/angular/projects/spark-angular/src/lib/components/sprk-masthead/sprk-masthead.interfaces.ts)
     * object that
     * represents dropdown choices inside the dropdown
     * rendered in the Narrow Navigation.
     */
    narrowSelector: ISprkNarrowSelector;
    /**
     * A string that is used to set the `id` on the narrow nav
     * and the `aria-controls` for the menu trigger button.
     */
    narrowNavId: string;
    /**
     * @ignore
     */
    iconType: string;
    /**
     * @ignore
     */
    componentID: string;
    /**
     * @ignore
     */
    controls_id: string;
    /**
     * @ignore
     */
    isScrolled: boolean;
    /**
     * @ignore
     */
    isNarrowLayout: boolean;
    /**
     * @ignore
     */
    scrollDirection: string;
    /**
     * @ignore
     */
    isHidden: boolean;
    /**
     * @ignore
     */
    isNarrowOnResize: boolean;
    /**
     * @ignore
     */
    scrollPosition: number;
    /**
     * @ignore
     */
    throttledCheckScrollDirection: (() => void) & _.Cancelable;
    /**
     * @ignore
     */
    throttledUpdateLayoutState: (() => void) & _.Cancelable;
    /**
     * @ignore
     * Closes the narrow navigation menu
     * if it is left open when
     * the viewport is expanded.
     */
    handleResizeEvent(): void;
    /**
     * @ignore
     */
    onScroll(event: any): void;
    /**
     * @ignore
     * Handles when viewport size changes to
     * large while narrow nav is hidden.
     */
    onResize(event: any): void;
    /**
     * @ignore
     */
    updateLayoutState(): void;
    /**
     * @ignore
     */
    ngAfterContentInit(): void;
    /**
     * @ignore
     */
    isElementVisible(selector: any): boolean;
    /**
     * @ignore
     */
    scrollYDirection(): "up" | "down";
    /**
     * @ignore
     */
    checkScrollDirection(): void;
    /**
     * @ignore
     */
    getClasses(): string;
    /**
     * @ignore
     */
    getNarrowNavClasses(): string;
    /**
     * @ignore
     */
    getSecondaryNavClasses(): string;
    /**
     * @ignore
     */
    toggleNarrowNav(event: any): void;
    /**
     * @ignore
     */
    openNarrowNav(): void;
    /**
     * @ignore
     */
    closeNarrowNav(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<SprkMastheadComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<SprkMastheadComponent, "sprk-masthead", never, { "logoHref": "logoHref"; "logoLinkScreenReaderText": "logoLinkScreenReaderText"; "isNarrowNavOpen": "isNarrowNavOpen"; "narrowNavId": "narrowNavId"; "additionalClasses": "additionalClasses"; "additionalBigNavClasses": "additionalBigNavClasses"; "additionalNarrowNavClasses": "additionalNarrowNavClasses"; "narrowNavLinks": "narrowNavLinks"; "idString": "idString"; "bigNavLinks": "bigNavLinks"; "narrowSelector": "narrowSelector"; }, {}, never, ["[logo-slot]", "[navItem-slot]", "[little-nav-slot]", "[utility-slot]", "[narrowNavFooter]"]>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3Byay1tYXN0aGVhZC5jb21wb25lbnQuZC50cyIsInNvdXJjZXMiOlsic3Byay1tYXN0aGVhZC5jb21wb25lbnQuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBSZW5kZXJlcjIsIEFmdGVyQ29udGVudEluaXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFJvdXRlciB9IGZyb20gJ0Bhbmd1bGFyL3JvdXRlcic7XG5pbXBvcnQgKiBhcyBfIGZyb20gJ2xvZGFzaCc7XG5pbXBvcnQgeyBJU3Bya05hcnJvd05hdkxpbmssIElTcHJrTmFycm93U2VsZWN0b3IsIElTcHJrQmlnTmF2TGluayB9IGZyb20gJy4vc3Byay1tYXN0aGVhZC5pbnRlcmZhY2VzJztcbmV4cG9ydCBkZWNsYXJlIGNsYXNzIFNwcmtNYXN0aGVhZENvbXBvbmVudCBpbXBsZW1lbnRzIEFmdGVyQ29udGVudEluaXQge1xuICAgIHByaXZhdGUgcmVuZGVyZXI7XG4gICAgLyoqXG4gICAgICogQGlnbm9yZVxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKHJlbmRlcmVyOiBSZW5kZXJlcjIsIHJvdXRlcjogUm91dGVyKTtcbiAgICAvKipcbiAgICAgKiAgVGhlIGBocmVmYCB2YWx1ZSBvZiB0aGUgbG9nby5cbiAgICAgKi9cbiAgICBsb2dvSHJlZjogc3RyaW5nO1xuICAgIC8qKlxuICAgICAqIFRoZSB2YWx1ZSBzdXBwbGllZCB3aWxsIGJlIHVzZWQgYXNcbiAgICAgKiBzY3JlZW4gcmVhZGVyIHRleHQgdGhhdCBpcyB2aXN1YWxseSBoaWRkZW5cbiAgICAgKiBmb3IgdGhlIGxpbmsgdGhhdCB3cmFwcyB0aGUgbG9nby5cbiAgICAgKi9cbiAgICBsb2dvTGlua1NjcmVlblJlYWRlclRleHQ6IHN0cmluZztcbiAgICAvKipcbiAgICAgKiBFeHBlY3RzIGEgc3BhY2Ugc2VwYXJhdGVkIHN0cmluZ1xuICAgICAqIG9mIGNsYXNzZXMgdG8gYmUgYWRkZWQgdG8gdGhlXG4gICAgICogY29tcG9uZW50LlxuICAgICAqL1xuICAgIGFkZGl0aW9uYWxDbGFzc2VzOiBzdHJpbmc7XG4gICAgLyoqXG4gICAgICogRXhwZWN0cyBhIHNwYWNlIHNlcGFyYXRlZCBzdHJpbmdcbiAgICAgKiBvZiBjbGFzc2VzIHRvIGJlIGFkZGVkIHRvIHRoZVxuICAgICAqIGJpZyBuYXZpZ2F0aW9uIGxpbmsgY29udGFpbmVyLlxuICAgICAqL1xuICAgIGFkZGl0aW9uYWxCaWdOYXZDbGFzc2VzOiBzdHJpbmc7XG4gICAgLyoqXG4gICAgICogRXhwZWN0cyBhIHNwYWNlIHNlcGFyYXRlZCBzdHJpbmdcbiAgICAgKiBvZiBjbGFzc2VzIHRvIGJlIGFkZGVkIHRvIHRoZVxuICAgICAqIG5hcnJvdyBuYXZpZ2F0aW9uIGNvbnRhaW5lci5cbiAgICAgKi9cbiAgICBhZGRpdGlvbmFsTmFycm93TmF2Q2xhc3Nlczogc3RyaW5nO1xuICAgIC8qKlxuICAgICAqIEV4cGVjdHMgYW4gYXJyYXkgb2ZcbiAgICAgKiBbSVNwcmtOYXJyb3dOYXZMaW5rXShodHRwczovL2dpdGh1Yi5jb20vc3BhcmtkZXNpZ25zeXN0ZW0vc3BhcmstZGVzaWduLXN5c3RlbS90cmVlL21hc3Rlci9zcmMvYW5ndWxhci9wcm9qZWN0cy9zcGFyay1hbmd1bGFyL3NyYy9saWIvY29tcG9uZW50cy9zcHJrLW1hc3RoZWFkL3NwcmstbWFzdGhlYWQuaW50ZXJmYWNlcy50cylcbiAgICAgKiB0byBiZVxuICAgICAqIHJlcHJlc2VudGVkIGluIHRoZSBuYXJyb3cgbmF2IGVsZW1lbnRcbiAgICAgKiBvZiB0aGUgTWFzdGhlYWQgY29tcG9uZW50LlxuICAgICAqL1xuICAgIG5hcnJvd05hdkxpbmtzOiBJU3Bya05hcnJvd05hdkxpbmtbXTtcbiAgICAvKipcbiAgICAgKiBSZXByZXNlbnRzIHRoZSBpbml0aWFsIHN0YXRlIG9mIHRoZVxuICAgICAqIG5hcnJvdyBuYXYgZWxlbWVudCBvZiB0aGUgTWFzdGhlYWQgY29tcG9uZW50LlxuICAgICAqL1xuICAgIGlzTmFycm93TmF2T3BlbjogYm9vbGVhbjtcbiAgICAvKipcbiAgICAgKiBUaGUgdmFsdWUgc3VwcGxpZWQgd2lsbCBiZSBhc3NpZ25lZFxuICAgICAqIHRvIHRoZSBgZGF0YS1pZGAgYXR0cmlidXRlIG9uIHRoZVxuICAgICAqIGNvbXBvbmVudC4gVGhpcyBpcyBpbnRlbmRlZCB0byBiZVxuICAgICAqIHVzZWQgYXMgYSBzZWxlY3RvciBmb3IgYXV0b21hdGVkXG4gICAgICogdG9vbHMuIFRoaXMgdmFsdWUgc2hvdWxkIGJlIHVuaXF1ZVxuICAgICAqIHBlciBwYWdlLlxuICAgICAqL1xuICAgIGlkU3RyaW5nOiBzdHJpbmc7XG4gICAgLyoqXG4gICAgICogRXhwZWN0cyBhbiBhcnJheSBvZlxuICAgICAqIFtJU3Bya0JpZ05hdkxpbmtdKGh0dHBzOi8vZ2l0aHViLmNvbS9zcGFya2Rlc2lnbnN5c3RlbS9zcGFyay1kZXNpZ24tc3lzdGVtL3RyZWUvbWFzdGVyL3NyYy9hbmd1bGFyL3Byb2plY3RzL3NwYXJrLWFuZ3VsYXIvc3JjL2xpYi9jb21wb25lbnRzL3NwcmstbWFzdGhlYWQvc3Byay1tYXN0aGVhZC5pbnRlcmZhY2VzLnRzKVxuICAgICAqIHRvIGJlXG4gICAgICogdXNlZCB0byBjcmVhdGUgdGhlIEJpZyBOYXZpZ2F0aW9uIG9mXG4gICAgICogdGhlIE1hc3RoZWFkIGNvbXBvbmVudC5cbiAgICAgKi9cbiAgICBiaWdOYXZMaW5rczogSVNwcmtCaWdOYXZMaW5rW107XG4gICAgLyoqXG4gICAgICogRXhwZWN0cyBhIFtJU3Bya05hcnJvd1NlbGVjdG9yXShodHRwczovL2dpdGh1Yi5jb20vc3BhcmtkZXNpZ25zeXN0ZW0vc3BhcmstZGVzaWduLXN5c3RlbS90cmVlL21hc3Rlci9zcmMvYW5ndWxhci9wcm9qZWN0cy9zcGFyay1hbmd1bGFyL3NyYy9saWIvY29tcG9uZW50cy9zcHJrLW1hc3RoZWFkL3NwcmstbWFzdGhlYWQuaW50ZXJmYWNlcy50cylcbiAgICAgKiBvYmplY3QgdGhhdFxuICAgICAqIHJlcHJlc2VudHMgZHJvcGRvd24gY2hvaWNlcyBpbnNpZGUgdGhlIGRyb3Bkb3duXG4gICAgICogcmVuZGVyZWQgaW4gdGhlIE5hcnJvdyBOYXZpZ2F0aW9uLlxuICAgICAqL1xuICAgIG5hcnJvd1NlbGVjdG9yOiBJU3Bya05hcnJvd1NlbGVjdG9yO1xuICAgIC8qKlxuICAgICAqIEEgc3RyaW5nIHRoYXQgaXMgdXNlZCB0byBzZXQgdGhlIGBpZGAgb24gdGhlIG5hcnJvdyBuYXZcbiAgICAgKiBhbmQgdGhlIGBhcmlhLWNvbnRyb2xzYCBmb3IgdGhlIG1lbnUgdHJpZ2dlciBidXR0b24uXG4gICAgICovXG4gICAgbmFycm93TmF2SWQ6IHN0cmluZztcbiAgICAvKipcbiAgICAgKiBAaWdub3JlXG4gICAgICovXG4gICAgaWNvblR5cGU6IHN0cmluZztcbiAgICAvKipcbiAgICAgKiBAaWdub3JlXG4gICAgICovXG4gICAgY29tcG9uZW50SUQ6IHN0cmluZztcbiAgICAvKipcbiAgICAgKiBAaWdub3JlXG4gICAgICovXG4gICAgY29udHJvbHNfaWQ6IHN0cmluZztcbiAgICAvKipcbiAgICAgKiBAaWdub3JlXG4gICAgICovXG4gICAgaXNTY3JvbGxlZDogYm9vbGVhbjtcbiAgICAvKipcbiAgICAgKiBAaWdub3JlXG4gICAgICovXG4gICAgaXNOYXJyb3dMYXlvdXQ6IGJvb2xlYW47XG4gICAgLyoqXG4gICAgICogQGlnbm9yZVxuICAgICAqL1xuICAgIHNjcm9sbERpcmVjdGlvbjogc3RyaW5nO1xuICAgIC8qKlxuICAgICAqIEBpZ25vcmVcbiAgICAgKi9cbiAgICBpc0hpZGRlbjogYm9vbGVhbjtcbiAgICAvKipcbiAgICAgKiBAaWdub3JlXG4gICAgICovXG4gICAgaXNOYXJyb3dPblJlc2l6ZTogYm9vbGVhbjtcbiAgICAvKipcbiAgICAgKiBAaWdub3JlXG4gICAgICovXG4gICAgc2Nyb2xsUG9zaXRpb246IG51bWJlcjtcbiAgICAvKipcbiAgICAgKiBAaWdub3JlXG4gICAgICovXG4gICAgdGhyb3R0bGVkQ2hlY2tTY3JvbGxEaXJlY3Rpb246ICgoKSA9PiB2b2lkKSAmIF8uQ2FuY2VsYWJsZTtcbiAgICAvKipcbiAgICAgKiBAaWdub3JlXG4gICAgICovXG4gICAgdGhyb3R0bGVkVXBkYXRlTGF5b3V0U3RhdGU6ICgoKSA9PiB2b2lkKSAmIF8uQ2FuY2VsYWJsZTtcbiAgICAvKipcbiAgICAgKiBAaWdub3JlXG4gICAgICogQ2xvc2VzIHRoZSBuYXJyb3cgbmF2aWdhdGlvbiBtZW51XG4gICAgICogaWYgaXQgaXMgbGVmdCBvcGVuIHdoZW5cbiAgICAgKiB0aGUgdmlld3BvcnQgaXMgZXhwYW5kZWQuXG4gICAgICovXG4gICAgaGFuZGxlUmVzaXplRXZlbnQoKTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBAaWdub3JlXG4gICAgICovXG4gICAgb25TY3JvbGwoZXZlbnQ6IGFueSk6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogQGlnbm9yZVxuICAgICAqIEhhbmRsZXMgd2hlbiB2aWV3cG9ydCBzaXplIGNoYW5nZXMgdG9cbiAgICAgKiBsYXJnZSB3aGlsZSBuYXJyb3cgbmF2IGlzIGhpZGRlbi5cbiAgICAgKi9cbiAgICBvblJlc2l6ZShldmVudDogYW55KTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBAaWdub3JlXG4gICAgICovXG4gICAgdXBkYXRlTGF5b3V0U3RhdGUoKTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBAaWdub3JlXG4gICAgICovXG4gICAgbmdBZnRlckNvbnRlbnRJbml0KCk6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogQGlnbm9yZVxuICAgICAqL1xuICAgIGlzRWxlbWVudFZpc2libGUoc2VsZWN0b3I6IGFueSk6IGJvb2xlYW47XG4gICAgLyoqXG4gICAgICogQGlnbm9yZVxuICAgICAqL1xuICAgIHNjcm9sbFlEaXJlY3Rpb24oKTogXCJ1cFwiIHwgXCJkb3duXCI7XG4gICAgLyoqXG4gICAgICogQGlnbm9yZVxuICAgICAqL1xuICAgIGNoZWNrU2Nyb2xsRGlyZWN0aW9uKCk6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogQGlnbm9yZVxuICAgICAqL1xuICAgIGdldENsYXNzZXMoKTogc3RyaW5nO1xuICAgIC8qKlxuICAgICAqIEBpZ25vcmVcbiAgICAgKi9cbiAgICBnZXROYXJyb3dOYXZDbGFzc2VzKCk6IHN0cmluZztcbiAgICAvKipcbiAgICAgKiBAaWdub3JlXG4gICAgICovXG4gICAgZ2V0U2Vjb25kYXJ5TmF2Q2xhc3NlcygpOiBzdHJpbmc7XG4gICAgLyoqXG4gICAgICogQGlnbm9yZVxuICAgICAqL1xuICAgIHRvZ2dsZU5hcnJvd05hdihldmVudDogYW55KTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBAaWdub3JlXG4gICAgICovXG4gICAgb3Blbk5hcnJvd05hdigpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIEBpZ25vcmVcbiAgICAgKi9cbiAgICBjbG9zZU5hcnJvd05hdigpOiB2b2lkO1xufVxuIl19