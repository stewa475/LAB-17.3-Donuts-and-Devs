import { Renderer2, AfterContentInit } from '@angular/core';
import { Router } from '@angular/router';
import * as _ from 'lodash';
import { ISprkNarrowNavLink, ISprkNarrowSelector, ISprkBigNavLink } from './sprk-masthead.interfaces';
export declare class SprkMastheadComponent implements AfterContentInit {
    private renderer;
    /**
     * @ignore
     */
    constructor(renderer: Renderer2, router: Router);
    /**
     *  The `href` value of the logo.
     */
    logoHref: string;
    /**
     * The value supplied will be used as
     * screen reader text that is visually hidden
     * for the link that wraps the logo.
     */
    logoLinkScreenReaderText: string;
    /**
     * Expects a space separated string
     * of classes to be added to the
     * component.
     */
    additionalClasses: string;
    /**
     * Expects a space separated string
     * of classes to be added to the
     * big navigation link container.
     */
    additionalBigNavClasses: string;
    /**
     * Expects a space separated string
     * of classes to be added to the
     * narrow navigation container.
     */
    additionalNarrowNavClasses: string;
    /**
     * Expects an array of
     * [ISprkNarrowNavLink](https://github.com/sparkdesignsystem/spark-design-system/tree/master/src/angular/projects/spark-angular/src/lib/components/sprk-masthead/sprk-masthead.interfaces.ts)
     * to be
     * represented in the narrow nav element
     * of the Masthead component.
     */
    narrowNavLinks: ISprkNarrowNavLink[];
    /**
     * Represents the initial state of the
     * narrow nav element of the Masthead component.
     */
    isNarrowNavOpen: boolean;
    /**
     * The value supplied will be assigned
     * to the `data-id` attribute on the
     * component. This is intended to be
     * used as a selector for automated
     * tools. This value should be unique
     * per page.
     */
    idString: string;
    /**
     * Expects an array of
     * [ISprkBigNavLink](https://github.com/sparkdesignsystem/spark-design-system/tree/master/src/angular/projects/spark-angular/src/lib/components/sprk-masthead/sprk-masthead.interfaces.ts)
     * to be
     * used to create the Big Navigation of
     * the Masthead component.
     */
    bigNavLinks: ISprkBigNavLink[];
    /**
     * Expects a [ISprkNarrowSelector](https://github.com/sparkdesignsystem/spark-design-system/tree/master/src/angular/projects/spark-angular/src/lib/components/sprk-masthead/sprk-masthead.interfaces.ts)
     * object that
     * represents dropdown choices inside the dropdown
     * rendered in the Narrow Navigation.
     */
    narrowSelector: ISprkNarrowSelector;
    /**
     * A string that is used to set the `id` on the narrow nav
     * and the `aria-controls` for the menu trigger button.
     */
    narrowNavId: string;
    /**
     * @ignore
     */
    iconType: string;
    /**
     * @ignore
     */
    componentID: string;
    /**
     * @ignore
     */
    controls_id: string;
    /**
     * @ignore
     */
    isScrolled: boolean;
    /**
     * @ignore
     */
    isNarrowLayout: boolean;
    /**
     * @ignore
     */
    scrollDirection: string;
    /**
     * @ignore
     */
    isHidden: boolean;
    /**
     * @ignore
     */
    isNarrowOnResize: boolean;
    /**
     * @ignore
     */
    scrollPosition: number;
    /**
     * @ignore
     */
    throttledCheckScrollDirection: (() => void) & _.Cancelable;
    /**
     * @ignore
     */
    throttledUpdateLayoutState: (() => void) & _.Cancelable;
    /**
     * @ignore
     * Closes the narrow navigation menu
     * if it is left open when
     * the viewport is expanded.
     */
    handleResizeEvent(): void;
    /**
     * @ignore
     */
    onScroll(event: any): void;
    /**
     * @ignore
     * Handles when viewport size changes to
     * large while narrow nav is hidden.
     */
    onResize(event: any): void;
    /**
     * @ignore
     */
    updateLayoutState(): void;
    /**
     * @ignore
     */
    ngAfterContentInit(): void;
    /**
     * @ignore
     */
    isElementVisible(selector: any): boolean;
    /**
     * @ignore
     */
    scrollYDirection(): "up" | "down";
    /**
     * @ignore
     */
    checkScrollDirection(): void;
    /**
     * @ignore
     */
    getClasses(): string;
    /**
     * @ignore
     */
    getNarrowNavClasses(): string;
    /**
     * @ignore
     */
    getSecondaryNavClasses(): string;
    /**
     * @ignore
     */
    toggleNarrowNav(event: any): void;
    /**
     * @ignore
     */
    openNarrowNav(): void;
    /**
     * @ignore
     */
    closeNarrowNav(): void;
}
