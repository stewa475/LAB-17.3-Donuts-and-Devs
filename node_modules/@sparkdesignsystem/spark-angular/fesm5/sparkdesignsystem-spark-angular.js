import { __decorate, __metadata, __assign } from 'tslib';
import { ElementRef, HostListener, Directive, NgModule, Input, ContentChild, Component, Renderer2, ContentChildren, QueryList, HostBinding, EventEmitter, Output, ViewChild, TemplateRef } from '@angular/core';
import { CommonModule } from '@angular/common';
import { RouterModule, Router, NavigationEnd } from '@angular/router';
import TinyDatePicker from 'tiny-date-picker';
import { FormsModule, ReactiveFormsModule } from '@angular/forms';
import { uniqueId, throttle } from 'lodash';
import uniqueId$1 from 'lodash/uniqueId';
import { trigger, state, style, transition, animate } from '@angular/animations';
import 'focus-visible';

var environment = {
    version: '10.0.0'
};

var SprkFormatterDateDirective = /** @class */ (function () {
    function SprkFormatterDateDirective(ref) {
        this.ref = ref;
    }
    SprkFormatterDateDirective.prototype.onFocus = function (value) {
        this.ref.nativeElement.value = this.formatDate(value);
    };
    SprkFormatterDateDirective.prototype.formatDate = function (value) {
        var m = value.match(
        // tslint:disable-next-line:max-line-length
        /^(((0[13578]|1[02])([/-]?)(0[1-9]|[12]\d|3[01])|(0[469]|11)([/-]?)(0[1-9]|[12]\d|30)|02([/-]?)((0[1-9])|[12]\d))(\4|\7|\9)[12]\d{3})?$/);
        var newValue = '';
        var cleanValue = value.replace(/[/-]/g, '');
        if (m) {
            for (var i = 0; i < cleanValue.length; i += 1) {
                if (i === 1 || i === 3) {
                    newValue += cleanValue[i] + "/";
                }
                else {
                    newValue += cleanValue[i];
                }
            }
            return newValue;
        }
        else {
            return value;
        }
    };
    SprkFormatterDateDirective.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    __decorate([
        HostListener('input', ['$event.target.value']),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [Object]),
        __metadata("design:returntype", void 0)
    ], SprkFormatterDateDirective.prototype, "onFocus", null);
    SprkFormatterDateDirective = __decorate([
        Directive({
            selector: '[sprkFormatterDate]'
        }),
        __metadata("design:paramtypes", [ElementRef])
    ], SprkFormatterDateDirective);
    return SprkFormatterDateDirective;
}());

var SprkFormatterDateModule = /** @class */ (function () {
    function SprkFormatterDateModule() {
    }
    SprkFormatterDateModule = __decorate([
        NgModule({
            imports: [CommonModule, RouterModule],
            declarations: [SprkFormatterDateDirective],
            exports: [SprkFormatterDateDirective]
        })
    ], SprkFormatterDateModule);
    return SprkFormatterDateModule;
}());

var SprkFormatterMonetaryDirective = /** @class */ (function () {
    function SprkFormatterMonetaryDirective(ref) {
        this.ref = ref;
    }
    SprkFormatterMonetaryDirective.prototype.onBlur = function (value) {
        this.ref.nativeElement.value = this.formatMonetary(value);
    };
    SprkFormatterMonetaryDirective.prototype.formatMonetary = function (value) {
        var number;
        if (this.ref.nativeElement.validity.valid) {
            number = Number(value.replace(/[\$,]/g, ''));
            if (isNaN(number)) {
                return value;
            }
            return number
                .toLocaleString('en-US', { style: 'currency', currency: 'USD' })
                .replace(/\$/g, '');
        }
        return value;
    };
    SprkFormatterMonetaryDirective.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    __decorate([
        HostListener('blur', ['this.ref.nativeElement.value']),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [Object]),
        __metadata("design:returntype", void 0)
    ], SprkFormatterMonetaryDirective.prototype, "onBlur", null);
    SprkFormatterMonetaryDirective = __decorate([
        Directive({
            selector: '[sprkFormatterMonetary]'
        }),
        __metadata("design:paramtypes", [ElementRef])
    ], SprkFormatterMonetaryDirective);
    return SprkFormatterMonetaryDirective;
}());

var SprkFormatterMonetaryModule = /** @class */ (function () {
    function SprkFormatterMonetaryModule() {
    }
    SprkFormatterMonetaryModule = __decorate([
        NgModule({
            imports: [CommonModule, RouterModule],
            declarations: [SprkFormatterMonetaryDirective],
            exports: [SprkFormatterMonetaryDirective]
        })
    ], SprkFormatterMonetaryModule);
    return SprkFormatterMonetaryModule;
}());

var SprkFormatterPhoneNumberDirective = /** @class */ (function () {
    function SprkFormatterPhoneNumberDirective(ref) {
        this.ref = ref;
    }
    SprkFormatterPhoneNumberDirective.prototype.onFocus = function (value) {
        this.ref.nativeElement.value = this.formatPhone(value);
    };
    SprkFormatterPhoneNumberDirective.prototype.formatPhone = function (value) {
        var newValue = ("" + value).replace(/\D/g, '');
        var m = newValue.match(/^(\d{3})(\d{3})(\d{4})$/);
        if (m) {
            return "(" + m[1] + ") " + m[2] + "-" + m[3];
        }
        else {
            return value;
        }
    };
    SprkFormatterPhoneNumberDirective.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    __decorate([
        HostListener('input', ['$event.target.value']),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [Object]),
        __metadata("design:returntype", void 0)
    ], SprkFormatterPhoneNumberDirective.prototype, "onFocus", null);
    SprkFormatterPhoneNumberDirective = __decorate([
        Directive({
            selector: '[sprkFormatterPhoneNumber]'
        }),
        __metadata("design:paramtypes", [ElementRef])
    ], SprkFormatterPhoneNumberDirective);
    return SprkFormatterPhoneNumberDirective;
}());

var SprkFormatterPhoneNumberModule = /** @class */ (function () {
    function SprkFormatterPhoneNumberModule() {
    }
    SprkFormatterPhoneNumberModule = __decorate([
        NgModule({
            imports: [CommonModule, RouterModule],
            declarations: [SprkFormatterPhoneNumberDirective],
            exports: [SprkFormatterPhoneNumberDirective]
        })
    ], SprkFormatterPhoneNumberModule);
    return SprkFormatterPhoneNumberModule;
}());

var SprkFormatterSsnDirective = /** @class */ (function () {
    function SprkFormatterSsnDirective(ref) {
        this.ref = ref;
    }
    SprkFormatterSsnDirective.prototype.onFocus = function (value) {
        this.ref.nativeElement.value = this.formatSSN(value);
    };
    SprkFormatterSsnDirective.prototype.formatSSN = function (value) {
        var m = value.match(/(^(?!666|000|9\d{2})\d{3}([-]{0,1})(?!00)\d{2}\1(?!0{4})\2\d{4}$)|^$/);
        if (m) {
            var val_1 = value.trim().replace(/[ -]/g, '');
            var newVal_1 = '';
            var sizes = [3, 2, 4];
            sizes.forEach(function (size) {
                if (val_1.length > size) {
                    newVal_1 += val_1.substr(0, size) + "-";
                    val_1 = val_1.substr(size);
                }
            });
            newVal_1 += val_1;
            return newVal_1;
        }
        return value;
    };
    SprkFormatterSsnDirective.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    __decorate([
        HostListener('input', ['$event.target.value']),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [Object]),
        __metadata("design:returntype", void 0)
    ], SprkFormatterSsnDirective.prototype, "onFocus", null);
    SprkFormatterSsnDirective = __decorate([
        Directive({
            selector: '[sprkFormatterSsn]'
        }),
        __metadata("design:paramtypes", [ElementRef])
    ], SprkFormatterSsnDirective);
    return SprkFormatterSsnDirective;
}());

var SprkFormatterSsnModule = /** @class */ (function () {
    function SprkFormatterSsnModule() {
    }
    SprkFormatterSsnModule = __decorate([
        NgModule({
            imports: [CommonModule, RouterModule],
            declarations: [SprkFormatterSsnDirective],
            exports: [SprkFormatterSsnDirective]
        })
    ], SprkFormatterSsnModule);
    return SprkFormatterSsnModule;
}());

var SprkDatepickerDirective = /** @class */ (function () {
    /**
     * @ignore
     */
    function SprkDatepickerDirective(ref) {
        this.ref = ref;
    }
    SprkDatepickerDirective.prototype.ngOnInit = function () {
        var _this = this;
        var input = this.ref.nativeElement;
        var tdpConfig = {
            mode: 'dp-below',
            lang: {
                days: ['S', 'M', 'T', 'W', 'T', 'F', 'S']
            },
            min: '01/1/2008',
            max: '01/1/2068',
            format: function (date) {
                return date
                    .toLocaleDateString('en-US', {
                    month: '2-digit',
                    day: '2-digit',
                    year: 'numeric'
                })
                    .replace(/[^ -~]/g, '');
            }
        };
        if (TinyDatePicker) {
            TinyDatePicker(input, __assign(__assign({}, tdpConfig), this.sprkDatePickerConfig)).on('select', function () {
                var event;
                if (typeof (Event) === 'function') {
                    event = new Event('input');
                }
                else {
                    event = document.createEvent('Event');
                    event.initEvent('input', true, true);
                }
                _this.ref.nativeElement.dispatchEvent(event);
                _this.ref.nativeElement.focus();
            });
        }
    };
    SprkDatepickerDirective.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], SprkDatepickerDirective.prototype, "sprkDatePickerConfig", void 0);
    SprkDatepickerDirective = __decorate([
        Directive({
            selector: '[sprkDatepicker]'
        }),
        __metadata("design:paramtypes", [ElementRef])
    ], SprkDatepickerDirective);
    return SprkDatepickerDirective;
}());

var SprkDatepickerModule = /** @class */ (function () {
    function SprkDatepickerModule() {
    }
    SprkDatepickerModule = __decorate([
        NgModule({
            imports: [CommonModule, RouterModule],
            declarations: [SprkDatepickerDirective],
            exports: [SprkDatepickerDirective]
        })
    ], SprkDatepickerModule);
    return SprkDatepickerModule;
}());

var SprkFieldErrorDirective = /** @class */ (function () {
    /**
     * @ignore
     */
    function SprkFieldErrorDirective(ref) {
        this.ref = ref;
    }
    /**
     * @ignore
     */
    SprkFieldErrorDirective.prototype.getClasses = function () {
        var classArray = ['sprk-b-ErrorContainer'];
        return classArray;
    };
    SprkFieldErrorDirective.prototype.ngOnInit = function () {
        var _this = this;
        this.getClasses().forEach(function (item) {
            _this.ref.nativeElement.classList.add(item);
        });
    };
    SprkFieldErrorDirective.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    SprkFieldErrorDirective = __decorate([
        Directive({
            selector: '[sprkFieldError]'
        }),
        __metadata("design:paramtypes", [ElementRef])
    ], SprkFieldErrorDirective);
    return SprkFieldErrorDirective;
}());

var SprkFieldErrorModule = /** @class */ (function () {
    function SprkFieldErrorModule() {
    }
    SprkFieldErrorModule = __decorate([
        NgModule({
            imports: [CommonModule, RouterModule],
            declarations: [SprkFieldErrorDirective],
            exports: [SprkFieldErrorDirective]
        })
    ], SprkFieldErrorModule);
    return SprkFieldErrorModule;
}());

var SprkHelperTextDirective = /** @class */ (function () {
    /**
     * @ignore
     */
    function SprkHelperTextDirective(ref) {
        this.ref = ref;
    }
    /**
     * @ignore
     */
    SprkHelperTextDirective.prototype.getClasses = function () {
        var classArray = ['sprk-b-HelperText'];
        return classArray;
    };
    SprkHelperTextDirective.prototype.ngOnInit = function () {
        var _this = this;
        this.getClasses().forEach(function (item) {
            _this.ref.nativeElement.classList.add(item);
        });
    };
    SprkHelperTextDirective.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    SprkHelperTextDirective = __decorate([
        Directive({
            selector: '[sprkHelperText]'
        }),
        __metadata("design:paramtypes", [ElementRef])
    ], SprkHelperTextDirective);
    return SprkHelperTextDirective;
}());

var SprkHelperTextModule = /** @class */ (function () {
    function SprkHelperTextModule() {
    }
    SprkHelperTextModule = __decorate([
        NgModule({
            imports: [CommonModule, RouterModule],
            declarations: [SprkHelperTextDirective],
            exports: [SprkHelperTextDirective]
        })
    ], SprkHelperTextModule);
    return SprkHelperTextModule;
}());

var SprkInputDirective = /** @class */ (function () {
    /**
     * @ignore
     */
    function SprkInputDirective(ref) {
        this.ref = ref;
    }
    /**
     * @ignore
     */
    SprkInputDirective.prototype.OnChange = function ($event) {
        var value = this.ref.nativeElement.value;
        if (value.length > 0) {
            this.ref.nativeElement.classList.add('sprk-b-Input--has-floating-label');
        }
        else {
            this.ref.nativeElement.classList.remove('sprk-b-Input--has-floating-label');
        }
    };
    SprkInputDirective.prototype.ngOnInit = function () {
        if (this.ref.nativeElement.nodeName === 'SELECT') {
            this.ref.nativeElement.classList.add('sprk-b-Select');
        }
        else if (this.ref.nativeElement.nodeName === 'TEXTAREA') {
            this.ref.nativeElement.classList.add('sprk-b-TextInput');
            this.ref.nativeElement.classList.add('sprk-b-TextArea');
        }
        else {
            this.ref.nativeElement.classList.add('sprk-b-TextInput');
        }
        if (this.ref.nativeElement.value.length > 0) {
            this.ref.nativeElement.classList.add('sprk-b-Input--has-floating-label');
        }
        this.ref.nativeElement.classList.add('sprk-u-Width-100');
    };
    SprkInputDirective.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    __decorate([
        HostListener('change', ['$event']),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [Object]),
        __metadata("design:returntype", void 0)
    ], SprkInputDirective.prototype, "OnChange", null);
    SprkInputDirective = __decorate([
        Directive({
            selector: '[sprkInput]'
        }),
        __metadata("design:paramtypes", [ElementRef])
    ], SprkInputDirective);
    return SprkInputDirective;
}());

var SprkInputModule = /** @class */ (function () {
    function SprkInputModule() {
    }
    SprkInputModule = __decorate([
        NgModule({
            imports: [CommonModule, RouterModule],
            declarations: [SprkInputDirective],
            exports: [SprkInputDirective]
        })
    ], SprkInputModule);
    return SprkInputModule;
}());

var SprkLabelDirective = /** @class */ (function () {
    /**
     * @ignore
     */
    function SprkLabelDirective(ref) {
        this.ref = ref;
    }
    /**
     * @ignore
     */
    SprkLabelDirective.prototype.getClasses = function () {
        var classArray = ['sprk-b-Label'];
        return classArray;
    };
    SprkLabelDirective.prototype.ngOnInit = function () {
        var _this = this;
        this.getClasses().forEach(function (item) {
            _this.ref.nativeElement.classList.add(item);
        });
    };
    SprkLabelDirective.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    SprkLabelDirective = __decorate([
        Directive({
            selector: '[sprkLabel]'
        }),
        __metadata("design:paramtypes", [ElementRef])
    ], SprkLabelDirective);
    return SprkLabelDirective;
}());

var SprkLabelModule = /** @class */ (function () {
    function SprkLabelModule() {
    }
    SprkLabelModule = __decorate([
        NgModule({
            imports: [CommonModule, RouterModule],
            declarations: [SprkLabelDirective],
            exports: [SprkLabelDirective]
        })
    ], SprkLabelModule);
    return SprkLabelModule;
}());

var SprkSelectionInputDirective = /** @class */ (function () {
    /**
     * @ignore
     */
    function SprkSelectionInputDirective(ref) {
        this.ref = ref;
    }
    /**
     * @ignore
     */
    SprkSelectionInputDirective.prototype.getClasses = function () {
        var classArray = ['sprk-b-SelectionInput'];
        return classArray;
    };
    SprkSelectionInputDirective.prototype.ngOnInit = function () {
        var _this = this;
        this.getClasses().forEach(function (item) {
            _this.ref.nativeElement.classList.add(item);
        });
    };
    SprkSelectionInputDirective.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    SprkSelectionInputDirective = __decorate([
        Directive({
            selector: '[sprkSelectionInput]'
        }),
        __metadata("design:paramtypes", [ElementRef])
    ], SprkSelectionInputDirective);
    return SprkSelectionInputDirective;
}());

var SprkSelectionInputModule = /** @class */ (function () {
    function SprkSelectionInputModule() {
    }
    SprkSelectionInputModule = __decorate([
        NgModule({
            imports: [CommonModule, RouterModule],
            declarations: [SprkSelectionInputDirective],
            exports: [SprkSelectionInputDirective]
        })
    ], SprkSelectionInputModule);
    return SprkSelectionInputModule;
}());

var SprkSelectionLabelDirective = /** @class */ (function () {
    /**
     * @ignore
     */
    function SprkSelectionLabelDirective(ref) {
        this.ref = ref;
    }
    /**
     * @ignore
     */
    SprkSelectionLabelDirective.prototype.getClasses = function () {
        var classArray = ['sprk-b-Label', 'sprk-b-Label--inline'];
        return classArray;
    };
    SprkSelectionLabelDirective.prototype.ngOnInit = function () {
        var _this = this;
        this.getClasses().forEach(function (item) {
            _this.ref.nativeElement.classList.add(item);
        });
    };
    SprkSelectionLabelDirective.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    SprkSelectionLabelDirective = __decorate([
        Directive({
            selector: '[sprkSelectionLabel]'
        }),
        __metadata("design:paramtypes", [ElementRef])
    ], SprkSelectionLabelDirective);
    return SprkSelectionLabelDirective;
}());

var SprkSelectionLabelModule = /** @class */ (function () {
    function SprkSelectionLabelModule() {
    }
    SprkSelectionLabelModule = __decorate([
        NgModule({
            imports: [CommonModule, RouterModule],
            declarations: [SprkSelectionLabelDirective],
            exports: [SprkSelectionLabelDirective]
        })
    ], SprkSelectionLabelModule);
    return SprkSelectionLabelModule;
}());

var SprkStackItemDirective = /** @class */ (function () {
    /**
     * @ignore
     */
    function SprkStackItemDirective(ref) {
        this.ref = ref;
    }
    SprkStackItemDirective.prototype.ngOnInit = function () {
        this.ref.nativeElement.classList.add('sprk-o-Stack__item');
    };
    SprkStackItemDirective.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    SprkStackItemDirective = __decorate([
        Directive({
            selector: '[sprkStackItem]'
        }),
        __metadata("design:paramtypes", [ElementRef])
    ], SprkStackItemDirective);
    return SprkStackItemDirective;
}());

var SprkStackItemModule = /** @class */ (function () {
    function SprkStackItemModule() {
    }
    SprkStackItemModule = __decorate([
        NgModule({
            imports: [CommonModule, RouterModule],
            declarations: [SprkStackItemDirective],
            exports: [SprkStackItemDirective]
        })
    ], SprkStackItemModule);
    return SprkStackItemModule;
}());

var SprkTableEmptyHeadingDirective = /** @class */ (function () {
    /**
     * @ignore
     */
    function SprkTableEmptyHeadingDirective(ref) {
        this.ref = ref;
    }
    /**
     * @ignore
     */
    SprkTableEmptyHeadingDirective.prototype.getClasses = function () {
        var classArray = ['sprk-b-Table__empty-heading'];
        if (this.additionalClasses) {
            this.additionalClasses.split(' ').forEach(function (className) {
                classArray.push(className);
            });
        }
        return classArray;
    };
    SprkTableEmptyHeadingDirective.prototype.ngOnInit = function () {
        var _this = this;
        this.getClasses().forEach(function (className) {
            _this.ref.nativeElement.classList.add(className);
        });
    };
    SprkTableEmptyHeadingDirective.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], SprkTableEmptyHeadingDirective.prototype, "additionalClasses", void 0);
    SprkTableEmptyHeadingDirective = __decorate([
        Directive({
            selector: '[sprkTableEmptyHeading]'
        }),
        __metadata("design:paramtypes", [ElementRef])
    ], SprkTableEmptyHeadingDirective);
    return SprkTableEmptyHeadingDirective;
}());

var SprkTableEmptyHeadingModule = /** @class */ (function () {
    function SprkTableEmptyHeadingModule() {
    }
    SprkTableEmptyHeadingModule = __decorate([
        NgModule({
            imports: [CommonModule, RouterModule],
            declarations: [SprkTableEmptyHeadingDirective],
            exports: [SprkTableEmptyHeadingDirective]
        })
    ], SprkTableEmptyHeadingModule);
    return SprkTableEmptyHeadingModule;
}());

var SprkTableGroupedColumnDirective = /** @class */ (function () {
    /**
     * @ignore
     */
    function SprkTableGroupedColumnDirective(ref) {
        this.ref = ref;
    }
    /**
     * @ignore
     */
    SprkTableGroupedColumnDirective.prototype.getClasses = function () {
        var classArray = ['sprk-b-Table__grouped-column'];
        if (this.additionalClasses) {
            this.additionalClasses.split(' ').forEach(function (className) {
                classArray.push(className);
            });
        }
        return classArray;
    };
    SprkTableGroupedColumnDirective.prototype.ngOnInit = function () {
        var _this = this;
        this.getClasses().forEach(function (className) {
            _this.ref.nativeElement.classList.add(className);
        });
    };
    SprkTableGroupedColumnDirective.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], SprkTableGroupedColumnDirective.prototype, "additionalClasses", void 0);
    SprkTableGroupedColumnDirective = __decorate([
        Directive({
            selector: '[sprkTableGroupedColumn]'
        }),
        __metadata("design:paramtypes", [ElementRef])
    ], SprkTableGroupedColumnDirective);
    return SprkTableGroupedColumnDirective;
}());

var SprkTableGroupedColumnModule = /** @class */ (function () {
    function SprkTableGroupedColumnModule() {
    }
    SprkTableGroupedColumnModule = __decorate([
        NgModule({
            imports: [CommonModule, RouterModule],
            declarations: [SprkTableGroupedColumnDirective],
            exports: [SprkTableGroupedColumnDirective]
        })
    ], SprkTableGroupedColumnModule);
    return SprkTableGroupedColumnModule;
}());

var SprkTableHeadDirective = /** @class */ (function () {
    /**
     * @ignore
     */
    function SprkTableHeadDirective(ref) {
        this.ref = ref;
    }
    /**
     * @ignore
     */
    SprkTableHeadDirective.prototype.getClasses = function () {
        var classArray = ['sprk-b-Table__head'];
        if (this.additionalClasses) {
            this.additionalClasses.split(' ').forEach(function (className) {
                classArray.push(className);
            });
        }
        return classArray;
    };
    SprkTableHeadDirective.prototype.ngOnInit = function () {
        var _this = this;
        this.getClasses().forEach(function (className) {
            _this.ref.nativeElement.classList.add(className);
        });
    };
    SprkTableHeadDirective.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], SprkTableHeadDirective.prototype, "additionalClasses", void 0);
    SprkTableHeadDirective = __decorate([
        Directive({
            selector: '[sprkTableHead]'
        }),
        __metadata("design:paramtypes", [ElementRef])
    ], SprkTableHeadDirective);
    return SprkTableHeadDirective;
}());

var SprkTableHeadModule = /** @class */ (function () {
    function SprkTableHeadModule() {
    }
    SprkTableHeadModule = __decorate([
        NgModule({
            imports: [CommonModule, RouterModule],
            declarations: [SprkTableHeadDirective],
            exports: [SprkTableHeadDirective]
        })
    ], SprkTableHeadModule);
    return SprkTableHeadModule;
}());

var SprkTableRowHeadingDirective = /** @class */ (function () {
    /**
     * @ignore
     */
    function SprkTableRowHeadingDirective(ref) {
        this.ref = ref;
    }
    /**
     * @ignore
     */
    SprkTableRowHeadingDirective.prototype.getClasses = function () {
        var classArray = ['sprk-b-Table__row-heading'];
        if (this.additionalClasses) {
            this.additionalClasses.split(' ').forEach(function (className) {
                classArray.push(className);
            });
        }
        return classArray;
    };
    SprkTableRowHeadingDirective.prototype.ngOnInit = function () {
        var _this = this;
        this.getClasses().forEach(function (className) {
            _this.ref.nativeElement.classList.add(className);
        });
    };
    SprkTableRowHeadingDirective.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], SprkTableRowHeadingDirective.prototype, "additionalClasses", void 0);
    SprkTableRowHeadingDirective = __decorate([
        Directive({
            selector: '[sprkTableRowHeading]'
        }),
        __metadata("design:paramtypes", [ElementRef])
    ], SprkTableRowHeadingDirective);
    return SprkTableRowHeadingDirective;
}());

var SprkTableRowHeadingModule = /** @class */ (function () {
    function SprkTableRowHeadingModule() {
    }
    SprkTableRowHeadingModule = __decorate([
        NgModule({
            imports: [CommonModule, RouterModule],
            declarations: [SprkTableRowHeadingDirective],
            exports: [SprkTableRowHeadingDirective]
        })
    ], SprkTableRowHeadingModule);
    return SprkTableRowHeadingModule;
}());

var SprkTabbedNavigationPanelDirective = /** @class */ (function () {
    /**
     * @ignore
     */
    function SprkTabbedNavigationPanelDirective(ref) {
        this.ref = ref;
    }
    /**
     * @ignore
     */
    SprkTabbedNavigationPanelDirective.prototype.getClasses = function () {
        var classArray = ['sprk-c-Tabs__content'];
        if (!this.defaultActive) {
            classArray.push('sprk-u-HideWhenJs');
        }
        if (this.additionalClasses) {
            this.additionalClasses.split(' ').forEach(function (className) {
                classArray.push(className);
            });
        }
        return classArray;
    };
    SprkTabbedNavigationPanelDirective.prototype.ngOnInit = function () {
        var _this = this;
        this.ref.nativeElement.setAttribute('role', 'tabpanel');
        this.ref.nativeElement.setAttribute('tabindex', '0');
        this.getClasses().forEach(function (item) {
            _this.ref.nativeElement.classList.add(item);
        });
    };
    SprkTabbedNavigationPanelDirective.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], SprkTabbedNavigationPanelDirective.prototype, "additionalClasses", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Boolean)
    ], SprkTabbedNavigationPanelDirective.prototype, "defaultActive", void 0);
    SprkTabbedNavigationPanelDirective = __decorate([
        Directive({
            selector: '[sprkTabbedNavigationPanel]'
        }),
        __metadata("design:paramtypes", [ElementRef])
    ], SprkTabbedNavigationPanelDirective);
    return SprkTabbedNavigationPanelDirective;
}());

var SprkTabbedNavigationPanelModule = /** @class */ (function () {
    function SprkTabbedNavigationPanelModule() {
    }
    SprkTabbedNavigationPanelModule = __decorate([
        NgModule({
            imports: [CommonModule, RouterModule],
            declarations: [SprkTabbedNavigationPanelDirective],
            exports: [SprkTabbedNavigationPanelDirective]
        })
    ], SprkTabbedNavigationPanelModule);
    return SprkTabbedNavigationPanelModule;
}());

var SprkTabbedNavigationTabDirective = /** @class */ (function () {
    /**
     * @ignore
     */
    function SprkTabbedNavigationTabDirective(ref) {
        this.ref = ref;
    }
    /**
     * @ignore
     */
    SprkTabbedNavigationTabDirective.prototype.getClasses = function () {
        var classArray = ['sprk-c-Tabs__button'];
        if (this.defaultActive) {
            classArray.push('sprk-c-Tabs__button--active');
        }
        if (this.additionalClasses) {
            this.additionalClasses.split(' ').forEach(function (className) {
                classArray.push(className);
            });
        }
        return classArray;
    };
    SprkTabbedNavigationTabDirective.prototype.ngOnInit = function () {
        var _this = this;
        this.getClasses().forEach(function (item) {
            _this.ref.nativeElement.classList.add(item);
        });
        this.ref.nativeElement.setAttribute('role', 'tab');
        this.ref.nativeElement.setAttribute('aria-selected', this.defaultActive ? 'true' : 'false');
        if (this.analyticsString) {
            this.ref.nativeElement.setAttribute('data-analytics', this.analyticsString);
        }
    };
    SprkTabbedNavigationTabDirective.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], SprkTabbedNavigationTabDirective.prototype, "additionalClasses", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Boolean)
    ], SprkTabbedNavigationTabDirective.prototype, "defaultActive", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], SprkTabbedNavigationTabDirective.prototype, "analyticsString", void 0);
    SprkTabbedNavigationTabDirective = __decorate([
        Directive({
            selector: '[sprkTabbedNavigationTab]'
        }),
        __metadata("design:paramtypes", [ElementRef])
    ], SprkTabbedNavigationTabDirective);
    return SprkTabbedNavigationTabDirective;
}());

var SprkTabbedNavigationTabModule = /** @class */ (function () {
    function SprkTabbedNavigationTabModule() {
    }
    SprkTabbedNavigationTabModule = __decorate([
        NgModule({
            imports: [CommonModule, RouterModule],
            declarations: [SprkTabbedNavigationTabDirective],
            exports: [SprkTabbedNavigationTabDirective]
        })
    ], SprkTabbedNavigationTabModule);
    return SprkTabbedNavigationTabModule;
}());

var SparkInputContainerComponent = /** @class */ (function () {
    function SparkInputContainerComponent() {
        /**
         * @ignore
         */
        this.id = uniqueId();
        /**
         * @ignore
         */
        this.input_id = "input_" + this.id;
        /**
         * @ignore
         */
        this.error_id = "error_" + this.id;
    }
    /**
     * @ignore
     */
    SparkInputContainerComponent.prototype.getClasses = function () {
        var classArray = ['sprk-b-InputContainer'];
        if (this.additionalClasses) {
            this.additionalClasses.split(' ').forEach(function (className) {
                classArray.push(className);
            });
        }
        return classArray.join(' ');
    };
    SparkInputContainerComponent.prototype.ngOnInit = function () {
        if (this.label && this.input) {
            this.label.ref.nativeElement.setAttribute('for', this.input_id);
            this.input.ref.nativeElement.id = this.input_id;
        }
        if (this.input && this.error) {
            this.input.ref.nativeElement.setAttribute('aria-describedby', this.error_id);
            this.error.ref.nativeElement.id = this.error_id;
        }
    };
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], SparkInputContainerComponent.prototype, "additionalClasses", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], SparkInputContainerComponent.prototype, "iconContainerClasses", void 0);
    __decorate([
        ContentChild(SprkLabelDirective, { static: true }),
        __metadata("design:type", SprkLabelDirective)
    ], SparkInputContainerComponent.prototype, "label", void 0);
    __decorate([
        ContentChild(SprkInputDirective, { static: true }),
        __metadata("design:type", SprkInputDirective)
    ], SparkInputContainerComponent.prototype, "input", void 0);
    __decorate([
        ContentChild(SprkFieldErrorDirective, { static: true }),
        __metadata("design:type", SprkFieldErrorDirective)
    ], SparkInputContainerComponent.prototype, "error", void 0);
    SparkInputContainerComponent = __decorate([
        Component({
            selector: 'sprk-input-container',
            template: "\n    <div [ngClass]=\"getClasses()\">\n      <ng-content select=\"[sprkLabel]\"></ng-content>\n      <ng-content select=\"[sprkInput]\"></ng-content>\n      <ng-content select=\"[sprk-select-icon]\"></ng-content>\n      <ng-content select=\"sprk-selection-item-container\"></ng-content>\n      <ng-content select=\"[sprkHelperText]\"></ng-content>\n      <ng-content select=\"[sprkFieldError]\"></ng-content>\n    </div>\n  "
        })
    ], SparkInputContainerComponent);
    return SparkInputContainerComponent;
}());

var SparkInputContainerModule = /** @class */ (function () {
    function SparkInputContainerModule() {
    }
    SparkInputContainerModule = __decorate([
        NgModule({
            imports: [CommonModule, RouterModule, FormsModule, ReactiveFormsModule],
            declarations: [SparkInputContainerComponent],
            exports: [SparkInputContainerComponent]
        })
    ], SparkInputContainerModule);
    return SparkInputContainerModule;
}());

var SprkHugeInputContainerComponent = /** @class */ (function () {
    function SprkHugeInputContainerComponent() {
        /**
         * @ignore
         */
        this.id = uniqueId();
        /**
         * @ignore
         */
        this.input_id = "input_" + this.id;
        /**
         * @ignore
         */
        this.error_id = "error_" + this.id;
    }
    /**
     * @ignore
     */
    SprkHugeInputContainerComponent.prototype.getClasses = function () {
        var classArray = [
            'sprk-b-InputContainer',
            'sprk-b-InputContainer--huge'
        ];
        if (this.additionalClasses) {
            this.additionalClasses.split(' ').forEach(function (className) {
                classArray.push(className);
            });
        }
        return classArray.join(' ');
    };
    SprkHugeInputContainerComponent.prototype.ngOnInit = function () {
        if (this.label && this.input) {
            this.label.ref.nativeElement.setAttribute('for', this.input_id);
            this.input.ref.nativeElement.id = this.input_id;
        }
        if (this.input && this.error) {
            this.input.ref.nativeElement.setAttribute('aria-describedby', this.error_id);
            this.error.ref.nativeElement.id = this.error_id;
        }
    };
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], SprkHugeInputContainerComponent.prototype, "additionalClasses", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], SprkHugeInputContainerComponent.prototype, "iconContainerClasses", void 0);
    __decorate([
        ContentChild(SprkLabelDirective, { static: true }),
        __metadata("design:type", SprkLabelDirective)
    ], SprkHugeInputContainerComponent.prototype, "label", void 0);
    __decorate([
        ContentChild(SprkInputDirective, { static: true }),
        __metadata("design:type", SprkInputDirective)
    ], SprkHugeInputContainerComponent.prototype, "input", void 0);
    __decorate([
        ContentChild(SprkFieldErrorDirective, { static: true }),
        __metadata("design:type", SprkFieldErrorDirective)
    ], SprkHugeInputContainerComponent.prototype, "error", void 0);
    SprkHugeInputContainerComponent = __decorate([
        Component({
            selector: 'sprk-huge-input-container',
            template: "\n    <div [ngClass]=\"getClasses()\">\n      <ng-content select=\"[sprkInput]\"></ng-content>\n      <ng-content select=\"[sprkLabel]\"></ng-content>\n      <ng-content select=\"[sprk-select-icon]\"></ng-content>\n      <ng-content select=\"sprk-selection-item-container\"></ng-content>\n      <ng-content select=\"[sprkHelperText]\"></ng-content>\n      <ng-content select=\"[sprkFieldError]\"></ng-content>\n    </div>\n  "
        })
    ], SprkHugeInputContainerComponent);
    return SprkHugeInputContainerComponent;
}());

var SprkHugeInputContainerModule = /** @class */ (function () {
    function SprkHugeInputContainerModule() {
    }
    SprkHugeInputContainerModule = __decorate([
        NgModule({
            imports: [CommonModule, RouterModule, FormsModule, ReactiveFormsModule],
            declarations: [SprkHugeInputContainerComponent],
            exports: [SprkHugeInputContainerComponent]
        })
    ], SprkHugeInputContainerModule);
    return SprkHugeInputContainerModule;
}());

var SprkTextareaContainerComponent = /** @class */ (function () {
    function SprkTextareaContainerComponent() {
        /**
         * @ignore
         */
        this.id = uniqueId();
        /**
         * @ignore
         */
        this.input_id = "input_" + this.id;
        /**
         * @ignore
         */
        this.error_id = "error_" + this.id;
    }
    /**
     * @ignore
     */
    SprkTextareaContainerComponent.prototype.getClasses = function () {
        var classArray = [
            'sprk-b-InputContainer',
            'sprk-b-InputContainer--textarea'
        ];
        if (this.additionalClasses) {
            this.additionalClasses.split(' ').forEach(function (className) {
                classArray.push(className);
            });
        }
        return classArray.join(' ');
    };
    SprkTextareaContainerComponent.prototype.ngOnInit = function () {
        if (this.label && this.input) {
            this.label.ref.nativeElement.setAttribute('for', this.input_id);
            this.input.ref.nativeElement.id = this.input_id;
        }
        if (this.input && this.error) {
            this.input.ref.nativeElement.setAttribute('aria-describedby', this.error_id);
            this.error.ref.nativeElement.id = this.error_id;
        }
    };
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], SprkTextareaContainerComponent.prototype, "additionalClasses", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], SprkTextareaContainerComponent.prototype, "iconContainerClasses", void 0);
    __decorate([
        ContentChild(SprkLabelDirective, { static: true }),
        __metadata("design:type", SprkLabelDirective)
    ], SprkTextareaContainerComponent.prototype, "label", void 0);
    __decorate([
        ContentChild(SprkInputDirective, { static: true }),
        __metadata("design:type", SprkInputDirective)
    ], SprkTextareaContainerComponent.prototype, "input", void 0);
    __decorate([
        ContentChild(SprkFieldErrorDirective, { static: true }),
        __metadata("design:type", SprkFieldErrorDirective)
    ], SprkTextareaContainerComponent.prototype, "error", void 0);
    SprkTextareaContainerComponent = __decorate([
        Component({
            selector: 'sprk-textarea-container',
            template: "\n    <div [ngClass]=\"getClasses()\">\n      <ng-content select=\"[sprkLabel]\"></ng-content>\n      <ng-content select=\"[sprkInput]\"></ng-content>\n      <ng-content select=\"sprk-selection-item-container\"></ng-content>\n      <ng-content select=\"[sprkHelperText]\"></ng-content>\n      <ng-content select=\"[sprkFieldError]\"></ng-content>\n    </div>\n  "
        })
    ], SprkTextareaContainerComponent);
    return SprkTextareaContainerComponent;
}());

var SprkTextareaContainerModule = /** @class */ (function () {
    function SprkTextareaContainerModule() {
    }
    SprkTextareaContainerModule = __decorate([
        NgModule({
            imports: [CommonModule, RouterModule, FormsModule, ReactiveFormsModule],
            declarations: [SprkTextareaContainerComponent],
            exports: [SprkTextareaContainerComponent]
        })
    ], SprkTextareaContainerModule);
    return SprkTextareaContainerModule;
}());

var SprkIconInputContainerComponent = /** @class */ (function () {
    function SprkIconInputContainerComponent() {
        /**
         * @ignore
         */
        this.id = uniqueId();
        /**
         * @ignore
         */
        this.input_id = "input_" + this.id;
        /**
         * @ignore
         */
        this.error_id = "error_" + this.id;
    }
    /**
     * @ignore
     */
    SprkIconInputContainerComponent.prototype.getIconContainerClasses = function () {
        var classArray = ['sprk-b-InputContainer__icon-container'];
        if (this.iconContainerClasses) {
            this.iconContainerClasses.split(' ').forEach(function (className) {
                classArray.push(className);
            });
        }
        return classArray.join(' ');
    };
    /**
     * @ignore
     */
    SprkIconInputContainerComponent.prototype.getClasses = function () {
        var classArray = ['sprk-b-InputContainer'];
        if (this.additionalClasses) {
            this.additionalClasses.split(' ').forEach(function (className) {
                classArray.push(className);
            });
        }
        return classArray.join(' ');
    };
    SprkIconInputContainerComponent.prototype.ngOnInit = function () {
        if (this.label && this.input) {
            this.label.ref.nativeElement.setAttribute('for', this.input_id);
            this.input.ref.nativeElement.id = this.input_id;
        }
        if (this.input && this.error) {
            this.input.ref.nativeElement.setAttribute('aria-describedby', this.error_id);
            this.error.ref.nativeElement.id = this.error_id;
        }
    };
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], SprkIconInputContainerComponent.prototype, "additionalClasses", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], SprkIconInputContainerComponent.prototype, "iconContainerClasses", void 0);
    __decorate([
        ContentChild(SprkLabelDirective, { static: true }),
        __metadata("design:type", SprkLabelDirective)
    ], SprkIconInputContainerComponent.prototype, "label", void 0);
    __decorate([
        ContentChild(SprkInputDirective, { static: true }),
        __metadata("design:type", SprkInputDirective)
    ], SprkIconInputContainerComponent.prototype, "input", void 0);
    __decorate([
        ContentChild(SprkFieldErrorDirective, { static: true }),
        __metadata("design:type", SprkFieldErrorDirective)
    ], SprkIconInputContainerComponent.prototype, "error", void 0);
    SprkIconInputContainerComponent = __decorate([
        Component({
            selector: 'sprk-icon-input-container',
            template: "\n    <div [ngClass]=\"getClasses()\">\n      <div [ngClass]=\"getIconContainerClasses()\">\n        <ng-content select=\"[sprkLabel]\"></ng-content>\n        <ng-content select=\"[sprk-input-icon]\"></ng-content>\n        <ng-content select=\"[sprkInput]\"></ng-content>\n      </div>\n      <ng-content select=\"sprk-selection-item-container\"></ng-content>\n      <ng-content select=\"[sprkHelperText]\"></ng-content>\n      <ng-content select=\"[sprkFieldError]\"></ng-content>\n    </div>\n  "
        })
    ], SprkIconInputContainerComponent);
    return SprkIconInputContainerComponent;
}());

var SprkIconInputContainerModule = /** @class */ (function () {
    function SprkIconInputContainerModule() {
    }
    SprkIconInputContainerModule = __decorate([
        NgModule({
            imports: [CommonModule, RouterModule, FormsModule, ReactiveFormsModule],
            declarations: [SprkIconInputContainerComponent],
            exports: [SprkIconInputContainerComponent]
        })
    ], SprkIconInputContainerModule);
    return SprkIconInputContainerModule;
}());

var SprkSelectionItemContainerComponent = /** @class */ (function () {
    function SprkSelectionItemContainerComponent(renderer) {
        this.renderer = renderer;
    }
    /**
     * @ignore
     */
    SprkSelectionItemContainerComponent.prototype.getClasses = function () {
        var classArray = ['sprk-b-SelectionContainer'];
        if (this.additionalClasses) {
            this.additionalClasses.split(' ').forEach(function (className) {
                classArray.push(className);
            });
        }
        return classArray.join(' ');
    };
    /**
     * @ignore
     */
    SprkSelectionItemContainerComponent.prototype.addInputTypeClasses = function () {
        var inputType = this.input.ref.nativeElement.type;
        if (inputType === 'checkbox') {
            this.renderer.addClass(this.input.ref.nativeElement, 'sprk-b-Checkbox__input');
            this.renderer.addClass(this.label.ref.nativeElement, 'sprk-b-Checkbox__label');
        }
        if (inputType === 'radio') {
            this.renderer.addClass(this.input.ref.nativeElement, 'sprk-b-Radio__input');
            this.renderer.addClass(this.label.ref.nativeElement, 'sprk-b-Radio__label');
        }
    };
    /**
     * @ignore
     */
    SprkSelectionItemContainerComponent.prototype.generateIdForInput = function () {
        var inputId = this.input.ref.nativeElement.id;
        var labelFor = this.label.ref.nativeElement.htmlFor;
        // Warn if 'for' exists but the 'id' does not
        if (labelFor && !inputId) {
            console.warn("Spark Design System Warning - The value of 'for' (" + labelFor + ") on the label expects a matching 'id' on the input.");
            return;
        }
        // Warn if 'for' and 'id' both exist but don't match
        if (inputId && labelFor && inputId !== labelFor) {
            console.warn("Spark Design System Warning - The value of 'for' (" + labelFor + ") on the label should match the 'id' on the input (" + inputId + ").");
            return;
        }
        // If we don't have a valid id, generate one with lodash
        if (!inputId) {
            inputId = uniqueId$1("sprk_input_");
            this.renderer.setProperty(this.input.ref.nativeElement, 'id', inputId);
            this.renderer.setAttribute(this.label.ref.nativeElement, 'for', inputId);
        }
    };
    SprkSelectionItemContainerComponent.prototype.ngOnInit = function () {
        if (this.label && this.input) {
            this.generateIdForInput();
            this.addInputTypeClasses();
        }
    };
    SprkSelectionItemContainerComponent.ctorParameters = function () { return [
        { type: Renderer2 }
    ]; };
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], SprkSelectionItemContainerComponent.prototype, "additionalClasses", void 0);
    __decorate([
        ContentChild(SprkSelectionLabelDirective, { static: true }),
        __metadata("design:type", SprkSelectionLabelDirective)
    ], SprkSelectionItemContainerComponent.prototype, "label", void 0);
    __decorate([
        ContentChild(SprkSelectionInputDirective, { static: true }),
        __metadata("design:type", SprkSelectionInputDirective)
    ], SprkSelectionItemContainerComponent.prototype, "input", void 0);
    SprkSelectionItemContainerComponent = __decorate([
        Component({
            selector: 'sprk-selection-item-container',
            template: "\n    <div [ngClass]=\"getClasses()\">\n      <ng-content select=\"[sprkSelectionInput]\"></ng-content>\n      <ng-content select=\"[sprkSelectionLabel]\"></ng-content>\n      <ng-content></ng-content>\n    </div>\n  "
        }),
        __metadata("design:paramtypes", [Renderer2])
    ], SprkSelectionItemContainerComponent);
    return SprkSelectionItemContainerComponent;
}());

var SprkSelectionContainerComponent = /** @class */ (function () {
    function SprkSelectionContainerComponent() {
        /**
         * @ignore
         */
        this.id = uniqueId();
        /**
         * @ignore
         */
        this.error_id = "error_" + this.id;
    }
    /**
     * @ignore
     */
    SprkSelectionContainerComponent.prototype.getClasses = function () {
        var classArray = ['sprk-b-InputContainer'];
        if (this.additionalClasses) {
            this.additionalClasses.split(' ').forEach(function (className) {
                classArray.push(className);
            });
        }
        return classArray.join(' ');
    };
    /**
     * @ignore
     */
    SprkSelectionContainerComponent.prototype.ngAfterContentInit = function () {
        var _this = this;
        if (this.selectionItems && this.error) {
            this.selectionItems.forEach(function (item) {
                item.input.ref.nativeElement.setAttribute('aria-describedby', _this.error_id);
            });
            this.error.ref.nativeElement.id = this.error_id;
        }
    };
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], SprkSelectionContainerComponent.prototype, "additionalClasses", void 0);
    __decorate([
        ContentChild(SprkLabelDirective, { static: false }),
        __metadata("design:type", SprkLabelDirective)
    ], SprkSelectionContainerComponent.prototype, "label", void 0);
    __decorate([
        ContentChild(SprkFieldErrorDirective, { static: false }),
        __metadata("design:type", SprkFieldErrorDirective)
    ], SprkSelectionContainerComponent.prototype, "error", void 0);
    __decorate([
        ContentChildren(SprkSelectionItemContainerComponent),
        __metadata("design:type", QueryList)
    ], SprkSelectionContainerComponent.prototype, "selectionItems", void 0);
    SprkSelectionContainerComponent = __decorate([
        Component({
            selector: 'sprk-selection-container',
            template: "\n    <div [ngClass]=\"getClasses()\">\n      <fieldset class=\"sprk-b-Fieldset\">\n        <legend class=\"sprk-b-Legend\">\n          <ng-content select=\"[sprkLabel]\"></ng-content>\n        </legend>\n        <ng-content select=\"sprk-selection-item-container\"></ng-content>\n      </fieldset>\n      <ng-content select=\"[sprkHelperText]\"></ng-content>\n      <ng-content select=\"[sprkFieldError]\"></ng-content>\n      <ng-content></ng-content>\n    </div>\n  "
        })
    ], SprkSelectionContainerComponent);
    return SprkSelectionContainerComponent;
}());

var SprkSelectionContainerModule = /** @class */ (function () {
    function SprkSelectionContainerModule() {
    }
    SprkSelectionContainerModule = __decorate([
        NgModule({
            imports: [CommonModule, RouterModule, FormsModule, ReactiveFormsModule],
            declarations: [SprkSelectionContainerComponent],
            exports: [SprkSelectionContainerComponent]
        })
    ], SprkSelectionContainerModule);
    return SprkSelectionContainerModule;
}());

var SprkSelectionItemContainerModule = /** @class */ (function () {
    function SprkSelectionItemContainerModule() {
    }
    SprkSelectionItemContainerModule = __decorate([
        NgModule({
            imports: [CommonModule, RouterModule, FormsModule, ReactiveFormsModule],
            declarations: [SprkSelectionItemContainerComponent],
            exports: [SprkSelectionItemContainerComponent]
        })
    ], SprkSelectionItemContainerModule);
    return SprkSelectionItemContainerModule;
}());

var SprkIconComponent = /** @class */ (function () {
    function SprkIconComponent() {
    }
    /**
     * @ignore
     */
    SprkIconComponent.prototype.getClasses = function () {
        var classArray = ['sprk-c-Icon'];
        this.icon = "#" + this.iconType;
        if (this.additionalClasses) {
            this.additionalClasses.split(' ').forEach(function (className) {
                classArray.push(className);
            });
        }
        return classArray.join(' ');
    };
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], SprkIconComponent.prototype, "iconType", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], SprkIconComponent.prototype, "additionalClasses", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], SprkIconComponent.prototype, "idString", void 0);
    SprkIconComponent = __decorate([
        Component({
            selector: 'sprk-icon',
            template: "\n    <svg [ngClass]=\"getClasses()\" viewBox=\"0 0 64 64\" [attr.data-id]=\"idString\">\n      <use [attr.xlink:href]=\"icon\" />\n    </svg>\n  ",
            styles: [':host { line-height: 1; }']
        })
    ], SprkIconComponent);
    return SprkIconComponent;
}());

var SprkIconModule = /** @class */ (function () {
    function SprkIconModule() {
    }
    SprkIconModule = __decorate([
        NgModule({
            imports: [CommonModule, RouterModule],
            declarations: [SprkIconComponent],
            exports: [SprkIconComponent]
        })
    ], SprkIconModule);
    return SprkIconModule;
}());

var SprkLinkDirective = /** @class */ (function () {
    /**
     * @ignore
     */
    function SprkLinkDirective(renderer, el) {
        this.renderer = renderer;
        this.el = el;
    }
    SprkLinkDirective.prototype.ngOnInit = function () {
        if (this.variant !== 'unstyled') {
            this.renderer.addClass(this.el.nativeElement, 'sprk-b-Link');
        }
        if (this.variant === 'simple' || this.variant === 'icon') {
            this.renderer.addClass(this.el.nativeElement, 'sprk-b-Link--simple');
        }
        if (this.variant === 'icon') {
            this.renderer.addClass(this.el.nativeElement, 'sprk-b-Link--has-icon');
        }
        if (this.variant === 'plain') {
            this.renderer.addClass(this.el.nativeElement, 'sprk-b-Link--plain');
        }
    };
    SprkLinkDirective.ctorParameters = function () { return [
        { type: Renderer2 },
        { type: ElementRef }
    ]; };
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], SprkLinkDirective.prototype, "variant", void 0);
    __decorate([
        HostBinding('class.sprk-b-Link--disabled'),
        Input(),
        __metadata("design:type", Boolean)
    ], SprkLinkDirective.prototype, "isDisabled", void 0);
    __decorate([
        HostBinding('attr.data-analytics'),
        Input(),
        __metadata("design:type", String)
    ], SprkLinkDirective.prototype, "analyticsString", void 0);
    __decorate([
        HostBinding('attr.data-id'),
        Input(),
        __metadata("design:type", String)
    ], SprkLinkDirective.prototype, "idString", void 0);
    SprkLinkDirective = __decorate([
        Directive({
            selector: '[sprkLink]'
        }),
        __metadata("design:paramtypes", [Renderer2, ElementRef])
    ], SprkLinkDirective);
    return SprkLinkDirective;
}());

var SprkLinkDirectiveModule = /** @class */ (function () {
    function SprkLinkDirectiveModule() {
    }
    SprkLinkDirectiveModule = __decorate([
        NgModule({
            imports: [CommonModule],
            declarations: [SprkLinkDirective],
            exports: [SprkLinkDirective]
        })
    ], SprkLinkDirectiveModule);
    return SprkLinkDirectiveModule;
}());

var toggleAnimations = {
    toggleContent: trigger('toggleContent', [
        state('closed', style({
            height: '0',
            overflow: 'hidden',
            visibility: 'hidden',
        })),
        state('open', style({
            height: '*',
            visibility: 'visible',
        })),
        transition('open <=> closed', animate('300ms ease-in'))
    ])
};

var SprkAccordionItemComponent = /** @class */ (function () {
    function SprkAccordionItemComponent() {
        /**
         * The Accordion item will use this to decide
         * if it should be open or closed on first render.
         * (Interacting with the toggle will override this input.)
         */
        this.isOpen = false;
        /**
         * The name of the icon to use for
         * a closed Accordion item.
         */
        this.iconTypeClosed = 'chevron-up-circle-two-color';
        /**
         * The name of the icon to use for
         * an open Accordion item.
         */
        this.iconTypeOpen = 'chevron-up-circle-two-color';
        /**
         * @ignore
         */
        this.componentID = uniqueId();
        /**
         * @ignore
         */
        this.accordion_controls_id = "accordionHeading__" + this.componentID;
        /**
         * @ignore
         */
        this.currentIconType = this.iconTypeClosed;
        /**
         * @ignore
         */
        this.iconStateClass = '';
        /**
         * @ignore
         */
        this.animState = 'closed';
    }
    /**
     * @ignore
     */
    SprkAccordionItemComponent.prototype.accordionState = function () {
        this.isOpen === false
            ? (this.animState = 'closed')
            : (this.animState = 'open');
        this.isOpen === false
            ? (this.currentIconType = this.iconTypeClosed)
            : (this.currentIconType = this.iconTypeOpen);
        this.isOpen === false
            ? (this.iconStateClass = '')
            : (this.iconStateClass = 'sprk-c-Icon--open');
    };
    /**
     * @ignore
     */
    SprkAccordionItemComponent.prototype.toggleAccordion = function (event) {
        event.preventDefault();
        this.isOpen = !this.isOpen;
        this.accordionState();
    };
    /**
     * @ignore
     */
    SprkAccordionItemComponent.prototype.getClasses = function () {
        var classArray = [
            'sprk-c-Accordion__item',
            'sprk-u-Overflow--hidden'
        ];
        if (this.isOpen) {
            classArray.push('sprk-c-Accordion__item--open');
        }
        if (this.isActive) {
            classArray.push('sprk-c-Accordion__item--active');
        }
        if (this.additionalClasses) {
            this.additionalClasses.split(' ').forEach(function (className) {
                classArray.push(className);
            });
        }
        return classArray.join(' ');
    };
    /**
     * @ignore
     */
    SprkAccordionItemComponent.prototype.getHeadingClasses = function () {
        var classArray = ['sprk-c-Accordion__heading'];
        if (this.additionalHeadingClasses) {
            this.additionalHeadingClasses.split(' ').forEach(function (className) {
                classArray.push(className);
            });
        }
        return classArray.join(' ');
    };
    SprkAccordionItemComponent.prototype.ngOnInit = function () {
        this.accordionState();
    };
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], SprkAccordionItemComponent.prototype, "title", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], SprkAccordionItemComponent.prototype, "analyticsString", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], SprkAccordionItemComponent.prototype, "idString", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], SprkAccordionItemComponent.prototype, "additionalClasses", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], SprkAccordionItemComponent.prototype, "additionalHeadingClasses", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], SprkAccordionItemComponent.prototype, "isOpen", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Boolean)
    ], SprkAccordionItemComponent.prototype, "isActive", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], SprkAccordionItemComponent.prototype, "iconTypeClosed", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], SprkAccordionItemComponent.prototype, "iconTypeOpen", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], SprkAccordionItemComponent.prototype, "leadingIcon", void 0);
    SprkAccordionItemComponent = __decorate([
        Component({
            selector: 'sprk-accordion-item',
            template: "\n    <li [ngClass]=\"getClasses()\">\n      <button\n        sprkLink\n        variant=\"unstyled\"\n        href=\"#\"\n        [attr.aria-controls]=\"accordion_controls_id\"\n        [attr.aria-expanded]=\"isOpen\"\n        class=\"sprk-c-Accordion__summary\"\n        [analyticsString]=\"analyticsString\"\n        [idString]=\"idString\"\n        (click)=\"toggleAccordion($event)\"\n      >\n        <span [ngClass]=\"getHeadingClasses()\">\n          <sprk-icon\n            [iconType]=\"leadingIcon\"\n            additionalClasses=\"sprk-c-Icon--stroke-current-color sprk-c-Icon--l sprk-u-mrs\"\n            *ngIf=\"leadingIcon\"\n          ></sprk-icon>\n          {{ title }}\n        </span>\n\n        <sprk-icon\n          additionalClasses=\"sprk-c-Accordion__icon sprk-c-Icon--toggle sprk-c-Icon--l {{\n            iconStateClass\n          }}\"\n          [iconType]=\"currentIconType\"\n        ></sprk-icon>\n      </button>\n\n      <div [@toggleContent]=\"animState\">\n        <div\n          [id]=\"accordion_controls_id\"\n          class=\"sprk-c-Accordion__content sprk-b-TypeBodyTwo\"\n        >\n          <ng-content></ng-content>\n        </div>\n      </div>\n    </li>\n  ",
            animations: [toggleAnimations.toggleContent]
        })
    ], SprkAccordionItemComponent);
    return SprkAccordionItemComponent;
}());

var SprkAccordionItemModule = /** @class */ (function () {
    function SprkAccordionItemModule() {
    }
    SprkAccordionItemModule = __decorate([
        NgModule({
            imports: [CommonModule, SprkIconModule, SprkLinkDirectiveModule],
            declarations: [SprkAccordionItemComponent],
            exports: [SprkAccordionItemComponent]
        })
    ], SprkAccordionItemModule);
    return SprkAccordionItemModule;
}());

var SprkLinkComponent = /** @class */ (function () {
    /**
     * @ignore
     */
    function SprkLinkComponent(router) {
        this.router = router;
        /**
         * By default, the component determines if
         * the `href` is an external or internal link
         * by looking for the `:` character in the
         * `href` string. If external link functionality
         * is desired with an `href` value that contains
         * a `:` set this input to true. This overrides
         * the default and avoids using the Angular Router.
         */
        this.isExternal = false;
    }
    SprkLinkComponent.prototype.ngOnInit = function () {
        // This message is split up like this so that we can keep the line
        // length down in the editor while also logging a single unformatted
        // line of text in the console.
        var message = 'Spark Design System Warning: Spark Link has been ' +
            'refactored to be an Angular Directive. The old Angular Component ' +
            'version has been deprecated. This version will be permanently removed ' +
            'from Spark in our Summer 2020 release. To update to the new version, ' +
            'replace any instance of the <sprk-link> component in your codebase with ' +
            'the new Directive syntax.';
        console.warn(message);
        // Sets the default href if none provided
        if (this.href === '' || this.href === null || this.href === undefined) {
            this.href = '#';
            return;
        }
        // Build jump link's href
        if (this.isJumpLink(this.href)) {
            this.href = "" + this.getPathWithoutHash(this.router.url) + this.href;
        }
    };
    /**
     * @ignore
     */
    SprkLinkComponent.prototype.isExternalLink = function (value) {
        return new RegExp('^.*:', 'i').test(value);
    };
    /**
     * @ignore
     */
    SprkLinkComponent.prototype.isJumpLinkWithPage = function (value) {
        return new RegExp('^.*#.+', 'i').test(value);
    };
    /**
     * @ignore
     */
    SprkLinkComponent.prototype.isJumpLink = function (value) {
        return new RegExp('^#.+', 'i').test(value);
    };
    /**
     * @ignore
     */
    SprkLinkComponent.prototype.isNoActionLink = function (value) {
        return value === '#';
    };
    /**
     * @ignore
     */
    SprkLinkComponent.prototype.getPathWithoutHash = function (value) {
        return value.split('#')[0];
    };
    /**
     * @ignore
     */
    SprkLinkComponent.prototype.scrollToId = function () {
        var elementID = this.href.split('#').pop();
        var element = document.getElementById(elementID);
        if (element) {
            element.scrollIntoView();
        }
    };
    /**
     * @ignore
     */
    SprkLinkComponent.prototype.handleClick = function (event) {
        // Let browser handle route if external Link
        if (this.isExternalLink(this.href) || this.isExternal) {
            return;
        }
        event.preventDefault();
        // Prevent default and return
        if (this.isNoActionLink(this.href)) {
            return;
        }
        else if (this.isJumpLinkWithPage(this.href)) {
            if (this.getPathWithoutHash(this.href) ===
                this.getPathWithoutHash(this.router.url)) {
                this.scrollToId();
            }
            else {
                this.router.navigateByUrl(this.href);
            }
        }
        else {
            this.router.navigateByUrl(this.href);
        }
    };
    /**
     * @ignore
     */
    SprkLinkComponent.prototype.getClasses = function () {
        var classArray = [];
        switch (this.linkType) {
            case 'unstyled':
                break;
            case 'simple':
                classArray.push('sprk-b-Link sprk-b-Link--simple');
                break;
            case 'plain':
                classArray.push('sprk-b-Link sprk-b-Link--plain');
                break;
            case 'icon':
                classArray.push('sprk-b-Link sprk-b-Link--simple sprk-b-Link--has-icon');
                break;
            default:
                classArray.push('sprk-b-Link');
                break;
        }
        if (this.isDisabled) {
            classArray.push('sprk-b-Link--disabled');
        }
        if (this.additionalClasses) {
            this.additionalClasses.split(' ').forEach(function (className) {
                classArray.push(className);
            });
        }
        return classArray.join(' ');
    };
    SprkLinkComponent.ctorParameters = function () { return [
        { type: Router }
    ]; };
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], SprkLinkComponent.prototype, "linkType", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], SprkLinkComponent.prototype, "href", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], SprkLinkComponent.prototype, "idString", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], SprkLinkComponent.prototype, "role", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], SprkLinkComponent.prototype, "id", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], SprkLinkComponent.prototype, "ariaControls", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], SprkLinkComponent.prototype, "ariaLabelledby", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], SprkLinkComponent.prototype, "ariaSelected", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], SprkLinkComponent.prototype, "ariaHidden", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], SprkLinkComponent.prototype, "ariaCurrent", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], SprkLinkComponent.prototype, "ariaExpanded", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], SprkLinkComponent.prototype, "ariaHasPopUp", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], SprkLinkComponent.prototype, "ariaLabel", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], SprkLinkComponent.prototype, "analyticsString", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], SprkLinkComponent.prototype, "target", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], SprkLinkComponent.prototype, "additionalClasses", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Boolean)
    ], SprkLinkComponent.prototype, "isDisabled", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], SprkLinkComponent.prototype, "isExternal", void 0);
    SprkLinkComponent = __decorate([
        Component({
            selector: 'sprk-link',
            template: "\n    <a\n      (click)=\"handleClick($event)\"\n      [ngClass]=\"getClasses()\"\n      [href]=\"href\"\n      [attr.data-analytics]=\"analyticsString\"\n      [attr.target]=\"target\"\n      [attr.data-id]=\"idString\"\n      [attr.disabled]=\"isDisabled\"\n      [attr.aria-controls]=\"ariaControls\"\n      [attr.aria-label]=\"ariaLabel\"\n      [attr.aria-labelledby]=\"ariaLabelledby\"\n      [attr.aria-haspopup]=\"ariaHasPopUp\"\n      [attr.role]=\"role\"\n      [attr.id]=\"id\"\n      [attr.aria-current]=\"ariaCurrent\"\n      [attr.aria-expanded]=\"ariaExpanded\"\n      [attr.aria-hidden]=\"ariaHidden\"\n      [attr.aria-selected]=\"ariaSelected\"\n    >\n      <ng-content></ng-content>\n    </a>\n  "
        })
        /**
         * @deprecate This component will be removed in
         * a future release in favor of the `sprkLink` directive.
         * Please use the Spark Link
         * directive.
         */
        ,
        __metadata("design:paramtypes", [Router])
    ], SprkLinkComponent);
    return SprkLinkComponent;
}());

var SprkLinkModule = /** @class */ (function () {
    function SprkLinkModule() {
    }
    SprkLinkModule = __decorate([
        NgModule({
            imports: [CommonModule, RouterModule],
            declarations: [SprkLinkComponent],
            exports: [SprkLinkComponent]
        })
    ], SprkLinkModule);
    return SprkLinkModule;
}());

var SprkAccordionComponent = /** @class */ (function () {
    function SprkAccordionComponent() {
    }
    /**
     * @ignore
     */
    SprkAccordionComponent.prototype.getClasses = function () {
        var classArray = ['sprk-c-Accordion', 'sprk-o-VerticalList'];
        if (this.additionalClasses) {
            this.additionalClasses.split(' ').forEach(function (className) {
                classArray.push(className);
            });
        }
        return classArray.join(' ');
    };
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], SprkAccordionComponent.prototype, "additionalClasses", void 0);
    SprkAccordionComponent = __decorate([
        Component({
            selector: 'sprk-accordion',
            template: "\n    <ul [ngClass]=\"getClasses()\">\n      <ng-content></ng-content>\n    </ul>\n  "
        })
    ], SprkAccordionComponent);
    return SprkAccordionComponent;
}());

var SprkAccordionModule = /** @class */ (function () {
    function SprkAccordionModule() {
    }
    SprkAccordionModule = __decorate([
        NgModule({
            imports: [CommonModule, RouterModule, SprkIconModule, SprkLinkModule],
            declarations: [SprkAccordionComponent],
            exports: [SprkAccordionComponent]
        })
    ], SprkAccordionModule);
    return SprkAccordionModule;
}());

var SprkAlertComponent = /** @class */ (function () {
    function SprkAlertComponent() {
        /**
         * @ignore
         */
        this.visible = true;
    }
    /**
     * @ignore
     */
    SprkAlertComponent.prototype.getClassesAlertContainer = function () {
        var alertClassArray = ['sprk-c-Alert'];
        switch (this.alertType) {
            case 'success':
                alertClassArray.push('sprk-c-Alert--success');
                this.icon = 'check-mark';
                break;
            case 'info':
                alertClassArray.push('sprk-c-Alert--info');
                this.icon = 'bell';
                break;
            case 'fail':
                alertClassArray.push('sprk-c-Alert--fail');
                this.icon = 'exclamation';
                break;
            default:
                break;
        }
        if (this.additionalClasses) {
            this.additionalClasses.split(' ').forEach(function (className) {
                alertClassArray.push(className);
            });
        }
        return alertClassArray.join(' ');
    };
    /**
     * When the dismiss button is clicked
     * this method sets the visable state to `false`
     * and hides the Alert component.
     */
    SprkAlertComponent.prototype.alertDismiss = function (event) {
        this.visible = false;
    };
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], SprkAlertComponent.prototype, "alertType", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], SprkAlertComponent.prototype, "analyticsString", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], SprkAlertComponent.prototype, "idString", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], SprkAlertComponent.prototype, "additionalClasses", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Boolean)
    ], SprkAlertComponent.prototype, "dismissible", void 0);
    SprkAlertComponent = __decorate([
        Component({
            selector: 'sprk-alert',
            template: "\n    <div\n      *ngIf=\"visible\"\n      [ngClass]=\"getClassesAlertContainer()\"\n      role=\"alert\"\n      [attr.data-analytics]=\"analyticsString\"\n      [attr.data-id]=\"idString\"\n    >\n      <div class=\"sprk-c-Alert__content\">\n        <sprk-icon\n          iconType=\"{{ icon }}\"\n          additionalClasses=\"sprk-c-Alert__icon sprk-c-Icon--l sprk-c-Icon--stroke-current-color\"\n          aria-hidden=\"true\"\n        ></sprk-icon>\n\n        <p class=\"sprk-c-Alert__text\"><ng-content></ng-content></p>\n      </div>\n\n      <button\n        *ngIf=\"dismissible !== false\"\n        class=\"sprk-c-Alert__icon sprk-c-Alert__icon--dismiss\"\n        type=\"button\"\n        title=\"Dismiss\"\n        (click)=\"alertDismiss($event)\"\n      >\n        <sprk-icon\n          iconType=\"close\"\n          additionalClasses=\"sprk-c-Icon--stroke-current-color\"\n          aria-hidden=\"true\"\n        ></sprk-icon>\n      </button>\n    </div>\n  "
        })
    ], SprkAlertComponent);
    return SprkAlertComponent;
}());

var SprkAlertModule = /** @class */ (function () {
    function SprkAlertModule() {
    }
    SprkAlertModule = __decorate([
        NgModule({
            imports: [CommonModule, RouterModule, SprkIconModule],
            declarations: [SprkAlertComponent],
            exports: [SprkAlertComponent]
        })
    ], SprkAlertModule);
    return SprkAlertModule;
}());

var SprkDividerComponent = /** @class */ (function () {
    function SprkDividerComponent() {
    }
    /**
     * @ignore
     */
    SprkDividerComponent.prototype.getClasses = function () {
        var classArray = ['sprk-c-Divider'];
        if (this.additionalClasses) {
            this.additionalClasses.split(' ').forEach(function (className) {
                classArray.push(className);
            });
        }
        return classArray.join(' ');
    };
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], SprkDividerComponent.prototype, "additionalClasses", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], SprkDividerComponent.prototype, "idString", void 0);
    SprkDividerComponent = __decorate([
        Component({
            selector: 'sprk-divider',
            template: "\n    <span [ngClass]=\"getClasses()\" [attr.data-id]=\"idString\"> </span>\n  "
        })
    ], SprkDividerComponent);
    return SprkDividerComponent;
}());

var SprkDividerModule = /** @class */ (function () {
    function SprkDividerModule() {
    }
    SprkDividerModule = __decorate([
        NgModule({
            imports: [CommonModule, RouterModule],
            declarations: [SprkDividerComponent],
            exports: [SprkDividerComponent]
        })
    ], SprkDividerModule);
    return SprkDividerModule;
}());

var SprkDropdownComponent = /** @class */ (function () {
    /**
     * @ignore
     */
    function SprkDropdownComponent(ref) {
        this.ref = ref;
        /**
         * The variant of the Dropdown to render.
         */
        this.dropdownType = 'base';
        /**
         * If `true`, the Dropdown will be open when rendered.
         */
        this.isOpen = false;
        /**
         * The event that is
         * emitted from the Dropdown when a choice
         * is clicked. The event contains the value
         * of the choice that was clicked.
         */
        this.choiceMade = new EventEmitter();
    }
    /**
     * @ignore
     */
    SprkDropdownComponent.prototype.toggle = function (event) {
        event.preventDefault();
        this.isOpen = !this.isOpen;
    };
    SprkDropdownComponent.prototype.onClick = function (event) {
        if (!this.ref.nativeElement.contains(event.target) ||
            event.target.classList.contains('sprk-c-MastheadMask')) {
            this.hideDropdown();
        }
    };
    SprkDropdownComponent.prototype.onFocusin = function (event) {
        /* istanbul ignore else: angular focus event isnt setting e.target */
        if (!this.ref.nativeElement.contains(event.target) ||
            event.target.classList.contains('sprk-c-MastheadMask')) {
            this.hideDropdown();
        }
    };
    /**
     * @ignore
     */
    SprkDropdownComponent.prototype.choiceClick = function (event) {
        this.clearActiveChoices();
        var choiceIndex = event.currentTarget.getAttribute('data-sprk-dropdown-choice-index');
        var clickedChoice = this.choices[choiceIndex];
        if (this.dropdownType === 'informational' ||
            this.dropdownType === 'mastheadSelector') {
            this.setActiveChoice(event);
            this.updateTriggerText(event);
        }
        this.hideDropdown();
        this.choiceMade.emit(clickedChoice['value']);
    };
    /**
     * @ignore
     */
    SprkDropdownComponent.prototype.setActiveChoice = function (event) {
        var choiceIndex = event.currentTarget.getAttribute('data-sprk-dropdown-choice-index');
        this.choices[choiceIndex]['active'] = true;
    };
    /**
     * @ignore
     */
    SprkDropdownComponent.prototype.updateTriggerText = function (event) {
        var choiceIndex = event.currentTarget.getAttribute('data-sprk-dropdown-choice-index');
        this.triggerText = this.choices[choiceIndex]['value'];
    };
    /**
     * @ignore
     */
    SprkDropdownComponent.prototype.clearActiveChoices = function () {
        this.choices.forEach(function (choice) {
            choice['active'] = false;
        });
    };
    /**
     * @ignore
     */
    SprkDropdownComponent.prototype.hideDropdown = function () {
        this.isOpen = false;
    };
    /**
     * @ignore
     */
    SprkDropdownComponent.prototype.getClasses = function () {
        var classArray = ['sprk-c-Dropdown'];
        if (this.additionalClasses) {
            this.additionalClasses.split(' ').forEach(function (className) {
                classArray.push(className);
            });
        }
        return classArray.join(' ');
    };
    /**
     * @ignore
     */
    SprkDropdownComponent.prototype.getTriggerClasses = function () {
        var classArray = [];
        if (this.additionalTriggerClasses) {
            this.additionalTriggerClasses.split(' ').forEach(function (className) {
                classArray.push(className);
            });
        }
        return classArray.join(' ');
    };
    /**
     * @ignore
     */
    SprkDropdownComponent.prototype.getTriggerTextClasses = function () {
        var classArray = [''];
        if (this.additionalTriggerTextClasses) {
            this.additionalTriggerTextClasses.split(' ').forEach(function (className) {
                classArray.push(className);
            });
        }
        return classArray.join(' ');
    };
    SprkDropdownComponent.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], SprkDropdownComponent.prototype, "dropdownType", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], SprkDropdownComponent.prototype, "additionalClasses", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], SprkDropdownComponent.prototype, "additionalIconClasses", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], SprkDropdownComponent.prototype, "additionalTriggerClasses", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], SprkDropdownComponent.prototype, "additionalTriggerTextClasses", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], SprkDropdownComponent.prototype, "idString", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], SprkDropdownComponent.prototype, "analyticsString", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], SprkDropdownComponent.prototype, "isOpen", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], SprkDropdownComponent.prototype, "title", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], SprkDropdownComponent.prototype, "selector", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Array)
    ], SprkDropdownComponent.prototype, "choices", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], SprkDropdownComponent.prototype, "triggerIconType", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], SprkDropdownComponent.prototype, "triggerText", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], SprkDropdownComponent.prototype, "screenReaderText", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], SprkDropdownComponent.prototype, "choiceMade", void 0);
    __decorate([
        HostListener('document:click', ['$event']),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [Object]),
        __metadata("design:returntype", void 0)
    ], SprkDropdownComponent.prototype, "onClick", null);
    __decorate([
        HostListener('document:focusin', ['$event']),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [Object]),
        __metadata("design:returntype", void 0)
    ], SprkDropdownComponent.prototype, "onFocusin", null);
    SprkDropdownComponent = __decorate([
        Component({
            selector: 'sprk-dropdown',
            template: "\n    <div\n      [ngClass]=\"{\n        'sprk-c-MastheadMask': isOpen && dropdownType === 'mastheadSelector'\n      }\"\n    >\n      <div [ngClass]=\"{ 'sprk-o-Box': dropdownType === 'mastheadSelector' }\">\n        <a\n          sprkLink\n          [ngClass]=\"getTriggerClasses()\"\n          (click)=\"toggle($event)\"\n          [idString]=\"idString\"\n          [analyticsString]=\"analyticsString\"\n          aria-haspopup=\"listbox\"\n          href=\"#\"\n          [attr.aria-label]=\"triggerText ? triggerText : (screenReaderText || 'Choose One')\"\n        >\n          <span [ngClass]=\"getTriggerTextClasses()\">{{ triggerText }}</span>\n          <span class=\"sprk-u-ScreenReaderText\">{{ screenReaderText }}</span>\n          <sprk-icon\n            [iconType]=\"triggerIconType\"\n            additionalClasses=\"sprk-u-mls sprk-c-Icon--stroke-current-color {{\n              additionalIconClasses\n            }}\"\n          ></sprk-icon>\n        </a>\n      </div>\n\n      <div [ngClass]=\"getClasses()\" *ngIf=\"isOpen\">\n        <div\n          class=\"sprk-c-Dropdown__header\"\n          *ngIf=\"dropdownType === 'mastheadSelector' || title || selector\"\n        >\n          <h2 class=\"sprk-c-Dropdown__title sprk-b-TypeBodyTwo\" *ngIf=\"title\">\n            {{ title }}\n          </h2>\n\n          <a\n            sprkLink\n            *ngIf=\"selector && !title\"\n            variant=\"plain\"\n            class=\"sprk-o-Stack sprk-o-Stack--split@xxs sprk-o-Stack--center-column sprk-u-Width-100\"\n            (click)=\"toggle($event)\"\n            [attr.aria-label]=\"title\"\n            href=\"#\"\n          >\n            <span\n              class=\"sprk-c-Dropdown__title sprk-b-TypeBodyTwo sprk-o-Stack__item sprk-o-Stack__item--flex@xxs\"\n              >{{ selector }}</span\n            >\n            <sprk-icon\n              [iconType]=\"triggerIconType\"\n              additionalClasses=\"sprk-c-Icon--stroke-current-color sprk-u-mls sprk-c-Icon--toggle sprk-Stack__item {{\n                additionalIconClasses\n              }}\"\n            ></sprk-icon>\n          </a>\n        </div>\n\n        <ul\n          class=\"sprk-c-Dropdown__links\"\n          role=\"listbox\"\n          [attr.aria-label]=\"title ? title : (screenReaderText || 'My Choices')\"\n        >\n          <li\n            class=\"sprk-c-Dropdown__item\"\n            *ngFor=\"let choice of choices; let i = index\"\n            [attr.data-sprk-dropdown-choice-index]=\"i\"\n            (click)=\"choiceClick($event)\"\n            [attr.aria-selected]=\"choice.active\"\n            role=\"option\"\n          >\n            <div *ngIf=\"choice.content; then content; else link\"></div>\n            <ng-template #link>\n              <a\n                sprkLink\n                variant=\"unstyled\"\n                [attr.href]=\"choice.href\"\n                [analyticsString]=\"choice.analyticsString\"\n                [ngClass]=\"{\n                  'sprk-c-Dropdown__link': true,\n                  'sprk-c-Dropdown__link--active': choice.active\n                }\"\n                [attr.aria-label]=\"choice.text\"\n                >{{ choice.text }}\n              </a>\n            </ng-template>\n            <ng-template #content>\n              <a\n                sprkLink\n                variant=\"unstyled\"\n                [attr.href]=\"choice.href\"\n                [analyticsString]=\"choice.analyticsString\"\n                [ngClass]=\"{\n                  'sprk-c-Dropdown__link': true,\n                  'sprk-c-Dropdown__link--active': choice.active\n                }\"\n                [attr.aria-label]=\"choice.content.title\"\n              >\n                <p class=\"sprk-b-TypeBodyOne\">{{ choice.content.title }}</p>\n                <p>{{ choice.content.infoLine1 }}</p>\n                <p>{{ choice.content.infoLine2 }}</p>\n              </a>\n            </ng-template>\n          </li>\n        </ul>\n        <ng-content select=\"[sprkDropdownFooter]\"></ng-content>\n      </div>\n    </div>\n  "
        }),
        __metadata("design:paramtypes", [ElementRef])
    ], SprkDropdownComponent);
    return SprkDropdownComponent;
}());

var SprkDropdownModule = /** @class */ (function () {
    function SprkDropdownModule() {
    }
    SprkDropdownModule = __decorate([
        NgModule({
            imports: [CommonModule, SprkIconModule, SprkLinkDirectiveModule],
            declarations: [SprkDropdownComponent],
            exports: [SprkDropdownComponent]
        })
    ], SprkDropdownModule);
    return SprkDropdownModule;
}());

var SprkStackComponent = /** @class */ (function () {
    function SprkStackComponent() {
    }
    /**
     * @ignore
     */
    SprkStackComponent.prototype.getClasses = function () {
        var classArray = ['sprk-o-Stack'];
        // Handle the choice of item split breakpoint by adding CSS class
        switch (this.splitAt) {
            case 'tiny':
                classArray.push('sprk-o-Stack--split@xs');
                break;
            case 'small':
                classArray.push('sprk-o-Stack--split@s');
                break;
            case 'medium':
                classArray.push('sprk-o-Stack--split@m');
                break;
            case 'large':
                classArray.push('sprk-o-Stack--split@l');
                break;
            case 'huge':
                classArray.push('sprk-o-Stack--split@xl');
                break;
            default:
                break;
        }
        // Handle the choice of item spacing by adding CSS class
        switch (this.itemSpacing) {
            case 'tiny':
                classArray.push('sprk-o-Stack--tiny');
                break;
            case 'small':
                classArray.push('sprk-o-Stack--small');
                break;
            case 'medium':
                classArray.push('sprk-o-Stack--medium');
                break;
            case 'large':
                classArray.push('sprk-o-Stack--large');
                break;
            case 'huge':
                classArray.push('sprk-o-Stack--huge');
                break;
            default:
                break;
        }
        if (this.additionalClasses) {
            this.additionalClasses.split(' ').forEach(function (className) {
                classArray.push(className);
            });
        }
        return classArray.join(' ');
    };
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], SprkStackComponent.prototype, "splitAt", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], SprkStackComponent.prototype, "itemSpacing", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], SprkStackComponent.prototype, "analyticsString", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], SprkStackComponent.prototype, "additionalClasses", void 0);
    SprkStackComponent = __decorate([
        Component({
            selector: 'sprk-stack',
            template: "\n    <div [ngClass]=\"getClasses()\" [attr.data-analytics]=\"analyticsString\">\n      <ng-content></ng-content>\n    </div>\n  "
        })
    ], SprkStackComponent);
    return SprkStackComponent;
}());

var SprkStackModule = /** @class */ (function () {
    function SprkStackModule() {
    }
    SprkStackModule = __decorate([
        NgModule({
            imports: [CommonModule, RouterModule],
            declarations: [SprkStackComponent],
            exports: [SprkStackComponent]
        })
    ], SprkStackModule);
    return SprkStackModule;
}());

var SprkToggleComponent = /** @class */ (function () {
    function SprkToggleComponent() {
        /**
         * The value supplied will be assigned as a CSS class
         * on the clickable title text used in the Toggle.
         * This is intended for overrides.
         */
        this.titleFontClass = 'sprk-b-TypeBodyThree';
        /**
         * A string that is used to set the `id` on the content
         * and the `aria-controls` for the toggle trigger button.
         */
        this.contentId = uniqueId("sprk_toggle_content_");
        /**
         * @ignore
         */
        this.isOpen = false;
        /**
         * @ignore
         */
        this.iconStateClass = '';
        /**
         * @ignore
         */
        this.animState = 'closed';
    }
    /**
     * @ignore
     */
    SprkToggleComponent.prototype.toggleState = function () {
        this.isOpen === false
            ? (this.animState = 'closed')
            : (this.animState = 'open');
        this.isOpen === false
            ? (this.iconStateClass = '')
            : (this.iconStateClass = 'sprk-c-Icon--open');
    };
    /**
     * @ignore
     */
    SprkToggleComponent.prototype.toggle = function (event) {
        event.preventDefault();
        this.isOpen = !this.isOpen;
        this.toggleState();
    };
    /**
     * @ignore
     */
    SprkToggleComponent.prototype.getClasses = function () {
        var classArray = [
            'sprk-c-Toggle__trigger sprk-u-TextCrop--none',
            this.titleFontClass,
        ];
        return classArray.join(' ');
    };
    SprkToggleComponent.prototype.ngAfterViewInit = function () {
        this.toggleState();
    };
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], SprkToggleComponent.prototype, "analyticsString", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], SprkToggleComponent.prototype, "additionalClasses", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], SprkToggleComponent.prototype, "title", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], SprkToggleComponent.prototype, "iconClass", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], SprkToggleComponent.prototype, "titleFontClass", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], SprkToggleComponent.prototype, "idString", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], SprkToggleComponent.prototype, "contentId", void 0);
    SprkToggleComponent = __decorate([
        Component({
            selector: 'sprk-toggle',
            template: "\n    <div\n      class=\"sprk-c-Toggle {{ additionalClasses }}\"\n      [attr.data-id]=\"idString\"\n    >\n      <button\n        variant=\"icon\"\n        [ngClass]=\"getClasses()\"\n        (click)=\"toggle($event)\"\n        [attr.aria-expanded]=\"isOpen ? 'true' : 'false'\"\n        [attr.data-analytics]=\"analyticsString\"\n        [attr.aria-controls]=\"contentId\"\n      >\n        <sprk-icon\n          iconType=\"chevron-down-circle-two-color\"\n          additionalClasses=\"{{\n            iconClass\n          }} sprk-c-Icon--l sprk-u-mrs sprk-c-Icon--toggle {{ iconStateClass }}\"\n        ></sprk-icon>\n        {{ title }}\n      </button>\n\n      <div\n        [@toggleContent]=\"animState\"\n        [id]=\"contentId\"\n      >\n        <div class=\"sprk-u-pts sprk-u-pbs sprk-c-Toggle__content\">\n          <ng-content></ng-content>\n        </div>\n      </div>\n    </div>\n  ",
            animations: [toggleAnimations.toggleContent]
        })
    ], SprkToggleComponent);
    return SprkToggleComponent;
}());

var SprkToggleModule = /** @class */ (function () {
    function SprkToggleModule() {
    }
    SprkToggleModule = __decorate([
        NgModule({
            imports: [
                CommonModule,
                SprkIconModule,
                SprkLinkDirectiveModule
            ],
            declarations: [SprkToggleComponent],
            exports: [SprkToggleComponent]
        })
    ], SprkToggleModule);
    return SprkToggleModule;
}());

var SprkFooterComponent = /** @class */ (function () {
    function SprkFooterComponent() {
    }
    /**
     * @ignore
     */
    SprkFooterComponent.prototype.getClasses = function () {
        var classArray = [
            'sprk-o-CenteredColumn sprk-o-Stack sprk-o-Stack--misc-b'
        ];
        if (this.additionalClasses) {
            this.additionalClasses.split(' ').forEach(function (className) {
                classArray.push(className);
            });
        }
        return classArray.join(' ');
    };
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], SprkFooterComponent.prototype, "additionalClasses", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], SprkFooterComponent.prototype, "idString", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], SprkFooterComponent.prototype, "globalHeading", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], SprkFooterComponent.prototype, "awardsHeading", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], SprkFooterComponent.prototype, "connectHeading", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Array)
    ], SprkFooterComponent.prototype, "globalLinks", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Array)
    ], SprkFooterComponent.prototype, "localLinks", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Array)
    ], SprkFooterComponent.prototype, "socialLinks", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Array)
    ], SprkFooterComponent.prototype, "awards", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Array)
    ], SprkFooterComponent.prototype, "badgeLinks", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Array)
    ], SprkFooterComponent.prototype, "disclaimerText", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Array)
    ], SprkFooterComponent.prototype, "disclaimerToggle", void 0);
    SprkFooterComponent = __decorate([
        Component({
            selector: 'sprk-footer',
            template: "\n    <div class=\"sprk-o-Box sprk-o-Box--large sprk-u-BackgroundColor--gray\">\n      <footer\n        [ngClass]=\"getClasses()\"\n        role=\"contentinfo\"\n        [attr.data-id]=\"idString\"\n      >\n        <div\n          class=\"sprk-o-Stack__item sprk-o-Stack sprk-o-Stack--medium sprk-o-Stack--split@m\"\n        >\n          <div\n            *ngIf=\"globalLinks\"\n            class=\"sprk-o-Stack__item sprk-o-Stack__item--three-tenths@m sprk-o-Stack sprk-o-Stack--misc-b sprk-o-Box sprk-u-prh\"\n          >\n            <h3 class=\"sprk-o-Stack__item sprk-b-TypeBodyOne\">\n              {{ globalHeading }}\n            </h3>\n\n            <div\n              *ngFor=\"let item of globalLinks\"\n              class=\"sprk-o-Stack__item sprk-o-Stack sprk-o-Stack--medium\"\n            >\n              <div class=\"sprk-o-Stack__item\">\n                <a\n                  sprkLink\n                  variant=\"plain\"\n                  href=\"{{ item.href }}\"\n                  analyticsString=\"{{ item.analytics || item.analyticsString }}\"\n                >\n                  <sprk-icon\n                    *ngIf=\"item.icon\"\n                    iconType=\"{{ item.icon }}\"\n                    additionalClasses=\"{{ item.iconCSS }}\"\n                  ></sprk-icon>\n                  <span *ngIf=\"item.icon\" class=\"sprk-u-ScreenReaderText\">{{\n                    item.iconScreenReaderText\n                  }}</span>\n                  <img\n                    *ngIf=\"item.imgSrc\"\n                    src=\"{{ item.imgSrc }}\"\n                    alt=\"{{ item.imgAlt }}\"\n                    class=\"{{ item.imgCSS }}\"\n                  />\n                </a>\n              </div>\n\n              <p class=\"sprk-o-Stack__item sprk-b-TypeBodyFour\">\n                {{ item.text }}\n              </p>\n            </div>\n          </div>\n\n          <div\n            class=\"sprk-o-Stack__item sprk-o-Stack__item--seven-tenths@m sprk-o-Stack sprk-o-Stack--medium\"\n          >\n            <div\n              *ngIf=\"localLinks\"\n              class=\"sprk-o-Stack__item sprk-o-Stack sprk-o-Stack--medium sprk-o-Stack--split@m\"\n            >\n              <div\n                *ngFor=\"let item of localLinks\"\n                class=\"sprk-o-Stack__item sprk-o-Stack__item--third@m sprk-o-Box sprk-u-PaddingRight--a sprk-o-Stack sprk-o-Stack--large\"\n              >\n                <h3 class=\"sprk-o-Stack__item sprk-b-TypeBodyOne\">\n                  {{ item.heading }}\n                </h3>\n\n                <ul\n                  class=\"sprk-o-Stack__item sprk-o-Stack sprk-o-Stack--misc-a sprk-b-List sprk-b-List--bare\"\n                >\n                  <li\n                    class=\"sprk-o-Stack__item\"\n                    *ngFor=\"let link of item.links\"\n                  >\n                    <a\n                      sprkLink\n                      variant=\"simple\"\n                      class=\"sprk-u-FontWeight--normal\"\n                      href=\"{{ link.href }}\"\n                      analyticsString=\"{{ link.analyticsString || link.analytics }}\"\n                    >\n                      {{ link.text }}\n                    </a>\n                  </li>\n                </ul>\n              </div>\n            </div>\n\n            <div\n              *ngIf=\"socialLinks\"\n              class=\"sprk-o-Stack__item sprk-o-Stack sprk-o-Stack--large sprk-o-Box\"\n            >\n              <h3 class=\"sprk-o-Stack__item sprk-b-TypeBodyOne\">\n                {{ connectHeading }}\n              </h3>\n\n              <div\n                class=\"sprk-o-Stack__item sprk-o-Stack sprk-o-Stack--large sprk-o-Stack--split@m\"\n              >\n                <ul\n                  *ngIf=\"socialLinks\"\n                  class=\"\n                    sprk-o-Stack__item\n                    sprk-o-Stack__item--flex@m\n                    sprk-o-Stack\n                    sprk-o-Stack--split@xxs\n                    sprk-o-Stack--medium\n                    sprk-b-List\n                    sprk-b-List--bare\"\n                >\n                  <li\n                    *ngFor=\"let item of socialLinks\"\n                    class=\"sprk-o-Stack__item\"\n                  >\n                    <a\n                      sprkLink\n                      variant=\"plain\"\n                      href=\"{{ item.href }}\"\n                      analyticsString=\"{{ item.analytics || item.analyticsString }}\"\n                    >\n                      <sprk-icon\n                        *ngIf=\"item.icon\"\n                        iconType=\"{{ item.icon }}\"\n                        additionalClasses=\"{{ item.iconCSS }}\"\n                      ></sprk-icon>\n                      <span *ngIf=\"item.icon\" class=\"sprk-u-ScreenReaderText\">{{\n                        item.iconScreenReaderText\n                      }}</span>\n                    </a>\n                  </li>\n                </ul>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        <span\n          class=\"sprk-c-Divider sprk-u-mvn sprk-u-mhm\"\n          data-id=\"divider-1\"\n        ></span>\n\n        <div\n          class=\"sprk-o-Stack__item sprk-o-Stack sprk-o-Stack--misc-b sprk-o-Box sprk-u-PaddingTop--b\"\n        >\n          <div\n            *ngIf=\"awards\"\n            class=\"sprk-o-Stack__item sprk-o-Stack sprk-o-Stack--large\"\n          >\n            <h3 class=\"sprk-o-Stack__item sprk-b-TypeBodyOne\">\n              {{ awardsHeading }}\n            </h3>\n\n            <div\n              class=\"sprk-o-Stack__item sprk-o-Stack sprk-o-Stack--medium sprk-o-Stack--split@s sprk-u-mbm\"\n            >\n              <div class=\"sprk-o-Stack__item\" *ngFor=\"let award of awards\">\n                <a\n                  sprkLink\n                  variant=\"plain\"\n                  class=\"sprk-o-Stack__item\"\n                  href=\"{{ award.href }}\"\n                  analyticsString=\"{{ award.analytics || award.analyticsString }}\"\n                >\n                  <img\n                    *ngIf=\"award.imgSrc\"\n                    src=\"{{ award.imgSrc }}\"\n                    alt=\"{{ award.imgAlt }}\"\n                    class=\"{{ award.imgCSS }}\"\n                  />\n                </a>\n              </div>\n            </div>\n\n            <div\n              *ngFor=\"let toggle of disclaimerToggle\"\n              class=\"sprk-o-Stack__item\"\n            >\n              <sprk-toggle\n                title=\"{{ toggle.title }}\"\n                analyticsString=\"{{ toggle.analytics || toggle.analyticsString }}\"\n                iconClass=\"sprk-c-Icon--stroke-current-color\"\n                titleFontClass=\"sprk-b-TypeBodyFour\"\n              >\n                <p class=\"sprk-b-TypeBodyFour\">{{ toggle.body }}</p>\n              </sprk-toggle>\n            </div>\n          </div>\n\n          <div\n            *ngIf=\"disclaimerText\"\n            class=\"sprk-o-Stack__item sprk-o-Stack sprk-o-Stack--large\"\n          >\n            <p\n              *ngFor=\"let disclaimer of disclaimerText\"\n              class=\"sprk-o-Stack__item sprk-b-TypeBodyFour\"\n            >\n              {{ disclaimer.text }}\n            </p>\n          </div>\n\n          <ul\n            *ngIf=\"badgeLinks\"\n            class=\"\n              sprk-o-Stack__item\n              sprk-o-Stack__item--flex@m\n              sprk-o-Stack\n              sprk-o-Stack--split@xxs\n              sprk-o-Stack--medium\n              sprk-b-List\n              sprk-b-List--bare\"\n          >\n            <li *ngFor=\"let item of badgeLinks\" class=\"sprk-o-Stack__item\">\n              <a\n                sprkLink\n                variant=\"plain\"\n                href=\"{{ item.href }}\"\n                analyticsString=\"{{ item.analytics || item.analyticsString }}\"\n              >\n                <sprk-icon\n                  *ngIf=\"item.icon\"\n                  iconType=\"{{ item.icon }}\"\n                  additionalClasses=\"{{ item.iconCSS }}\"\n                ></sprk-icon>\n                <span *ngIf=\"item.icon\" class=\"sprk-u-ScreenReaderText\">{{\n                  item.iconScreenReaderText\n                }}</span>\n              </a>\n            </li>\n          </ul>\n        </div>\n      </footer>\n    </div>\n  "
        })
    ], SprkFooterComponent);
    return SprkFooterComponent;
}());

var SprkFooterModule = /** @class */ (function () {
    function SprkFooterModule() {
    }
    SprkFooterModule = __decorate([
        NgModule({
            imports: [
                CommonModule,
                SprkIconModule,
                SprkStackModule,
                SprkStackItemModule,
                SprkToggleModule,
                SprkLinkDirectiveModule
            ],
            declarations: [SprkFooterComponent],
            exports: [SprkFooterComponent]
        })
    ], SprkFooterModule);
    return SprkFooterModule;
}());

var SprkListItemComponent = /** @class */ (function () {
    function SprkListItemComponent() {
    }
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], SprkListItemComponent.prototype, "analyticsString", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], SprkListItemComponent.prototype, "idString", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], SprkListItemComponent.prototype, "additionalClasses", void 0);
    __decorate([
        ViewChild(TemplateRef, { static: true }),
        __metadata("design:type", TemplateRef)
    ], SprkListItemComponent.prototype, "content", void 0);
    SprkListItemComponent = __decorate([
        Component({
            selector: 'sprk-list-item',
            template: "\n    <ng-template>\n      <ng-content></ng-content>\n    </ng-template>\n  "
        })
    ], SprkListItemComponent);
    return SprkListItemComponent;
}());

var SprkListItemModule = /** @class */ (function () {
    function SprkListItemModule() {
    }
    SprkListItemModule = __decorate([
        NgModule({
            imports: [CommonModule, RouterModule],
            declarations: [SprkListItemComponent],
            exports: [SprkListItemComponent]
        })
    ], SprkListItemModule);
    return SprkListItemModule;
}());

var SprkMastheadAccordionComponent = /** @class */ (function () {
    function SprkMastheadAccordionComponent() {
    }
    /**
     * @ignore
     */
    SprkMastheadAccordionComponent.prototype.getClasses = function () {
        var classArray = [
            'sprk-c-MastheadAccordion',
            'sprk-b-List',
            'sprk-b-List--bare'
        ];
        if (this.additionalClasses) {
            this.additionalClasses.split(' ').forEach(function (className) {
                classArray.push(className);
            });
        }
        return classArray.join(' ');
    };
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], SprkMastheadAccordionComponent.prototype, "additionalClasses", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], SprkMastheadAccordionComponent.prototype, "idString", void 0);
    SprkMastheadAccordionComponent = __decorate([
        Component({
            selector: 'sprk-masthead-accordion',
            template: "\n    <nav role=\"navigation\" [attr.data-id]=\"idString\">\n      <ul [ngClass]=\"getClasses()\">\n        <ng-content></ng-content>\n      </ul>\n    </nav>\n  "
        })
    ], SprkMastheadAccordionComponent);
    return SprkMastheadAccordionComponent;
}());

var SprkMastheadAccordionModule = /** @class */ (function () {
    function SprkMastheadAccordionModule() {
    }
    SprkMastheadAccordionModule = __decorate([
        NgModule({
            imports: [CommonModule, SprkIconModule],
            declarations: [SprkMastheadAccordionComponent],
            exports: [SprkMastheadAccordionComponent]
        })
    ], SprkMastheadAccordionModule);
    return SprkMastheadAccordionModule;
}());

var SprkMastheadAccordionItemComponent = /** @class */ (function () {
    function SprkMastheadAccordionItemComponent() {
        /**
         * If `true`, the Masthead accordion item
         * will be open when it is rendered.
         */
        this.isOpen = false;
        /**
         * The name of the icon to use
         * for the clickable close icon.
         */
        this.iconTypeClosed = 'chevron-up-circle-two-color';
        /**
         * The name of the icon to use
         * for the clickable open icon.
         */
        this.iconTypeOpen = 'chevron-up-circle-two-color';
        /**
         * @ignore
         */
        this.componentID = uniqueId();
        /**
         * @ignore
         */
        this.accordion_controls_id = "accordionHeading__" + this.componentID;
        /**
         * @ignore
         */
        this.currentIconType = this.iconTypeClosed;
        /**
         * @ignore
         */
        this.iconStateClass = '';
        /**
         * @ignore
         */
        this.animState = 'closed';
    }
    /**
     * @ignore
     */
    SprkMastheadAccordionItemComponent.prototype.accordionState = function () {
        this.isOpen === false
            ? (this.animState = 'closed')
            : (this.animState = 'open');
        this.isOpen === false
            ? (this.currentIconType = this.iconTypeClosed)
            : (this.currentIconType = this.iconTypeOpen);
        this.isOpen === false
            ? (this.iconStateClass = '')
            : (this.iconStateClass = 'sprk-c-Icon--open');
    };
    /**
     * @ignore
     */
    SprkMastheadAccordionItemComponent.prototype.toggleAccordion = function (event) {
        event.preventDefault();
        this.isOpen = !this.isOpen;
        this.accordionState();
    };
    /**
     * @ignore
     */
    SprkMastheadAccordionItemComponent.prototype.getClasses = function () {
        var classArray = [
            'sprk-c-MastheadAccordion__item',
            'sprk-u-Overflow--hidden'
        ];
        if (this.isOpen) {
            classArray.push('sprk-c-MastheadAccordion__item--open');
        }
        if (this.isActive) {
            classArray.push('sprk-c-MastheadAccordion__item--active');
        }
        if (this.additionalClasses) {
            this.additionalClasses.split(' ').forEach(function (className) {
                classArray.push(className);
            });
        }
        return classArray.join(' ');
    };
    /**
     * @ignore
     */
    SprkMastheadAccordionItemComponent.prototype.getHeadingClasses = function () {
        var classArray = ['sprk-c-MastheadAccordion__heading'];
        if (this.additionalHeadingClasses) {
            this.additionalHeadingClasses.split(' ').forEach(function (className) {
                classArray.push(className);
            });
        }
        return classArray.join(' ');
    };
    SprkMastheadAccordionItemComponent.prototype.ngOnInit = function () {
        this.accordionState();
    };
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], SprkMastheadAccordionItemComponent.prototype, "title", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], SprkMastheadAccordionItemComponent.prototype, "analyticsString", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], SprkMastheadAccordionItemComponent.prototype, "idString", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], SprkMastheadAccordionItemComponent.prototype, "additionalClasses", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], SprkMastheadAccordionItemComponent.prototype, "additionalHeadingClasses", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], SprkMastheadAccordionItemComponent.prototype, "isOpen", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Boolean)
    ], SprkMastheadAccordionItemComponent.prototype, "isActive", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], SprkMastheadAccordionItemComponent.prototype, "iconTypeClosed", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], SprkMastheadAccordionItemComponent.prototype, "iconTypeOpen", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], SprkMastheadAccordionItemComponent.prototype, "leadingIcon", void 0);
    SprkMastheadAccordionItemComponent = __decorate([
        Component({
            selector: 'sprk-masthead-accordion-item',
            template: "\n    <li [ngClass]=\"getClasses()\">\n      <div\n        class=\"sprk-u-Position--relative sprk-o-Stack__item sprk-u-Width-100\"\n      >\n        <button\n          [attr.aria-controls]=\"accordion_controls_id\"\n          class=\"sprk-c-MastheadAccordion__summary\"\n          [attr.data-analytics]=\"analyticsString\"\n          [attr.data-id]=\"idString\"\n          (click)=\"toggleAccordion($event)\"\n          [attr.aria-expanded]=\"isOpen\"\n        >\n          <span [ngClass]=\"getHeadingClasses()\">\n            <sprk-icon\n              [iconType]=\"leadingIcon\"\n              additionalClasses=\"sprk-c-Icon--stroke-current-color sprk-c-Icon--l sprk-c-Icon--toggle sprk-u-mrs\"\n              *ngIf=\"leadingIcon\"\n            ></sprk-icon>\n            {{ title }}\n          </span>\n\n          <sprk-icon\n            additionalClasses=\"sprk-c-MastheadAccordion__icon sprk-c-Icon--stroke-current-color sprk-c-Icon--toggle {{\n              iconStateClass\n            }}\"\n            [iconType]=\"currentIconType\"\n          ></sprk-icon>\n        </button>\n      </div>\n\n      <div [@toggleContent]=\"animState\">\n        <div [id]=\"accordion_controls_id\"><ng-content></ng-content></div>\n      </div>\n    </li>\n  ",
            animations: [toggleAnimations.toggleContent]
        })
    ], SprkMastheadAccordionItemComponent);
    return SprkMastheadAccordionItemComponent;
}());

var SprkMastheadAccordionItemModule = /** @class */ (function () {
    function SprkMastheadAccordionItemModule() {
    }
    SprkMastheadAccordionItemModule = __decorate([
        NgModule({
            imports: [CommonModule, SprkIconModule],
            declarations: [SprkMastheadAccordionItemComponent],
            exports: [SprkMastheadAccordionItemComponent]
        })
    ], SprkMastheadAccordionItemModule);
    return SprkMastheadAccordionItemModule;
}());

var SprkMastheadComponent = /** @class */ (function () {
    /**
     * @ignore
     */
    function SprkMastheadComponent(renderer, router) {
        var _this = this;
        this.renderer = renderer;
        /**
         *  The `href` value of the logo.
         */
        this.logoHref = '/';
        /**
         * The value supplied will be used as
         * screen reader text that is visually hidden
         * for the link that wraps the logo.
         */
        this.logoLinkScreenReaderText = 'Go to the homepage';
        /**
         * Represents the initial state of the
         * narrow nav element of the Masthead component.
         */
        this.isNarrowNavOpen = false;
        /**
         * A string that is used to set the `id` on the narrow nav
         * and the `aria-controls` for the menu trigger button.
         */
        this.narrowNavId = uniqueId("sprk_masthead_narrow_nav_");
        /**
         * @ignore
         */
        this.iconType = 'chevron-down';
        /**
         * @ignore
         */
        this.componentID = uniqueId();
        /**
         * @ignore
         */
        this.controls_id = "sprk-narrow-navigation-item__" + this.componentID;
        /**
         * @ignore
         */
        this.isScrolled = false;
        /**
         * @ignore
         */
        this.isNarrowLayout = false;
        /**
         * @ignore
         */
        this.scrollDirection = 'up';
        /**
         * @ignore
         */
        this.isHidden = false;
        /**
         * @ignore
         */
        this.isNarrowOnResize = false;
        /**
         * @ignore
         */
        this.scrollPosition = 0;
        /**
         * @ignore
         */
        this.throttledCheckScrollDirection = throttle(this.checkScrollDirection, 500);
        /**
         * @ignore
         */
        this.throttledUpdateLayoutState = throttle(this.updateLayoutState, 500);
        router.events.subscribe(function (event) {
            if (event instanceof NavigationEnd) {
                _this.closeNarrowNav();
            }
        });
    }
    /**
     * @ignore
     * Closes the narrow navigation menu
     * if it is left open when
     * the viewport is expanded.
     */
    SprkMastheadComponent.prototype.handleResizeEvent = function () {
        this.closeNarrowNav();
    };
    /**
     * @ignore
     */
    SprkMastheadComponent.prototype.onScroll = function (event) {
        window.scrollY >= 10 ? (this.isScrolled = true) : (this.isScrolled = false);
        if (this.isNarrowLayout) {
            this.throttledCheckScrollDirection();
        }
    };
    /**
     * @ignore
     * Handles when viewport size changes to
     * large while narrow nav is hidden.
     */
    SprkMastheadComponent.prototype.onResize = function (event) {
        this.isNarrowOnResize = this.isElementVisible('.sprk-c-Masthead__menu');
        this.throttledUpdateLayoutState();
    };
    /**
     * @ignore
     */
    SprkMastheadComponent.prototype.updateLayoutState = function () {
        if (this.isNarrowLayout !== this.isNarrowOnResize) {
            this.isNarrowLayout = this.isNarrowOnResize;
            // If is not narrow on resize update, make sure it's visible
            if (!this.isNarrowLayout) {
                this.isHidden = false;
            }
        }
    };
    /**
     * @ignore
     */
    SprkMastheadComponent.prototype.ngAfterContentInit = function () {
        this.isNarrowLayout = this.isElementVisible('.sprk-c-Masthead__menu');
    };
    /**
     * @ignore
     */
    SprkMastheadComponent.prototype.isElementVisible = function (selector) {
        if (typeof window === 'undefined') {
            return;
        }
        var element = document.querySelector(selector);
        if (!element) {
            return;
        }
        var elementDisplayValue = window.getComputedStyle(element).display;
        var elementVisibilityValue = window.getComputedStyle(element).visibility;
        var elementIsVisible = elementDisplayValue === 'none' || elementVisibilityValue === 'hidden'
            ? false
            : true;
        return elementIsVisible;
    };
    /**
     * @ignore
     */
    SprkMastheadComponent.prototype.scrollYDirection = function () {
        if (typeof window !== 'undefined') {
            var newScrollPos = window.scrollY;
            if (newScrollPos < 0) {
                return;
            }
            var diff = newScrollPos - this.scrollPosition;
            var direction = diff > 0 ? 'down' : 'up';
            this.scrollPosition = newScrollPos;
            return direction;
        }
    };
    /**
     * @ignore
     */
    SprkMastheadComponent.prototype.checkScrollDirection = function () {
        var newDirection = this.scrollYDirection();
        if (this.scrollDirection !== newDirection) {
            this.scrollDirection = newDirection;
            this.scrollDirection === 'down'
                ? (this.isHidden = true)
                : (this.isHidden = false);
        }
    };
    /**
     * @ignore
     */
    SprkMastheadComponent.prototype.getClasses = function () {
        var classArray = ['sprk-c-Masthead', 'sprk-o-Stack'];
        if (this.additionalClasses) {
            this.additionalClasses.split(' ').forEach(function (className) {
                classArray.push(className);
            });
        }
        if (this.isNarrowNavOpen) {
            classArray.push('sprk-c-Masthead--open');
        }
        if (this.isScrolled) {
            classArray.push('sprk-c-Masthead--scroll');
        }
        if (this.isHidden) {
            classArray.push('sprk-c-Masthead--hidden');
        }
        return classArray.join(' ');
    };
    /**
     * @ignore
     */
    SprkMastheadComponent.prototype.getNarrowNavClasses = function () {
        var classArray = [];
        if (this.additionalNarrowNavClasses) {
            this.additionalNarrowNavClasses.split(' ').forEach(function (className) {
                classArray.push(className);
            });
        }
        return classArray.join(' ');
    };
    /**
     * @ignore
     */
    SprkMastheadComponent.prototype.getSecondaryNavClasses = function () {
        var classArray = [
            'sprk-c-Masthead__big-nav-items',
            'sprk-o-Stack',
            'sprk-o-Stack--misc-a',
            'sprk-o-Stack--center-row',
            'sprk-o-Stack--split@xxs',
            'sprk-b-List',
            'sprk-b-List--bare'
        ];
        if (this.additionalBigNavClasses) {
            this.additionalBigNavClasses.split(' ').forEach(function (className) {
                classArray.push(className);
            });
        }
        return classArray.join(' ');
    };
    /**
     * @ignore
     */
    SprkMastheadComponent.prototype.toggleNarrowNav = function (event) {
        event.preventDefault();
        if (this.isNarrowNavOpen) {
            this.closeNarrowNav();
        }
        else {
            this.openNarrowNav();
        }
    };
    /**
     * @ignore
     */
    SprkMastheadComponent.prototype.openNarrowNav = function () {
        this.renderer.addClass(document.body, 'sprk-u-Overflow--hidden');
        this.renderer.addClass(document.body.parentElement, 'sprk-u-Overflow--hidden');
        this.renderer.addClass(document.body, 'sprk-u-Height--100');
        this.renderer.addClass(document.body.parentElement, 'sprk-u-Height--100');
        this.isNarrowNavOpen = true;
    };
    /**
     * @ignore
     */
    SprkMastheadComponent.prototype.closeNarrowNav = function () {
        this.renderer.removeClass(document.body, 'sprk-u-Overflow--hidden');
        this.renderer.removeClass(document.body.parentElement, 'sprk-u-Overflow--hidden');
        this.renderer.removeClass(document.body, 'sprk-u-Height--100');
        this.renderer.removeClass(document.body.parentElement, 'sprk-u-Height--100');
        this.isNarrowNavOpen = false;
    };
    SprkMastheadComponent.ctorParameters = function () { return [
        { type: Renderer2 },
        { type: Router }
    ]; };
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], SprkMastheadComponent.prototype, "logoHref", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], SprkMastheadComponent.prototype, "logoLinkScreenReaderText", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], SprkMastheadComponent.prototype, "additionalClasses", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], SprkMastheadComponent.prototype, "additionalBigNavClasses", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], SprkMastheadComponent.prototype, "additionalNarrowNavClasses", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Array)
    ], SprkMastheadComponent.prototype, "narrowNavLinks", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], SprkMastheadComponent.prototype, "isNarrowNavOpen", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], SprkMastheadComponent.prototype, "idString", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Array)
    ], SprkMastheadComponent.prototype, "bigNavLinks", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], SprkMastheadComponent.prototype, "narrowSelector", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], SprkMastheadComponent.prototype, "narrowNavId", void 0);
    __decorate([
        HostListener('window:orientationchange'),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", []),
        __metadata("design:returntype", void 0)
    ], SprkMastheadComponent.prototype, "handleResizeEvent", null);
    __decorate([
        HostListener('window:scroll', ['$event']),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [Object]),
        __metadata("design:returntype", void 0)
    ], SprkMastheadComponent.prototype, "onScroll", null);
    __decorate([
        HostListener('window:resize', ['$event']),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [Object]),
        __metadata("design:returntype", void 0)
    ], SprkMastheadComponent.prototype, "onResize", null);
    SprkMastheadComponent = __decorate([
        Component({
            selector: 'sprk-masthead',
            template: "\n    <header [ngClass]=\"getClasses()\" role=\"banner\" [attr.data-id]=\"idString\">\n      <div\n        class=\"sprk-c-Masthead__content sprk-o-Stack__item sprk-o-Stack sprk-o-Stack--split@xxs\"\n      >\n        <div\n          class=\"sprk-c-Masthead__menu sprk-o-Stack__item sprk-o-Stack__item--center-column@xxs\"\n        >\n          <button\n            class=\"sprk-c-Menu\"\n            type=\"button\"\n            [attr.aria-expanded]=\"isNarrowNavOpen ? true : false\"\n            (click)=\"toggleNarrowNav($event)\"\n            [attr.aria-controls]=\"narrowNavId\"\n          >\n            <span class=\"sprk-u-ScreenReaderText\">Toggle Navigation</span>\n            <svg\n              [ngClass]=\"{\n                'sprk-c-Icon': true,\n                'sprk-c-Icon--l': true,\n                'sprk-c-Menu__icon': true,\n                'sprk-c-Menu__icon--open': isNarrowNavOpen\n              }\"\n              aria-hidden=\"true\"\n              viewBox=\"0 0 64 64\"\n              xmlns=\"http://www.w3.org/2000/svg\"\n            >\n              <g>\n                <path\n                  class=\"sprk-c-Menu__line sprk-c-Menu__line--two\"\n                  d=\"m8 32h48\"\n                />\n                <path\n                  class=\"sprk-c-Menu__line sprk-c-Menu__line--one\"\n                  d=\"m8 18.68h48\"\n                />\n                <path\n                  class=\"sprk-c-Menu__line sprk-c-Menu__line--three\"\n                  d=\"m8 45.32h48\"\n                />\n              </g>\n            </svg>\n          </button>\n        </div>\n\n        <div\n          class=\"sprk-c-Masthead__branding sprk-o-Stack__item sprk-o-Stack__item--center-column@xxs\"\n        >\n          <a sprkLink [attr.href]=\"logoHref\" variant=\"unstyled\">\n            <ng-content select=\"[logo-slot]\"></ng-content>\n            <span class=\"sprk-u-ScreenReaderText\">{{\n              logoLinkScreenReaderText\n            }}</span>\n          </a>\n        </div>\n\n        <div\n          class=\"sprk-c-Masthead__nav-item sprk-o-Stack__item sprk-o-Stack__item--center-column@xxs\"\n        >\n          <ng-content select=\"[navItem-slot]\"></ng-content>\n        </div>\n        <nav\n          class=\"\n          sprk-c-Masthead__little-nav\n          sprk-o-Stack__item\n          sprk-o-Stack__item--flex@xxs\n          sprk-o-Stack\n          sprk-o-Stack--misc-a\n          sprk-o-Stack--split@xxs\n          sprk-o-Stack--end-row\"\n          role=\"navigation\"\n        >\n          <ng-content select=\"[little-nav-slot]\"></ng-content>\n\n          <ng-content select=\"[utility-slot]\"></ng-content>\n        </nav>\n      </div>\n\n      <div class=\"sprk-o-Stack__item\">\n        <nav\n          class=\"sprk-c-Masthead__big-nav\"\n          role=\"navigation\"\n          [attr.data-id]=\"idString\"\n          *ngIf=\"bigNavLinks\"\n        >\n          <ul [ngClass]=\"getSecondaryNavClasses()\">\n            <li\n              *ngFor=\"let link of bigNavLinks\"\n              [ngClass]=\"{\n                'sprk-c-Masthead__big-nav-item': true,\n                'sprk-o-Stack__item': true,\n                'sprk-c-Masthead__big-nav-item--open':\n                  link.focused && link.subNav\n              }\"\n              routerLinkActive=\"sprk-c-Masthead__big-nav-item--active\"\n              [attr.aria-haspopup]=\"link.subNav ? 'true' : null\"\n            >\n              <div *ngIf=\"link.subNav\">\n                <sprk-dropdown\n                  [choices]=\"link.subNav\"\n                  additionalTriggerClasses=\"sprk-b-Link--plain sprk-c-Masthead__link sprk-c-Masthead__link--big-nav\"\n                  additionalClasses=\"sprk-u-TextAlign--left\"\n                  triggerIconType=\"chevron-down\"\n                  [analyticsString]=\"link.analyticsString\"\n                  [triggerText]=\"link.text\"\n                ></sprk-dropdown>\n              </div>\n              <div *ngIf=\"!link.subNav\">\n                <a\n                  sprkLink\n                  variant=\"plain\"\n                  [analyticsString]=\"link.analyticsString\"\n                  class=\"sprk-c-Masthead__link sprk-c-Masthead__link--big-nav\"\n                  [attr.href]=\"link.href\"\n                >\n                  {{ link.text }}\n                </a>\n              </div>\n            </li>\n          </ul>\n        </nav>\n      </div>\n\n      <nav\n        *ngIf=\"isNarrowNavOpen\"\n        class=\"sprk-c-Masthead__narrow-nav\"\n        role=\"navigation\"\n        [id]=\"narrowNavId\"\n      >\n        <sprk-dropdown\n          *ngIf=\"narrowSelector\"\n          dropdownType=\"mastheadSelector\"\n          additionalClasses=\"sprk-c-Masthead__selector-dropdown\"\n          additionalTriggerClasses=\"\n            sprk-c-Masthead__selector\n            sprk-b-Link\n            sprk-b-Link--plain\n            sprk-o-Stack\n            sprk-o-Stack--split@xxs\n            sprk-o-Stack--center-column\"\n          additionalTriggerTextClasses=\"sprk-o-Stack__item sprk-o-Stack__item--flex@xxs\"\n          additionalIconClasses=\"sprk-Stack__item sprk-u-mrs\"\n          [triggerText]=\"narrowSelector['trigger'].text\"\n          selector=\"Select One\"\n          triggerIconType=\"chevron-down\"\n          [choices]=\"narrowSelector['choices']\"\n        >\n          <div\n            *ngIf=\"narrowSelector['footer']\"\n            class=\"sprk-c-Dropdown__footer sprk-u-TextAlign--center\"\n            sprkDropdownFooter\n          >\n            <a\n              sprkLink\n              variant=\"unstyled\"\n              [analyticsString]=\"narrowSelector['footer'].analyticsString\"\n              [attr.href]=\"narrowSelector['footer'].href\"\n              class=\"sprk-c-Button sprk-c-Button--tertiary\"\n            >\n              {{ narrowSelector['footer'].text }}\n            </a>\n          </div>\n        </sprk-dropdown>\n\n        <sprk-masthead-accordion [additionalClasses]=\"getNarrowNavClasses()\">\n          <div *ngFor=\"let narrowLink of narrowNavLinks\">\n            <div *ngIf=\"narrowLink.subNav\">\n              <sprk-masthead-accordion-item\n                iconTypeOpen=\"chevron-down\"\n                iconTypeClosed=\"chevron-down\"\n                [leadingIcon]=\"narrowLink.leadingIcon\"\n                [isActive]=\"narrowLink.active\"\n                [title]=\"narrowLink.text\"\n              >\n                <ul\n                  class=\"sprk-b-List sprk-b-List--bare sprk-c-MastheadAccordion__details\"\n                >\n                  <li\n                    class=\"sprk-c-MastheadAccordion__item\"\n                    *ngFor=\"let subNavLink of narrowLink.subNav\"\n                  >\n                    <a\n                      sprkLink\n                      variant=\"unstyled\"\n                      class=\"sprk-c-MastheadAccordion__summary\"\n                      [attr.href]=\"subNavLink.href\"\n                      [analyticsString]=\"subNavLink.analyticsString\"\n                    >\n                      <sprk-icon\n                        [iconType]=\"subNavLink.leadingIcon\"\n                        additionalClasses=\"sprk-c-Icon--stroke-current-color sprk-u-mrs\"\n                        *ngIf=\"subNavLink.leadingIcon\"\n                      ></sprk-icon>\n                      {{ subNavLink.text }}\n                    </a>\n                  </li>\n                </ul>\n              </sprk-masthead-accordion-item>\n            </div>\n            <div *ngIf=\"!narrowLink.subNav\">\n              <li\n                [ngClass]=\"{\n                  'sprk-c-MastheadAccordion__item': true,\n                  'sprk-c-MastheadAccordion__item--active': narrowLink.active\n                }\"\n              >\n                <a\n                  sprkLink\n                  variant=\"unstyled\"\n                  class=\"sprk-c-MastheadAccordion__summary\"\n                  [attr.href]=\"narrowLink.href\"\n                  [analyticsString]=\"narrowLink.analyticsString\"\n                >\n                  <span class=\"sprk-c-MastheadAccordion__heading\">\n                    <sprk-icon\n                      [iconType]=\"narrowLink.leadingIcon\"\n                      additionalClasses=\"sprk-c-Icon--stroke-current-color sprk-u-mrs\"\n                      *ngIf=\"narrowLink.leadingIcon\"\n                    ></sprk-icon>\n                    {{ narrowLink.text }}\n                  </span>\n                </a>\n              </li>\n            </div>\n          </div>\n        </sprk-masthead-accordion>\n        <ng-content select=\"[narrowNavFooter]\"></ng-content>\n      </nav>\n    </header>\n  "
        }),
        __metadata("design:paramtypes", [Renderer2, Router])
    ], SprkMastheadComponent);
    return SprkMastheadComponent;
}());

var SprkMastheadModule = /** @class */ (function () {
    function SprkMastheadModule() {
    }
    SprkMastheadModule = __decorate([
        NgModule({
            imports: [
                CommonModule,
                SprkIconModule,
                RouterModule,
                SprkMastheadAccordionModule,
                SprkMastheadAccordionItemModule,
                SprkDropdownModule,
                SprkAccordionModule,
                SprkAccordionItemModule,
                SprkLinkDirectiveModule,
            ],
            declarations: [SprkMastheadComponent],
            exports: [SprkMastheadComponent],
        })
    ], SprkMastheadModule);
    return SprkMastheadModule;
}());

var SprkModalComponent = /** @class */ (function () {
    /**
     * @ignore
     */
    function SprkModalComponent() {
        /**
         * The value supplied will be
         * rendered as the text for the confirm button.
         */
        this.confirmText = 'Confirm';
        /**
         * The value supplied will be rendered
         * as the text for the cancel button.
         */
        this.cancelText = 'Cancel';
        /**
         * If `true`, the Modal will be shown.
         * If `false`, the modal will not be shown.
         */
        this.isVisible = false;
        /**
         * When the Modal is closed the hide event is
         * emitted and a callback function can
         * be triggered if supplied.
         */
        this.hide = new EventEmitter();
        /**
         * Available when the Modal type is `choice`.
         * The Modal will emit a confirm click event
         * when the confirmation button is clicked.
         * A callback function can be triggered if
         * supplied.
         */
        this.confirmClick = new EventEmitter();
        /**
         * Available when the Modal type is `choice`.
         * The Modal will emit a cancel click event
         * when the cancel link is clicked.
         * A callback function can be triggered if supplied.
         */
        this.cancelClick = new EventEmitter();
        /**
         * @ignore
         */
        this.componentID = uniqueId();
        /**
         * @ignore
         */
        this.heading_id = "modalHeading__" + this.componentID;
        /**
         * @ignore
         */
        this.content_id = "modalContent__" + this.componentID;
    }
    /**
     * @ignore
     */
    SprkModalComponent.prototype.handleKeyboardEvent = function (event) {
        if (this.isVisible && event.key === 'Escape') {
            this.closeModal(event);
        }
    };
    /**
     * @ignore
     */
    SprkModalComponent.prototype.closeModal = function (event) {
        if (this.modalType !== 'wait') {
            event.preventDefault();
            this.hide.emit(event);
        }
    };
    /**
     * Emits an event when the confirmation
     * button is clicked.
     */
    SprkModalComponent.prototype.emitConfirmClick = function (event) {
        this.confirmClick.emit(event);
    };
    /**
     * Emits an event when the cancel
     * link is clicked.
     */
    SprkModalComponent.prototype.emitCancelClick = function (event) {
        event.preventDefault();
        this.cancelClick.emit(event);
        this.closeModal(event);
    };
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], SprkModalComponent.prototype, "title", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], SprkModalComponent.prototype, "modalType", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], SprkModalComponent.prototype, "confirmText", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], SprkModalComponent.prototype, "cancelText", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], SprkModalComponent.prototype, "confirmAnalyticsString", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], SprkModalComponent.prototype, "cancelAnalyticsString", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], SprkModalComponent.prototype, "idString", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], SprkModalComponent.prototype, "isVisible", void 0);
    __decorate([
        Output(),
        __metadata("design:type", Object)
    ], SprkModalComponent.prototype, "hide", void 0);
    __decorate([
        Output(),
        __metadata("design:type", Object)
    ], SprkModalComponent.prototype, "confirmClick", void 0);
    __decorate([
        Output(),
        __metadata("design:type", Object)
    ], SprkModalComponent.prototype, "cancelClick", void 0);
    __decorate([
        HostListener('document:keydown', ['$event']),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [KeyboardEvent]),
        __metadata("design:returntype", void 0)
    ], SprkModalComponent.prototype, "handleKeyboardEvent", null);
    SprkModalComponent = __decorate([
        Component({
            selector: 'sprk-modal',
            template: "\n    <div\n      *ngIf=\"isVisible\"\n      [ngClass]=\"{\n        'sprk-c-Modal': true,\n        'sprk-c-Modal--wait': modalType === 'wait'\n      }\"\n      role=\"dialog\"\n      tabindex=\"1\"\n      [attr.aria-labelledby]=\"heading_id\"\n      aria-modal=\"true\"\n      [attr.aria-describedby]=\"content_id\"\n      [attr.data-id]=\"idString\"\n    >\n      <div class=\"sprk-o-Stack sprk-o-Stack--large\">\n        <header class=\"sprk-o-Stack__item sprk-c-Modal__header\">\n          <h2\n            class=\"sprk-c-Modal__heading sprk-b-TypeDisplayFour\"\n            [id]=\"heading_id\"\n          >\n            {{ title }}\n          </h2>\n\n          <button\n            *ngIf=\"modalType != 'wait'\"\n            class=\"sprk-c-Modal__icon\"\n            type=\"button\"\n            aria-label=\"Close Modal\"\n            (click)=\"closeModal($event)\"\n          >\n            <sprk-icon\n              iconType=\"close\"\n              additionalClasses=\"sprk-c-Icon--stroke-current-color\"\n            ></sprk-icon>\n          </button>\n        </header>\n\n        <div\n          class=\"sprk-o-Stack__item sprk-c-Modal__body sprk-o-Stack sprk-o-Stack--medium\"\n        >\n          <div\n            *ngIf=\"modalType == 'wait'\"\n            class=\"sprk-o-Stack__item sprk-c-Spinner sprk-c-Spinner--circle sprk-c-Spinner--large sprk-c-Spinner--dark\"\n          ></div>\n          <ng-content></ng-content>\n        </div>\n\n        <footer\n          *ngIf=\"modalType === 'choice'\"\n          class=\"sprk-o-Stack__item sprk-c-Modal__footer\"\n        >\n          <button\n            class=\"sprk-c-Button sprk-u-mrm\"\n            [attr.data-analytics]=\"confirmAnalyticsString\"\n            (click)=\"emitConfirmClick($event)\"\n          >\n            {{ confirmText }}\n          </button>\n\n          <button\n            class=\"sprk-c-Button sprk-c-Button--tertiary\"\n            [attr.data-analytics]=\"cancelAnalyticsString\"\n            (click)=\"emitCancelClick($event)\"\n          >\n            {{ cancelText }}\n          </button>\n        </footer>\n      </div>\n    </div>\n\n    <div\n      *ngIf=\"isVisible\"\n      class=\"sprk-c-ModalMask\"\n      tabindex=\"-1\"\n      (click)=\"closeModal($event)\"\n    ></div>\n  "
        }),
        __metadata("design:paramtypes", [])
    ], SprkModalComponent);
    return SprkModalComponent;
}());

var SprkModalModule = /** @class */ (function () {
    function SprkModalModule() {
    }
    SprkModalModule = __decorate([
        NgModule({
            imports: [CommonModule, RouterModule, SprkIconModule],
            declarations: [SprkModalComponent],
            exports: [SprkModalComponent]
        })
    ], SprkModalModule);
    return SprkModalModule;
}());

var SprkOrderedListComponent = /** @class */ (function () {
    function SprkOrderedListComponent() {
    }
    /**
     * @ignore
     */
    SprkOrderedListComponent.prototype.getClasses = function () {
        var classArray = ['sprk-b-List'];
        switch (this.listType) {
            case 'indented':
                classArray.push('sprk-b-List--indented');
                break;
            case 'bare':
                classArray.push('sprk-b-List--bare');
                break;
            default:
                break;
        }
        if (this.additionalClasses) {
            this.additionalClasses.split(' ').forEach(function (className) {
                classArray.push(className);
            });
        }
        return classArray.join(' ');
    };
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], SprkOrderedListComponent.prototype, "listType", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], SprkOrderedListComponent.prototype, "additionalClasses", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], SprkOrderedListComponent.prototype, "idString", void 0);
    __decorate([
        ContentChildren(SprkListItemComponent),
        __metadata("design:type", QueryList)
    ], SprkOrderedListComponent.prototype, "items", void 0);
    SprkOrderedListComponent = __decorate([
        Component({
            selector: 'sprk-ordered-list',
            template: "\n    <ol [ngClass]=\"getClasses()\" [attr.data-id]=\"idString\">\n      <li\n        *ngFor=\"let item of items\"\n        [attr.data-analytics]=\"item.analyticsString\"\n        [attr.data-id]=\"item.idString\"\n        [ngClass]=\"item.additionalClasses\"\n      >\n        <ng-container [ngTemplateOutlet]=\"item.content\"></ng-container>\n      </li>\n    </ol>\n  "
        }),
        __metadata("design:paramtypes", [])
    ], SprkOrderedListComponent);
    return SprkOrderedListComponent;
}());

var SprkOrderedListModule = /** @class */ (function () {
    function SprkOrderedListModule() {
    }
    SprkOrderedListModule = __decorate([
        NgModule({
            imports: [CommonModule, RouterModule],
            declarations: [SprkOrderedListComponent],
            exports: [SprkOrderedListComponent]
        })
    ], SprkOrderedListModule);
    return SprkOrderedListModule;
}());

var SprkUnorderedListComponent = /** @class */ (function () {
    function SprkUnorderedListComponent() {
    }
    /**
     * @ignore
     */
    SprkUnorderedListComponent.prototype.getClasses = function () {
        var classArray = [''];
        switch (this.listType) {
            case 'indented':
                classArray.push('sprk-b-List');
                classArray.push('sprk-b-List--indented');
                break;
            case 'bare':
                classArray.push('sprk-b-List');
                classArray.push('sprk-b-List--bare');
                break;
            case 'horizontal':
                classArray.push('sprk-o-HorizontalList');
                break;
            default:
                break;
        }
        if (this.additionalClasses) {
            this.additionalClasses.split(' ').forEach(function (className) {
                classArray.push(className);
            });
        }
        return classArray.join(' ');
    };
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], SprkUnorderedListComponent.prototype, "listType", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], SprkUnorderedListComponent.prototype, "additionalClasses", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], SprkUnorderedListComponent.prototype, "idString", void 0);
    __decorate([
        ContentChildren(SprkListItemComponent),
        __metadata("design:type", QueryList)
    ], SprkUnorderedListComponent.prototype, "items", void 0);
    SprkUnorderedListComponent = __decorate([
        Component({
            selector: 'sprk-unordered-list',
            template: "\n    <ul [ngClass]=\"getClasses()\" [attr.data-id]=\"idString\">\n      <li\n        *ngFor=\"let item of items\"\n        [attr.data-analytics]=\"item.analyticsString\"\n        [attr.data-id]=\"item.idString\"\n        [ngClass]=\"item.additionalClasses\"\n      >\n        <ng-container [ngTemplateOutlet]=\"item.content\"></ng-container>\n      </li>\n    </ul>\n  "
        }),
        __metadata("design:paramtypes", [])
    ], SprkUnorderedListComponent);
    return SprkUnorderedListComponent;
}());

var SprkUnorderedListModule = /** @class */ (function () {
    function SprkUnorderedListModule() {
    }
    SprkUnorderedListModule = __decorate([
        NgModule({
            imports: [CommonModule, RouterModule],
            declarations: [SprkUnorderedListComponent],
            exports: [SprkUnorderedListComponent]
        })
    ], SprkUnorderedListModule);
    return SprkUnorderedListModule;
}());

var SprkPaginationComponent = /** @class */ (function () {
    function SprkPaginationComponent() {
        /**
         * If set to `pager`, the component will render
         * in the Pager variant with no visible number
         * links. Otherwise, the component will render in
         * the Default variant if there three or fewer
         * pages or in the Long variant if there are
         * more than three pages.
         */
        this.paginationType = 'default';
        /**
         * Screen reader text for the "Next Page" icon.
         */
        this.nextLinkText = 'Next';
        /**
         * Screen reader text for the "Previous Page"
         * icon.
         */
        this.prevLinkText = 'Prev';
        /**
         * @ignore
         */
        this._currentPage = 1;
        /**
         * Accepts a function to run when the
         * previous link is clicked.
         * On click, `previousClick`
         * will emit the click event and current page.
         */
        this.previousClick = new EventEmitter();
        /**
         * Accepts a function
         * to run when the next link is clicked.
         * On click, `nextClick` will emit the click event and current page.
         */
        this.nextClick = new EventEmitter();
        /**
         * Accepts a function to run when the individual page
         * links are clicked. On click, `pageClick` will
         * emit the click event and current page.
         */
        this.pageClick = new EventEmitter();
    }
    Object.defineProperty(SprkPaginationComponent.prototype, "currentPage", {
        get: function () {
            return this._currentPage;
        },
        /**
         * The current page number.
         * In the Default and Long variants,
         * this value corresponds to the active page link.
         */
        set: function (value) {
            if (value > this.totalPages()) {
                value = this.totalPages();
            }
            else if (value < 1) {
                value = 1;
            }
            this._currentPage = value;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @ignore
     */
    SprkPaginationComponent.prototype.goToPage = function (event, page) {
        event.preventDefault();
        this.currentPage = page;
        this.pageClick.emit({ event: event, page: page });
    };
    /**
     * @ignore
     */
    SprkPaginationComponent.prototype.goBack = function (event, page) {
        event.preventDefault();
        var newPage = page;
        if (this.currentPage > 1) {
            newPage = this.currentPage - 1;
            this.currentPage = newPage;
        }
        // Page is still returning the old page. This allows us to
        // close Issue 1401 without introducing a breaking change.
        this.previousClick.emit({ event: event, page: page, newPage: newPage });
    };
    /**
     * @ignore
     */
    SprkPaginationComponent.prototype.goForward = function (event, page) {
        event.preventDefault();
        var newPage = page;
        if (this.currentPage < this.totalPages()) {
            newPage = this.currentPage + 1;
            this.currentPage = newPage;
        }
        // Page is still returning the old page. This allows us to
        // close Issue 1401 without introducing a breaking change.
        this.nextClick.emit({ event: event, page: page, newPage: newPage });
    };
    /**
     * @ignore
     * @returns total number of pages based on total
     * number of items and the desired number of
     * items to show per page.
     */
    SprkPaginationComponent.prototype.totalPages = function () {
        return Math.ceil(this.totalItems / this.itemsPerPage);
    };
    /**
     * @ignore
     * @returns true if currently on the last page.
     */
    SprkPaginationComponent.prototype.isLastPage = function () {
        return this.currentPage === this.totalPages();
    };
    /**
     * @ignore
     * @returns true if the component is in
     * either the default or long variant.
     */
    SprkPaginationComponent.prototype.showNumbers = function () {
        return this.paginationType !== 'pager';
    };
    /**
     * @ignore
     */
    SprkPaginationComponent.prototype.getClasses = function () {
        var classArray = [''];
        if (this.additionalClasses) {
            this.additionalClasses.split(' ').forEach(function (className) {
                classArray.push(className);
            });
        }
        return classArray.join(' ');
    };
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], SprkPaginationComponent.prototype, "paginationType", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Number)
    ], SprkPaginationComponent.prototype, "totalItems", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Number)
    ], SprkPaginationComponent.prototype, "itemsPerPage", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], SprkPaginationComponent.prototype, "additionalClasses", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], SprkPaginationComponent.prototype, "nextLinkText", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], SprkPaginationComponent.prototype, "prevLinkText", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], SprkPaginationComponent.prototype, "analyticsStringFirstLink", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], SprkPaginationComponent.prototype, "analyticsStringSecondLink", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], SprkPaginationComponent.prototype, "analyticsStringThirdLink", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], SprkPaginationComponent.prototype, "analyticsStringLinkNext", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], SprkPaginationComponent.prototype, "analyticsStringLinkPrev", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], SprkPaginationComponent.prototype, "idString", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Number),
        __metadata("design:paramtypes", [Number])
    ], SprkPaginationComponent.prototype, "currentPage", null);
    __decorate([
        Output(),
        __metadata("design:type", Object)
    ], SprkPaginationComponent.prototype, "previousClick", void 0);
    __decorate([
        Output(),
        __metadata("design:type", Object)
    ], SprkPaginationComponent.prototype, "nextClick", void 0);
    __decorate([
        Output(),
        __metadata("design:type", Object)
    ], SprkPaginationComponent.prototype, "pageClick", void 0);
    SprkPaginationComponent = __decorate([
        Component({
            selector: 'sprk-pagination',
            template: "\n    <nav\n      aria-label=\"Pagination Navigation\"\n      [ngClass]=\"getClasses()\"\n      [attr.data-id]=\"idString\"\n    >\n      <sprk-unordered-list\n        listType=\"horizontal\"\n        additionalClasses=\"sprk-c-Pagination sprk-o-HorizontalList--spacing-medium\"\n      >\n        <sprk-list-item>\n          <a\n            sprkLink\n            variant=\"plain\"\n            (click)=\"goBack($event, currentPage)\"\n            [isDisabled]=\"currentPage === 1\"\n            class=\"sprk-c-Pagination__icon\"\n            [analyticsString]=\"analyticsStringLinkPrev\"\n            aria-label=\"Previous Page\"\n            href=\"#\"\n          >\n            <span class=\"sprk-u-ScreenReaderText\">{{ prevLinkText }}</span>\n            <sprk-icon\n              additionalClasses=\"sprk-c-Icon--stroke-current-color\"\n              iconType=\"chevron-left\"\n            ></sprk-icon>\n          </a>\n        </sprk-list-item>\n\n        <sprk-list-item *ngIf=\"showNumbers()\">\n          <a\n            sprkLink\n            href=\"#\"\n            (click)=\"goToPage($event, 1)\"\n            [ngClass]=\"{\n              'sprk-c-Pagination__link': true,\n              'sprk-c-Pagination__link--current': currentPage === 1\n            }\"\n            [analyticsString]=\"analyticsStringFirstLink\"\n            [attr.aria-current]=\"currentPage === 1\"\n            aria-label=\"Page 1\"\n          >\n            1\n          </a>\n        </sprk-list-item>\n\n        <sprk-list-item\n          *ngIf=\"showNumbers() && currentPage !== 2 && totalPages() === 3\"\n        >\n          <a\n            sprkLink\n            href=\"#\"\n            (click)=\"goToPage($event, 2)\"\n            class=\"sprk-c-Pagination__link\"\n            [attr.aria-current]=\"false\"\n            aria-label=\"Page 2\"\n          >\n            2\n          </a>\n        </sprk-list-item>\n\n        <sprk-list-item\n          *ngIf=\"showNumbers() && currentPage > 2 && totalPages() > 3\"\n        >\n          ...\n        </sprk-list-item>\n\n        <sprk-list-item\n          *ngIf=\"showNumbers() && currentPage > 1 && currentPage < totalPages()\"\n        >\n          <a\n            sprkLink\n            href=\"#\"\n            (click)=\"goToPage($event, currentPage)\"\n            class=\"sprk-c-Pagination__link sprk-c-Pagination__link--current\"\n            aria-current=\"true\"\n            [analyticsString]=\"analyticsStringSecondLink\"\n            attr.aria-label=\"Page {{ currentPage }}\"\n          >\n            {{ currentPage }}\n          </a>\n        </sprk-list-item>\n\n        <sprk-list-item\n          *ngIf=\"\n            showNumbers() && currentPage < totalPages() - 1 && totalPages() > 3\n          \"\n        >\n          ...\n        </sprk-list-item>\n\n        <sprk-list-item *ngIf=\"showNumbers() && totalPages() > 1\">\n          <a\n            sprkLink\n            href=\"#\"\n            (click)=\"goToPage($event, totalPages())\"\n            [ngClass]=\"{\n              'sprk-c-Pagination__link': true,\n              'sprk-c-Pagination__link--current': currentPage === totalPages()\n            }\"\n            attr.aria-label=\"Page {{ totalPages() }}\"\n            [analyticsString]=\"analyticsStringThirdLink\"\n            [attr.aria-current]=\"currentPage === totalPages()\"\n          >\n            {{ totalPages() }}\n          </a>\n        </sprk-list-item>\n\n        <sprk-list-item>\n          <a\n            sprkLink\n            href=\"#\"\n            variant=\"plain\"\n            [isDisabled]=\"isLastPage()\"\n            (click)=\"goForward($event, currentPage)\"\n            class=\"sprk-c-Pagination__icon\"\n            [analyticsString]=\"analyticsStringLinkNext\"\n            aria-label=\"Next Page\"\n          >\n            <span class=\"sprk-u-ScreenReaderText\">{{ nextLinkText }}</span>\n            <sprk-icon\n              additionalClasses=\"sprk-c-Icon--stroke-current-color\"\n              iconType=\"chevron-right\"\n            ></sprk-icon>\n          </a>\n        </sprk-list-item>\n      </sprk-unordered-list>\n    </nav>\n  "
        }),
        __metadata("design:paramtypes", [])
    ], SprkPaginationComponent);
    return SprkPaginationComponent;
}());

var SprkPaginationModule = /** @class */ (function () {
    function SprkPaginationModule() {
    }
    SprkPaginationModule = __decorate([
        NgModule({
            imports: [
                CommonModule,
                SprkUnorderedListModule,
                SprkIconModule,
                SprkLinkDirectiveModule,
                SprkListItemModule
            ],
            declarations: [SprkPaginationComponent],
            exports: [SprkPaginationComponent]
        })
    ], SprkPaginationModule);
    return SprkPaginationModule;
}());

var SprkPromoComponent = /** @class */ (function () {
    function SprkPromoComponent() {
    }
    /**
     * @ignore
     */
    SprkPromoComponent.prototype.getClasses = function () {
        var classArray = [
            'sprk-c-Promo',
            'sprk-o-Stack',
            'sprk-o-Stack--split@s'
        ];
        if (this.isFlag) {
            classArray.push('sprk-c-Promo--flag');
        }
        if (this.hasBorder) {
            classArray.push('sprk-c-Promo--bordered');
        }
        if (this.additionalClasses) {
            this.additionalClasses.split(' ').forEach(function (className) {
                classArray.push(className);
            });
        }
        return classArray.join(' ');
    };
    /**
     * @ignore
     */
    SprkPromoComponent.prototype.getClassesFlag = function () {
        var classArray = [
            'sprk-o-Stack__item--fourth@s',
            'sprk-o-Stack__item'
        ];
        if (this.additionalClassesFlagLink) {
            this.additionalClassesFlagLink.split(' ').forEach(function (className) {
                classArray.push(className);
            });
        }
        return classArray.join(' ');
    };
    /**
     * @ignore
     */
    SprkPromoComponent.prototype.getClassesImg = function () {
        var classArray = [
            'sprk-o-Stack__item',
            'sprk-o-Stack__item--half@s'
        ];
        if (this.additionalClassesImgLink) {
            this.additionalClassesImgLink.split(' ').forEach(function (className) {
                classArray.push(className);
            });
        }
        return classArray.join(' ');
    };
    /**
     * @ignore
     */
    SprkPromoComponent.prototype.getClassesContent = function () {
        var classArray = [
            'sprk-c-Promo__content',
            'sprk-o-Stack__item',
            'sprk-o-Stack',
            'sprk-o-Stack--large'
        ];
        if (this.isFlag) {
            classArray.push('sprk-o-Stack__item--three-fourths@s');
        }
        else {
            if (this.imgSrc) {
                classArray.push('sprk-o-Stack__item--half@s');
            }
        }
        if (this.additionalClassesContent) {
            this.additionalClassesContent.split(' ').forEach(function (className) {
                classArray.push(className);
            });
        }
        return classArray.join(' ');
    };
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], SprkPromoComponent.prototype, "title", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], SprkPromoComponent.prototype, "subtitle", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], SprkPromoComponent.prototype, "cta", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], SprkPromoComponent.prototype, "ctaText", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], SprkPromoComponent.prototype, "buttonHref", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], SprkPromoComponent.prototype, "buttonLinkAnalytics", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], SprkPromoComponent.prototype, "ctaLinkHref", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], SprkPromoComponent.prototype, "ctaLinkAnalytics", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], SprkPromoComponent.prototype, "additionalClasses", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], SprkPromoComponent.prototype, "additionalClassesContent", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Boolean)
    ], SprkPromoComponent.prototype, "isFlag", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], SprkPromoComponent.prototype, "additionalClassesFlagLink", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], SprkPromoComponent.prototype, "flagLinkAnalytics", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], SprkPromoComponent.prototype, "imgSrc", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], SprkPromoComponent.prototype, "imgAlt", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], SprkPromoComponent.prototype, "imgHref", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], SprkPromoComponent.prototype, "imgLinkAnalytics", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], SprkPromoComponent.prototype, "additionalClassesImgLink", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Boolean)
    ], SprkPromoComponent.prototype, "mediaRev", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Boolean)
    ], SprkPromoComponent.prototype, "hasBorder", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], SprkPromoComponent.prototype, "idString", void 0);
    SprkPromoComponent = __decorate([
        Component({
            selector: 'sprk-promo',
            template: "\n    <div [ngClass]=\"getClasses()\" [attr.data-id]=\"idString\">\n      <a\n        sprkLink\n        variant=\"unstyled\"\n        *ngIf=\"isFlag && !mediaRev\"\n        [ngClass]=\"getClassesFlag()\"\n        [attr.href]=\"imgHref\"\n        [analyticsString]=\"flagLinkAnalytics\"\n      >\n        <img\n          class=\"sprk-c-Promo__image--flag\"\n          alt=\"{{ imgAlt }}\"\n          src=\"{{ imgSrc }}\"\n        />\n      </a>\n      <a\n        sprkLink\n        variant=\"unstyled\"\n        *ngIf=\"imgSrc && !mediaRev && !isFlag\"\n        [attr.href]=\"imgHref\"\n        [analyticsString]=\"imgLinkAnalytics\"\n        [ngClass]=\"getClassesImg()\"\n      >\n        <img\n          class=\"sprk-c-Promo__image\"\n          alt=\"{{ imgAlt }}\"\n          src=\"{{ imgSrc }}\"\n        />\n      </a>\n\n      <div [ngClass]=\"getClassesContent()\">\n        <h3\n          *ngIf=\"title\"\n          class=\"sprk-b-TypeDisplayFive sprk-o-Stack__item sprk-c-Promo__title\"\n        >\n          {{ title }}\n        </h3>\n\n        <div *ngIf=\"subtitle\" class=\"sprk-c-Promo__subtitle sprk-o-Stack__item\">\n          {{ subtitle }}\n        </div>\n\n        <div class=\"sprk-b-TypeBodyTwo sprk-o-Stack__item\">\n          <ng-content></ng-content>\n        </div>\n\n        <div *ngIf=\"cta === 'button'\" class=\"sprk-o-Stack__item\">\n          <a\n            sprkLink\n            variant=\"unstyled\"\n            [attr.href]=\"buttonHref\"\n            class=\"sprk-c-Button\"\n            [analyticsString]=\"buttonLinkAnalytics\"\n          >\n            {{ ctaText }}\n          </a>\n        </div>\n\n        <a\n          sprkLink\n          variant=\"simple\"\n          *ngIf=\"cta === 'link'\"\n          [attr.href]=\"ctaLinkHref\"\n          class=\"sprk-o-Stack__item\"\n          [analyticsString]=\"ctaLinkAnalytics\"\n        >\n          {{ ctaText }}\n        </a>\n      </div>\n\n      <a\n        sprkLink\n        variant=\"unstyled\"\n        *ngIf=\"isFlag && mediaRev\"\n        [attr.href]=\"imgHref\"\n        [ngClass]=\"getClassesFlag()\"\n        [analyticsString]=\"flagLinkAnalytics\"\n      >\n        <img\n          class=\"sprk-c-Promo__image--flag\"\n          alt=\"{{ imgAlt }}\"\n          src=\"{{ imgSrc }}\"\n        />\n      </a>\n\n      <a\n        sprkLink\n        variant=\"unstyled\"\n        *ngIf=\"imgSrc && mediaRev && !isFlag\"\n        [attr.href]=\"imgHref\"\n        [analyticsString]=\"imgLinkAnalytics\"\n        [ngClass]=\"getClassesImg()\"\n      >\n        <img\n          class=\"sprk-c-Promo__image\"\n          alt=\"{{ imgAlt }}\"\n          src=\"{{ imgSrc }}\"\n        />\n      </a>\n    </div>\n  "
        })
    ], SprkPromoComponent);
    return SprkPromoComponent;
}());

var SprkPromoModule = /** @class */ (function () {
    function SprkPromoModule() {
    }
    SprkPromoModule = __decorate([
        NgModule({
            imports: [
                CommonModule,
                SprkIconModule,
                SprkLinkDirectiveModule
            ],
            declarations: [SprkPromoComponent],
            exports: [SprkPromoComponent]
        })
    ], SprkPromoModule);
    return SprkPromoModule;
}());

var SprkTabbedNavigationComponent = /** @class */ (function () {
    /**
     * @ignore
     */
    function SprkTabbedNavigationComponent(ref) {
        this.ref = ref;
        /**
         * @ignore
         */
        this.componentID = uniqueId();
        /**
         * @ignore
         */
        this.activeClass = 'sprk-c-Tabs__button--active';
        this.ariaOrientation(window.innerWidth, this.ref.nativeElement);
    }
    /**
     * @ignore
     */
    SprkTabbedNavigationComponent.prototype.onClick = function ($event) {
        if ($event.target.classList.contains('sprk-c-Tabs__button')) {
            var activePanel = this.panels.find(function (panel) {
                return (panel.ref.nativeElement.id ===
                    $event.target.getAttribute('aria-controls'));
            });
            this.resetTabs(this.tabs.map(function (tab) { return tab.ref.nativeElement; }), this.panels.map(function (panel) { return panel.ref.nativeElement; }), this.activeClass);
            this.setActiveTab($event.target, activePanel.ref.nativeElement, this.activeClass);
        }
    };
    /**
     * @ignore
     */
    SprkTabbedNavigationComponent.prototype.onResize = function () {
        this.ariaOrientation(window.innerWidth, this.ref.nativeElement);
    };
    /**
     * @ignore
     */
    SprkTabbedNavigationComponent.prototype.onKeydown = function ($event) {
        var isTabsButton = $event.target.classList.contains('sprk-c-Tabs__button');
        if (!isTabsButton) {
            return;
        }
        var keys = {
            end: 35,
            home: 36,
            left: 37,
            up: 38,
            right: 39,
            down: 40,
            tab: 9
        };
        var tabElements = this.tabs.map(function (tab) { return tab.ref.nativeElement; });
        var panelElements = this.panels.map(function (panel) { return panel.ref.nativeElement; });
        if ($event.keyCode === keys.left || $event.keyCode === keys.up) {
            this.incrementTab(tabElements, panelElements, this.activeClass, -1);
        }
        else if ($event.keyCode === keys.right || $event.keyCode === keys.down) {
            this.incrementTab(tabElements, panelElements, this.activeClass, 1);
        }
        else if ($event.keyCode === keys.tab) {
            if ($event.target.getAttribute('role') === 'tab') {
                $event.preventDefault();
                panelElements[this.getActiveTabIndex(tabElements, this.activeClass)].focus();
            }
        }
        else if ($event.keyCode === keys.home) {
            this.goToEndTab(tabElements, panelElements, this.activeClass, -1);
        }
        else if ($event.keyCode === keys.end) {
            this.goToEndTab(tabElements, panelElements, this.activeClass, 1);
        }
    };
    /**
     * @ignore
     */
    SprkTabbedNavigationComponent.prototype.getClasses = function () {
        var classArray = ['sprk-c-Tabs'];
        if (this.additionalClasses) {
            this.additionalClasses.split(' ').forEach(function (className) {
                classArray.push(className);
            });
        }
        return classArray.join(' ');
    };
    /**
     * @ignore
     */
    SprkTabbedNavigationComponent.prototype.ngAfterContentInit = function () {
        var _this = this;
        var tabIDs = [];
        var panelIDs = [];
        if (this.tabs && this.panels) {
            this.tabs.forEach(function (tab, index) {
                var tabID = "tabbed-navigation-" + _this.componentID + "-tab-" + index;
                var panelID = "tabbed-navigation-" + _this.componentID + "-panel-" + index;
                tab.ref.nativeElement.setAttribute('id', tabID);
                tab.ref.nativeElement.setAttribute('aria-controls', panelID);
                tabIDs.push(tabID);
                panelIDs.push(panelID);
            });
            tabIDs = tabIDs.reverse();
            panelIDs = panelIDs.reverse();
            this.panels.forEach(function (panel) {
                panel.ref.nativeElement.setAttribute('id', panelIDs.pop());
                panel.ref.nativeElement.setAttribute('aria-labelledby', tabIDs.pop());
            });
        }
    };
    /**
     * @ignore
     */
    SprkTabbedNavigationComponent.prototype.ariaOrientation = function (width, element) {
        // switch aria-orientation on mobile (based on _tabs.scss breakpoint)
        if (width <= 736) {
            element.setAttribute('aria-orientation', 'vertical');
        }
        else {
            element.setAttribute('aria-orientation', 'horizontal');
        }
    };
    /**
     * @ignore
     */
    SprkTabbedNavigationComponent.prototype.getActiveTabIndex = function (tabs, activeClass) {
        var activeIndex = null;
        tabs.forEach(function (tab, index) {
            if (tab.classList.contains(activeClass || 'sprk-c-Tabs__button--active')) {
                activeIndex = index;
            }
        });
        return activeIndex;
    };
    /**
     * @ignore
     */
    SprkTabbedNavigationComponent.prototype.resetTabs = function (tabs, tabpanels, activeClass) {
        tabs.forEach(function (tab) {
            tab.classList.remove(activeClass || 'sprk-c-Tabs__button--active');
            tab.removeAttribute('tabindex');
            tab.setAttribute('aria-selected', 'false');
            tabpanels.forEach(function (panel) {
                panel.classList.add('sprk-u-HideWhenJs');
            });
        });
    };
    /**
     * @ignore
     */
    SprkTabbedNavigationComponent.prototype.incrementTab = function (tabs, tabpanels, activeClass, direction) {
        var activeIndex = this.getActiveTabIndex(tabs, activeClass);
        var foundNewIndex = false;
        // Start looking for the next available tab
        while (foundNewIndex === false) {
            // if the next tab would be off the left of the tabstrip
            if (activeIndex + direction < 0) {
                // loop to the end and keep looking
                activeIndex = tabs.length;
                // if the next tab would be off the right of the tabstrip
            }
            else if (activeIndex + direction >= tabs.length) {
                // loop back to the beginning and keep looking
                activeIndex = -1;
                // If the next tab is not disabled
            }
            else if (!tabs[activeIndex + direction].hasAttribute('disabled')) {
                // move to the next tab
                activeIndex += direction;
                // stop looking for the correct tab
                foundNewIndex = true;
            }
            else {
                // move to the next tab and keep looking
                activeIndex += direction;
            }
        }
        // deselect all tabs
        this.resetTabs(tabs, tabpanels, activeClass);
        // select the correct tab
        this.setActiveTab(tabs[activeIndex], tabpanels[activeIndex], activeClass);
    };
    SprkTabbedNavigationComponent.prototype.goToEndTab = function (tabs, tabpanels, activeClass, direction) {
        var newActiveIndex;
        // if direction is positive, go to the right-most tab
        if (direction > 0) {
            newActiveIndex = tabs.length - 1;
            // else go to the left-most tab
        }
        else {
            newActiveIndex = 0;
        }
        var foundNewIndex = false;
        // step through the tabs until we find one that isn't disabled
        while (foundNewIndex === false) {
            // if this tab is not disabled
            if (!tabs[newActiveIndex].hasAttribute('disabled')) {
                // stop looking for the correct tab
                foundNewIndex = true;
                // else step one tab away from the end and keep looking
            }
            else {
                newActiveIndex -= direction;
            }
        }
        this.resetTabs(tabs, tabpanels, activeClass);
        this.setActiveTab(tabs[newActiveIndex], tabpanels[newActiveIndex], activeClass);
    };
    /**
     * @ignore
     */
    SprkTabbedNavigationComponent.prototype.setActiveTab = function (tab, tabpanel, activeClass) {
        tab.classList.add(activeClass || 'sprk-c-Tabs__button--active');
        tab.setAttribute('tabindex', '0');
        tab.setAttribute('aria-selected', 'true');
        if (tabpanel) {
            tabpanel.classList.remove('sprk-u-HideWhenJs');
        }
        tab.focus();
    };
    SprkTabbedNavigationComponent.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], SprkTabbedNavigationComponent.prototype, "additionalClasses", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], SprkTabbedNavigationComponent.prototype, "idString", void 0);
    __decorate([
        ContentChildren(SprkTabbedNavigationTabDirective),
        __metadata("design:type", QueryList)
    ], SprkTabbedNavigationComponent.prototype, "tabs", void 0);
    __decorate([
        ContentChildren(SprkTabbedNavigationPanelDirective),
        __metadata("design:type", QueryList)
    ], SprkTabbedNavigationComponent.prototype, "panels", void 0);
    __decorate([
        HostListener('click', ['$event']),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [Object]),
        __metadata("design:returntype", void 0)
    ], SprkTabbedNavigationComponent.prototype, "onClick", null);
    __decorate([
        HostListener('window:resize'),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", []),
        __metadata("design:returntype", void 0)
    ], SprkTabbedNavigationComponent.prototype, "onResize", null);
    __decorate([
        HostListener('keydown', ['$event']),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [Object]),
        __metadata("design:returntype", void 0)
    ], SprkTabbedNavigationComponent.prototype, "onKeydown", null);
    SprkTabbedNavigationComponent = __decorate([
        Component({
            selector: 'sprk-tabbed-navigation',
            template: "\n    <div [ngClass]=\"getClasses()\" [attr.data-id]=\"idString\">\n      <div class=\"sprk-c-Tabs__buttons\" role=\"tablist\">\n        <ng-content select=\"[sprkTabbedNavigationTab]\"></ng-content>\n      </div>\n      <ng-content select=\"[sprkTabbedNavigationPane]\"></ng-content>\n      <ng-content></ng-content>\n    </div>\n  "
        }),
        __metadata("design:paramtypes", [ElementRef])
    ], SprkTabbedNavigationComponent);
    return SprkTabbedNavigationComponent;
}());

var SprkTabbedNavigationModule = /** @class */ (function () {
    function SprkTabbedNavigationModule() {
    }
    SprkTabbedNavigationModule = __decorate([
        NgModule({
            imports: [CommonModule, RouterModule],
            declarations: [SprkTabbedNavigationComponent],
            exports: [SprkTabbedNavigationComponent]
        })
    ], SprkTabbedNavigationModule);
    return SprkTabbedNavigationModule;
}());

var SprkTableComponent = /** @class */ (function () {
    function SprkTableComponent() {
    }
    /**
     * @ignore
     */
    SprkTableComponent.prototype.getClasses = function () {
        var classArray = ['sprk-b-TableContainer'];
        if (this.additionalClasses) {
            this.additionalClasses.split(' ').forEach(function (className) {
                classArray.push(className);
            });
        }
        return classArray.join(' ');
    };
    /**
     * @ignore
     */
    SprkTableComponent.prototype.getTableClasses = function () {
        var classArray = [
            'sprk-b-Table',
            'sprk-b-Table--spacing-medium',
        ];
        if (this.additionalTableClasses) {
            this.additionalTableClasses.split(' ').forEach(function (className) {
                classArray.push(className);
            });
        }
        return classArray.join(' ');
    };
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], SprkTableComponent.prototype, "additionalClasses", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], SprkTableComponent.prototype, "additionalTableClasses", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], SprkTableComponent.prototype, "idString", void 0);
    SprkTableComponent = __decorate([
        Component({
            selector: 'sprk-table',
            template: "\n    <div [ngClass]=\"getClasses()\" [attr.data-id]=\"idString\">\n      <table [ngClass]=\"getTableClasses()\">\n        <ng-content></ng-content>\n      </table>\n    </div>\n  "
        })
    ], SprkTableComponent);
    return SprkTableComponent;
}());

var SprkTableModule = /** @class */ (function () {
    function SprkTableModule() {
    }
    SprkTableModule = __decorate([
        NgModule({
            imports: [CommonModule, RouterModule],
            declarations: [SprkTableComponent],
            exports: [SprkTableComponent]
        })
    ], SprkTableModule);
    return SprkTableModule;
}());

var SprkButtonDirective = /** @class */ (function () {
    /**
     * @ignore
     */
    function SprkButtonDirective(ref, renderer) {
        var _this = this;
        this.ref = ref;
        this.renderer = renderer;
        /**
         * Will show a spinner inside the
         * button if set to `true`.
         */
        this.isSpinning = false;
        /**
         * Optional string value that is
         * set for the `aria-label`
         * when `isSpinning` is `true`.
         */
        this.spinningAriaLabel = 'Loading';
        /**
         *  Determines the coresponding button style.
         */
        this.variant = 'primary';
        /**
         * @ignore
         */
        this.setSpinning = function (element) {
            var el = element;
            var width = element.offsetWidth;
            var ariaLabel = _this.spinningAriaLabel;
            var spinnerClass = 'sprk-c-Spinner sprk-c-Spinner--circle';
            if (el.classList.contains('sprk-c-Button--secondary') ||
                _this.variant === 'secondary') {
                spinnerClass += ' sprk-c-Spinner--dark';
            }
            _this.renderer.setAttribute(el, 'data-sprk-spinner-text', el.textContent);
            _this.renderer.setAttribute(el, 'aria-label', ariaLabel);
            el.innerHTML = "<div class=\"" + spinnerClass + "\"></div>";
            el.setAttribute('data-sprk-has-spinner', 'true');
            _this.renderer.setAttribute(el, 'data-sprk-has-spinner', 'true');
            _this.renderer.setAttribute(el, 'style', "width: " + width + "px");
        };
    }
    SprkButtonDirective.prototype.ngOnInit = function () {
        if (this.variant === 'secondary') {
            this.renderer.addClass(this.ref.nativeElement, 'sprk-c-Button--secondary');
        }
        if (this.variant === 'tertiary') {
            this.renderer.addClass(this.ref.nativeElement, 'sprk-c-Button--tertiary');
        }
    };
    /**
     * Add spinner only after view has loaded.
     * This is to allow time for the text
     * content of the button to load so that
     * the width value accounts for that text.
     */
    SprkButtonDirective.prototype.ngAfterViewInit = function () {
        if (this.isSpinning) {
            this.setSpinning(this.ref.nativeElement);
        }
    };
    SprkButtonDirective.prototype.ngOnChanges = function (changes) {
        if (this.isSpinning && !changes['isSpinning'].isFirstChange()) {
            this.setSpinning(this.ref.nativeElement);
        }
    };
    SprkButtonDirective.ctorParameters = function () { return [
        { type: ElementRef },
        { type: Renderer2 }
    ]; };
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], SprkButtonDirective.prototype, "isSpinning", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], SprkButtonDirective.prototype, "spinningAriaLabel", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], SprkButtonDirective.prototype, "variant", void 0);
    __decorate([
        HostBinding('class.sprk-c-Button'),
        __metadata("design:type", Object)
    ], SprkButtonDirective.prototype, "true", void 0);
    __decorate([
        HostBinding('attr.data-id'),
        Input(),
        __metadata("design:type", String)
    ], SprkButtonDirective.prototype, "idString", void 0);
    __decorate([
        HostBinding('attr.data-analytics'),
        Input(),
        __metadata("design:type", String)
    ], SprkButtonDirective.prototype, "analyticsString", void 0);
    SprkButtonDirective = __decorate([
        Directive({
            selector: '[sprkButton]'
        }),
        __metadata("design:paramtypes", [ElementRef, Renderer2])
    ], SprkButtonDirective);
    return SprkButtonDirective;
}());

var SprkButtonModule = /** @class */ (function () {
    function SprkButtonModule() {
    }
    SprkButtonModule = __decorate([
        NgModule({
            imports: [CommonModule, RouterModule],
            declarations: [SprkButtonDirective],
            exports: [SprkButtonDirective]
        })
    ], SprkButtonModule);
    return SprkButtonModule;
}());

var SprkAwardComponent = /** @class */ (function () {
    function SprkAwardComponent() {
    }
    /**
     * @ignore
     */
    SprkAwardComponent.prototype.getClasses = function () {
        var classArray = [
            'sprk-o-Stack sprk-o-Stack--medium sprk-o-Stack__item sprk-o-Stack__item--center-column'
        ];
        // Handle the choice of item split
        // breakpoint by adding CSS class
        switch (this.splitAt) {
            case 'tiny':
                classArray.push('sprk-o-Stack--split@xs');
                break;
            case 'small':
                classArray.push('sprk-o-Stack--split@s');
                break;
            case 'medium':
                classArray.push('sprk-o-Stack--split@m');
                break;
            case 'large':
                classArray.push('sprk-o-Stack--split@l');
                break;
            case 'huge':
                classArray.push('sprk-o-Stack--split@xl');
                break;
            default:
                break;
        }
        return classArray.join(' ');
    };
    /**
     * @ignore
     */
    SprkAwardComponent.prototype.getImgContainerClasses = function () {
        var classArray = [
            'sprk-o-Stack__item'
        ];
        // Handle the choice of item split
        // breakpoint by adding CSS class
        switch (this.splitAt) {
            case 'tiny':
                classArray.push('sprk-o-Stack__item--flex@xs');
                break;
            case 'small':
                classArray.push('sprk-o-Stack__item--flex@s');
                break;
            case 'medium':
                classArray.push('sprk-o-Stack__item--flex@m');
                break;
            case 'large':
                classArray.push('sprk-o-Stack__item--flex@l');
                break;
            case 'huge':
                classArray.push('sprk-o-Stack__item--flex@xl');
                break;
            default:
                break;
        }
        return classArray.join(' ');
    };
    /**
     * @ignore
     */
    SprkAwardComponent.prototype.getClassesImgOne = function () {
        var classArray = [
            'sprk-o-Stack__item sprk-o-Stack__item--center-column'
        ];
        if (this.additionalClassesImgOne) {
            this.additionalClassesImgOne.split(' ').forEach(function (className) {
                classArray.push(className);
            });
        }
        return classArray.join(' ');
    };
    /**
     * @ignore
     */
    SprkAwardComponent.prototype.getClassesImgTwo = function () {
        var classArray = [
            'sprk-o-Stack__item sprk-o-Stack__item--center-column'
        ];
        if (this.additionalClassesImgTwo) {
            this.additionalClassesImgTwo.split(' ').forEach(function (className) {
                classArray.push(className);
            });
        }
        return classArray.join(' ');
    };
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], SprkAwardComponent.prototype, "splitAt", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], SprkAwardComponent.prototype, "imgOneAlt", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], SprkAwardComponent.prototype, "imgOneHref", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], SprkAwardComponent.prototype, "imgTwoHref", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], SprkAwardComponent.prototype, "imgTwoAlt", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], SprkAwardComponent.prototype, "imgOneSrc", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], SprkAwardComponent.prototype, "imgTwoSrc", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], SprkAwardComponent.prototype, "analyticsStringImgOne", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], SprkAwardComponent.prototype, "analyticsStringImgTwo", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], SprkAwardComponent.prototype, "analyticsStringDisclaimer", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], SprkAwardComponent.prototype, "additionalClasses", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], SprkAwardComponent.prototype, "additionalClassesImgOne", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], SprkAwardComponent.prototype, "additionalClassesImgTwo", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], SprkAwardComponent.prototype, "title", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], SprkAwardComponent.prototype, "disclaimerTitle", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], SprkAwardComponent.prototype, "disclaimerCopy", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], SprkAwardComponent.prototype, "disclaimer", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], SprkAwardComponent.prototype, "idString", void 0);
    SprkAwardComponent = __decorate([
        Component({
            selector: 'sprk-award',
            template: "\n    <sprk-stack\n      itemSpacing=\"medium\"\n      additionalClasses=\"{{ additionalClasses }}\"\n    >\n      <h2\n        sprkStackItem\n        [attr.data-id]=\"idString\"\n        class=\"\n          sprk-o-Stack__item\n          sprk-b-TypeDisplayFive\n          sprk-b-Measure sprk-b-Measure--narrow\n          sprk-u-TextAlign--center\n          sprk-o-Stack__item--center-column\n        \"\n      >\n        {{ title }}\n      </h2>\n\n      <div sprkStackItem [ngClass]=\"getClasses()\">\n        <div\n          [ngClass]=\"getImgContainerClasses()\"\n        >\n          <a\n            sprkLink\n            variant=\"unstyled\"\n            class=\"sprk-o-Stack\"\n            [attr.href]=\"imgOneHref\"\n            [analyticsString]=\"analyticsStringImgOne\"\n          >\n            <img\n              [ngClass]=\"getClassesImgOne()\"\n              alt=\"{{ imgOneAlt }}\"\n              src=\"{{ imgOneSrc }}\"\n            />\n          </a>\n        </div>\n        <div\n          [ngClass]=\"getImgContainerClasses()\"\n        >\n          <a\n            sprkLink\n            variant=\"unstyled\"\n            class=\"sprk-o-Stack\"\n            [attr.href]=\"imgTwoHref\"\n            [analyticsString]=\"analyticsStringImgTwo\"\n          >\n            <img\n              [ngClass]=\"getClassesImgTwo()\"\n              alt=\"{{ imgTwoAlt }}\"\n              src=\"{{ imgTwoSrc }}\"\n            />\n          </a>\n        </div>\n      </div>\n\n      <sprk-toggle\n        *ngIf=\"disclaimer !== 'false'\"\n        sprkStackItem\n        additionalClasses=\"sprk-o-Stack__item--start-column\"\n        toggleType=\"base\"\n        title=\"{{ disclaimerTitle }}\"\n        analyticsString=\"{{ analyticsStringDisclaimer }}\"\n      >\n        <p class=\"sprk-b-TypeBodyFour\">{{ disclaimerCopy }}</p>\n      </sprk-toggle>\n    </sprk-stack>\n  "
        })
    ], SprkAwardComponent);
    return SprkAwardComponent;
}());

var SprkAwardModule = /** @class */ (function () {
    function SprkAwardModule() {
    }
    SprkAwardModule = __decorate([
        NgModule({
            imports: [
                CommonModule,
                SprkStackModule,
                SprkStackItemModule,
                SprkLinkDirectiveModule,
                SprkToggleModule
            ],
            declarations: [SprkAwardComponent],
            exports: [SprkAwardComponent]
        })
    ], SprkAwardModule);
    return SprkAwardModule;
}());

var SprkCardComponent = /** @class */ (function () {
    function SprkCardComponent() {
        /**
         * The type of Card variant to render.
         * The available values are `base`, `teaser`, and `teaserHeading`.
         */
        this.cardType = 'base';
        /**
         * Determines which type of call to action is rendered.
         * The available values are `link` and `button`.
         */
        this.ctaType = 'link';
    }
    /**
     * @ignore
     */
    SprkCardComponent.prototype.getClassesCta = function () {
        var ctaClassArray = [];
        if (this.ctaType === 'button') {
            ctaClassArray.push('sprk-c-Button');
        }
        else {
            ctaClassArray.push('sprk-b-Link');
            if (this.ctaIcon) {
                ctaClassArray.push('sprk-b-Link--simple');
                ctaClassArray.push('sprk-b-Link--has-icon');
            }
        }
        if (this.additionalCtaClasses) {
            this.additionalCtaClasses.split(' ').forEach(function (className) {
                ctaClassArray.push(className);
            });
        }
        return ctaClassArray.join(' ');
    };
    /**
     * @ignore
     */
    SprkCardComponent.prototype.getClassesCard = function () {
        var classArray = ['sprk-c-Card', 'sprk-o-Stack'];
        if (this.additionalClasses) {
            this.additionalClasses.split(' ').forEach(function (className) {
                classArray.push(className);
            });
        }
        return classArray.join(' ');
    };
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], SprkCardComponent.prototype, "cardType", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], SprkCardComponent.prototype, "body", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], SprkCardComponent.prototype, "media", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], SprkCardComponent.prototype, "additionalClassesIcon", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], SprkCardComponent.prototype, "title", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], SprkCardComponent.prototype, "imgSrc", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], SprkCardComponent.prototype, "imgAlt", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], SprkCardComponent.prototype, "iconType", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], SprkCardComponent.prototype, "iconHref", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], SprkCardComponent.prototype, "imgHref", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], SprkCardComponent.prototype, "ctaIcon", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], SprkCardComponent.prototype, "ctaType", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], SprkCardComponent.prototype, "ctaText", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], SprkCardComponent.prototype, "ctaAnalytics", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], SprkCardComponent.prototype, "imgLinkAnalytics", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], SprkCardComponent.prototype, "iconLinkAnalytics", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], SprkCardComponent.prototype, "ctaHref", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], SprkCardComponent.prototype, "additionalClasses", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], SprkCardComponent.prototype, "additionalCtaClasses", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], SprkCardComponent.prototype, "idString", void 0);
    SprkCardComponent = __decorate([
        Component({
            selector: 'sprk-card',
            template: "\n    <div\n      [ngClass]=\"getClassesCard()\"\n      *ngIf=\"cardType === 'teaser'\"\n      [attr.data-id]=\"idString\"\n    >\n      <a\n        sprkLink\n        variant=\"unstyled\"\n        *ngIf=\"media === 'img'\"\n        [href]=\"imgHref\"\n        class=\"sprk-o-Stack__item\"\n        [analyticsString]=\"imgLinkAnalytics\"\n      >\n        <img\n          class=\"sprk-c-Card__media\"\n          [attr.alt]=\"imgAlt\"\n          [attr.src]=\"imgSrc\"\n        />\n      </a>\n\n      <div\n        [ngClass]=\"{\n          'sprk-o-Stack__item': true,\n          'sprk-c-Card__content': true,\n          'sprk-o-Stack': true,\n          'sprk-o-Stack--medium': true,\n          'sprk-u-TextAlign--center': media === 'icon'\n        }\"\n      >\n        <a\n          sprkLink\n          variant=\"unstyled\"\n          *ngIf=\"media === 'icon'\"\n          [attr.href]=\"iconHref\"\n          class=\"sprk-o-Stack__item sprk-u-AbsoluteCenter\"\n          [analyticsString]=\"iconLinkAnalytics\"\n        >\n          <sprk-icon\n            [iconType]=\"iconType\"\n            [additionalClasses]=\"additionalClassesIcon\"\n          ></sprk-icon>\n        </a>\n\n        <h3 class=\"sprk-b-TypeDisplayFive sprk-o-Stack__item\">{{ title }}</h3>\n\n        <p class=\"sprk-b-TypeBodyTwo sprk-o-Stack__item\">{{ body }}</p>\n\n        <div class=\"sprk-o-Stack__item\">\n          <a\n            sprkLink\n            variant=\"unstyled\"\n            [attr.href]=\"ctaHref\"\n            [ngClass]=\"getClassesCta()\"\n            [analyticsString]=\"ctaAnalytics\"\n          >\n            {{ ctaText }}\n            <sprk-icon\n              *ngIf=\"ctaIcon && (ctaType === 'link')\"\n              [iconType]=\"ctaIcon\"\n            ></sprk-icon>\n          </a>\n        </div>\n      </div>\n    </div>\n\n    <div\n      [ngClass]=\"getClassesCard()\"\n      *ngIf=\"cardType === 'base'\"\n      [attr.data-id]=\"idString\"\n    >\n      <ng-content></ng-content>\n    </div>\n\n    <div\n      [ngClass]=\"getClassesCard()\"\n      *ngIf=\"cardType === 'teaserHeading'\"\n      [attr.data-id]=\"idString\"\n    >\n      <h3\n        class=\"sprk-o-Stack__item sprk-c-Card__content sprk-b-TypeDisplayFive\"\n      >\n        {{ title }}\n      </h3>\n\n      <div\n        class=\"sprk-o-Stack__item sprk-c-Card__content sprk-o-Stack sprk-o-Stack--medium\"\n      >\n        <a\n          sprkLink\n          variant=\"unstyled\"\n          *ngIf=\"media === 'img'\"\n          [attr.href]=\"imgHref\"\n          class=\"sprk-o-Stack__item\"\n          [analyticsString]=\"imgLinkAnalytics\"\n        >\n          <img [attr.alt]=\"imgAlt\" [attr.src]=\"imgSrc\" />\n        </a>\n\n        <a\n          sprkLink\n          *ngIf=\"media === 'icon'\"\n          [attr.href]=\"iconHref\"\n          variant=\"unstyled\"\n          class=\"sprk-o-Stack__item sprk-o-Stack__item--center\"\n          [analyticsString]=\"iconLinkAnalytics\"\n        >\n          <sprk-icon\n            [iconType]=\"iconType\"\n            [additionalClasses]=\"additionalClassesIcon\"\n          ></sprk-icon>\n        </a>\n\n        <p class=\"sprk-b-TypeBodyTwo sprk-o-Stack__item\">{{ body }}</p>\n\n        <div class=\"sprk-o-Stack__item\">\n          <a\n            sprkLink\n            variant=\"unstyled\"\n            [attr.href]=\"ctaHref\"\n            [ngClass]=\"getClassesCta()\"\n            [analyticsString]=\"ctaAnalytics\"\n          >\n            {{ ctaText }}\n            <sprk-icon\n              *ngIf=\"ctaIcon && (ctaType === 'link')\"\n              [iconType]=\"ctaIcon\"\n            ></sprk-icon>\n          </a>\n        </div>\n      </div>\n    </div>\n  "
        })
    ], SprkCardComponent);
    return SprkCardComponent;
}());

var SprkCardModule = /** @class */ (function () {
    function SprkCardModule() {
    }
    SprkCardModule = __decorate([
        NgModule({
            imports: [CommonModule, SprkIconModule, SprkLinkDirectiveModule],
            declarations: [SprkCardComponent],
            exports: [SprkCardComponent]
        })
    ], SprkCardModule);
    return SprkCardModule;
}());

var SprkDictionaryComponent = /** @class */ (function () {
    function SprkDictionaryComponent() {
        /**
         * The collection of key-value pairs to be rendered
         * into the component.
         */
        this.data = {};
        /**
         * Determines the variant of the dictionary component to render.
         * The only available option is `striped`.
         * Supplying no value will cause the base variant to be used.
         */
        this.dictionaryType = 'base';
        /**
         * @ignore
         * Used to grab all the keys from
         * objects.
         */
        this.objectKeys = Object.keys;
    }
    /**
     * @ignore
     */
    SprkDictionaryComponent.prototype.getClasses = function () {
        var classArray = ['sprk-c-Dictionary'];
        if (this.dictionaryType === 'striped') {
            classArray.push('sprk-c-Dictionary--striped');
        }
        if (this.additionalClasses) {
            this.additionalClasses.split(' ').forEach(function (className) {
                classArray.push(className);
            });
        }
        return classArray.join(' ');
    };
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], SprkDictionaryComponent.prototype, "data", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], SprkDictionaryComponent.prototype, "dictionaryType", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], SprkDictionaryComponent.prototype, "additionalClasses", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], SprkDictionaryComponent.prototype, "idString", void 0);
    SprkDictionaryComponent = __decorate([
        Component({
            selector: 'sprk-dictionary',
            template: "\n    <div [ngClass]=\"getClasses()\" [attr.data-id]=\"idString\">\n      <dl class=\"sprk-c-Dictionary__keyvaluepairs\">\n        <div\n          *ngFor=\"let key of objectKeys(data)\"\n          class=\"sprk-c-Dictionary__keyvaluepair\"\n        >\n          <dt\n            class=\"sprk-c-Dictionary__key sprk-b-Label sprk-b-Label--no-input\"\n          >\n            {{ key }}\n          </dt>\n          <dd class=\"sprk-c-Dictionary__value\">{{ data[key] }}</dd>\n        </div>\n      </dl>\n    </div>\n  "
        })
    ], SprkDictionaryComponent);
    return SprkDictionaryComponent;
}());

var SprkDictionaryModule = /** @class */ (function () {
    function SprkDictionaryModule() {
    }
    SprkDictionaryModule = __decorate([
        NgModule({
            imports: [CommonModule],
            declarations: [SprkDictionaryComponent],
            exports: [SprkDictionaryComponent]
        })
    ], SprkDictionaryModule);
    return SprkDictionaryModule;
}());

var SprkHighlightBoardComponent = /** @class */ (function () {
    function SprkHighlightBoardComponent() {
        /**
         * @ignore
         */
        this.centerBtns = '';
    }
    SprkHighlightBoardComponent.prototype.ngOnInit = function () {
        if (!this.ctaText && this.ctaText2) {
            console.warn("\n        Spark Design System Warning - <sprk-highlight-board> Component:\n        A secondary call-to-action (CTA)\n        should not exist without a primary CTA.\n        If there is only one CTA, it must be set on\n        ctaText and ctaHref.\n      ");
        }
    };
    /**
     * @ignore
     */
    SprkHighlightBoardComponent.prototype.getClasses = function () {
        var classArray = ['sprk-c-HighlightBoard'];
        switch (this.type) {
            case 'noImage':
                this.centerBtns = 'sprk-o-Stack--center-row';
                break;
            case 'stacked':
                this.centerBtns = 'sprk-o-Stack--center-row';
                classArray.push('sprk-c-HighlightBoard--has-image sprk-c-HighlightBoard--stacked');
                break;
            default:
                classArray.push('sprk-c-HighlightBoard--has-image');
                break;
        }
        if (this.additionalClasses) {
            this.additionalClasses.split(' ').forEach(function (className) {
                classArray.push(className);
            });
        }
        return classArray.join(' ');
    };
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], SprkHighlightBoardComponent.prototype, "heading", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], SprkHighlightBoardComponent.prototype, "imgSrc", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], SprkHighlightBoardComponent.prototype, "imgAlt", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], SprkHighlightBoardComponent.prototype, "ctaText", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], SprkHighlightBoardComponent.prototype, "ctaHref", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], SprkHighlightBoardComponent.prototype, "ctaText2", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], SprkHighlightBoardComponent.prototype, "ctaHref2", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], SprkHighlightBoardComponent.prototype, "analyticsStringCta", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], SprkHighlightBoardComponent.prototype, "analyticsStringCta2", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], SprkHighlightBoardComponent.prototype, "additionalClasses", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], SprkHighlightBoardComponent.prototype, "type", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], SprkHighlightBoardComponent.prototype, "idString", void 0);
    SprkHighlightBoardComponent = __decorate([
        Component({
            selector: 'sprk-highlight-board',
            template: "\n    <div [ngClass]=\"getClasses()\" [attr.data-id]=\"idString\">\n      <img\n        *ngIf=\"type !== 'noImage'\"\n        class=\"sprk-c-HighlightBoard__image\"\n        src=\"{{ imgSrc }}\"\n        alt=\"{{ imgAlt }}\"\n      />\n\n      <sprk-stack\n        sprkStackItem\n        itemSpacing=\"large\"\n        additionalClasses=\"sprk-c-HighlightBoard__content\"\n      >\n        <h1\n          sprkStackItem\n          [ngClass]=\"{\n            'sprk-b-TypeDisplayTwo': type === 'noImage',\n            'sprk-b-TypeDisplayOne': type !== 'noImage',\n            'sprk-c-HighlightBoard__heading': true\n          }\"\n        >\n          {{ heading }}\n        </h1>\n\n        <sprk-stack\n          sprkStackItem\n          *ngIf=\"ctaText\"\n          itemSpacing=\"medium\"\n          splitAt=\"tiny\"\n          additionalClasses=\"sprk-o-Stack--center-column {{ centerBtns }}\"\n        >\n          <div sprkStackItem class=\"sprk-c-HighlightBoard__cta\">\n            <a\n              sprkLink\n              variant=\"unstyled\"\n              [attr.href]=\"ctaHref\"\n              class=\"sprk-c-Button sprk-c-Button--primary sprk-c-Button--full@sm\"\n              [analyticsString]=\"analyticsStringCta\"\n            >\n              {{ ctaText }}\n            </a>\n          </div>\n\n          <div\n            sprkStackItem\n            *ngIf=\"ctaText2\"\n            class=\"sprk-c-HighlightBoard__cta\"\n          >\n            <a\n              sprkLink\n              variant=\"unstyled\"\n              [attr.href]=\"ctaHref2\"\n              class=\"sprk-c-Button sprk-c-Button--secondary sprk-c-Button--full@sm\"\n              [analyticsString]=\"analyticsStringCta2\"\n            >\n              {{ ctaText2 }}\n            </a>\n          </div>\n        </sprk-stack>\n      </sprk-stack>\n    </div>\n  "
        })
    ], SprkHighlightBoardComponent);
    return SprkHighlightBoardComponent;
}());

var SprkHighlightBoardModule = /** @class */ (function () {
    function SprkHighlightBoardModule() {
    }
    SprkHighlightBoardModule = __decorate([
        NgModule({
            imports: [
                CommonModule,
                SprkStackModule,
                SprkStackItemModule,
                SprkLinkDirectiveModule
            ],
            declarations: [SprkHighlightBoardComponent],
            exports: [SprkHighlightBoardComponent]
        })
    ], SprkHighlightBoardModule);
    return SprkHighlightBoardModule;
}());

var SprkBoxDirective = /** @class */ (function () {
    /**
     * @ignore
     */
    function SprkBoxDirective() {
    }
    Object.defineProperty(SprkBoxDirective.prototype, "flush", {
        get: function () {
            return this.spacing === 'flush';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SprkBoxDirective.prototype, "tiny", {
        get: function () {
            return this.spacing === 'tiny';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SprkBoxDirective.prototype, "small", {
        get: function () {
            return this.spacing === 'small';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SprkBoxDirective.prototype, "medium", {
        get: function () {
            return this.spacing === 'medium';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SprkBoxDirective.prototype, "large", {
        get: function () {
            return this.spacing === 'large';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SprkBoxDirective.prototype, "huge", {
        get: function () {
            return this.spacing === 'huge';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SprkBoxDirective.prototype, "insetShortTiny", {
        get: function () {
            return this.spacing === 'insetShortTiny';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SprkBoxDirective.prototype, "insetShortSmall", {
        get: function () {
            return this.spacing === 'insetShortSmall';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SprkBoxDirective.prototype, "insetShortMedium", {
        get: function () {
            return this.spacing === 'insetShortMedium';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SprkBoxDirective.prototype, "insetShortLarge", {
        get: function () {
            return this.spacing === 'insetShortLarge';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SprkBoxDirective.prototype, "insetShortHuge", {
        get: function () {
            return this.spacing === 'insetShortHuge';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SprkBoxDirective.prototype, "insetTallTiny", {
        get: function () {
            return this.spacing === 'insetTallTiny';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SprkBoxDirective.prototype, "insetTallSmall", {
        get: function () {
            return this.spacing === 'insetTallSmall';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SprkBoxDirective.prototype, "insetTallMedium", {
        get: function () {
            return this.spacing === 'insetTallMedium';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SprkBoxDirective.prototype, "insetTallLarge", {
        get: function () {
            return this.spacing === 'insetTallLarge';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SprkBoxDirective.prototype, "insetTallHuge", {
        get: function () {
            return this.spacing === 'insetTallHuge';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SprkBoxDirective.prototype, "miscA", {
        get: function () {
            return this.spacing === 'miscA';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SprkBoxDirective.prototype, "miscB", {
        get: function () {
            return this.spacing === 'miscB';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SprkBoxDirective.prototype, "miscC", {
        get: function () {
            return this.spacing === 'miscC';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SprkBoxDirective.prototype, "miscD", {
        get: function () {
            return this.spacing === 'miscD';
        },
        enumerable: true,
        configurable: true
    });
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], SprkBoxDirective.prototype, "spacing", void 0);
    __decorate([
        HostBinding('class.sprk-o-Box'),
        __metadata("design:type", Object)
    ], SprkBoxDirective.prototype, "true", void 0);
    __decorate([
        HostBinding('class.sprk-o-Box--flush'),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [])
    ], SprkBoxDirective.prototype, "flush", null);
    __decorate([
        HostBinding('class.sprk-o-Box--tiny'),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [])
    ], SprkBoxDirective.prototype, "tiny", null);
    __decorate([
        HostBinding('class.sprk-o-Box--small'),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [])
    ], SprkBoxDirective.prototype, "small", null);
    __decorate([
        HostBinding('class.sprk-o-Box--medium'),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [])
    ], SprkBoxDirective.prototype, "medium", null);
    __decorate([
        HostBinding('class.sprk-o-Box--large'),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [])
    ], SprkBoxDirective.prototype, "large", null);
    __decorate([
        HostBinding('class.sprk-o-Box--huge'),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [])
    ], SprkBoxDirective.prototype, "huge", null);
    __decorate([
        HostBinding('class.sprk-o-Box--inset-short-tiny'),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [])
    ], SprkBoxDirective.prototype, "insetShortTiny", null);
    __decorate([
        HostBinding('class.sprk-o-Box--inset-short-small'),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [])
    ], SprkBoxDirective.prototype, "insetShortSmall", null);
    __decorate([
        HostBinding('class.sprk-o-Box--inset-short-medium'),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [])
    ], SprkBoxDirective.prototype, "insetShortMedium", null);
    __decorate([
        HostBinding('class.sprk-o-Box--inset-short-large'),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [])
    ], SprkBoxDirective.prototype, "insetShortLarge", null);
    __decorate([
        HostBinding('class.sprk-o-Box--inset-short-huge'),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [])
    ], SprkBoxDirective.prototype, "insetShortHuge", null);
    __decorate([
        HostBinding('class.sprk-o-Box--inset-tall-tiny'),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [])
    ], SprkBoxDirective.prototype, "insetTallTiny", null);
    __decorate([
        HostBinding('class.sprk-o-Box--inset-tall-small'),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [])
    ], SprkBoxDirective.prototype, "insetTallSmall", null);
    __decorate([
        HostBinding('class.sprk-o-Box--inset-tall-medium'),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [])
    ], SprkBoxDirective.prototype, "insetTallMedium", null);
    __decorate([
        HostBinding('class.sprk-o-Box--inset-tall-large'),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [])
    ], SprkBoxDirective.prototype, "insetTallLarge", null);
    __decorate([
        HostBinding('class.sprk-o-Box--inset-tall-huge'),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [])
    ], SprkBoxDirective.prototype, "insetTallHuge", null);
    __decorate([
        HostBinding('class.sprk-o-Box--misc-a'),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [])
    ], SprkBoxDirective.prototype, "miscA", null);
    __decorate([
        HostBinding('class.sprk-o-Box--misc-b'),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [])
    ], SprkBoxDirective.prototype, "miscB", null);
    __decorate([
        HostBinding('class.sprk-o-Box--misc-c'),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [])
    ], SprkBoxDirective.prototype, "miscC", null);
    __decorate([
        HostBinding('class.sprk-o-Box--misc-d'),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [])
    ], SprkBoxDirective.prototype, "miscD", null);
    SprkBoxDirective = __decorate([
        Directive({
            selector: '[sprkBox]'
        }),
        __metadata("design:paramtypes", [])
    ], SprkBoxDirective);
    return SprkBoxDirective;
}());

var SprkBoxModule = /** @class */ (function () {
    function SprkBoxModule() {
    }
    SprkBoxModule = __decorate([
        NgModule({
            imports: [CommonModule],
            declarations: [SprkBoxDirective],
            exports: [SprkBoxDirective]
        })
    ], SprkBoxModule);
    return SprkBoxModule;
}());

var SprkTextDirective = /** @class */ (function () {
    /**
     * @ignore
     */
    function SprkTextDirective() {
    }
    Object.defineProperty(SprkTextDirective.prototype, "textOne", {
        get: function () {
            return this.variant === 'bodyOne';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SprkTextDirective.prototype, "textTwo", {
        get: function () {
            return this.variant === 'bodyTwo';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SprkTextDirective.prototype, "textThree", {
        get: function () {
            return this.variant === 'bodyThree';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SprkTextDirective.prototype, "textFour", {
        get: function () {
            return this.variant === 'bodyFour';
        },
        enumerable: true,
        configurable: true
    });
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], SprkTextDirective.prototype, "variant", void 0);
    __decorate([
        HostBinding('class.sprk-b-TypeBodyOne'),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [])
    ], SprkTextDirective.prototype, "textOne", null);
    __decorate([
        HostBinding('class.sprk-b-TypeBodyTwo'),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [])
    ], SprkTextDirective.prototype, "textTwo", null);
    __decorate([
        HostBinding('class.sprk-b-TypeBodyThree'),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [])
    ], SprkTextDirective.prototype, "textThree", null);
    __decorate([
        HostBinding('class.sprk-b-TypeBodyFour'),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [])
    ], SprkTextDirective.prototype, "textFour", null);
    SprkTextDirective = __decorate([
        Directive({
            selector: '[sprkText]'
        }),
        __metadata("design:paramtypes", [])
    ], SprkTextDirective);
    return SprkTextDirective;
}());

var SprkTextModule = /** @class */ (function () {
    function SprkTextModule() {
    }
    SprkTextModule = __decorate([
        NgModule({
            declarations: [SprkTextDirective],
            exports: [SprkTextDirective]
        })
    ], SprkTextModule);
    return SprkTextModule;
}());

var SprkHeadingDirective = /** @class */ (function () {
    /**
     * @ignore
     */
    function SprkHeadingDirective() {
        this.isPageTitle = false;
    }
    Object.defineProperty(SprkHeadingDirective.prototype, "headingOne", {
        get: function () {
            return this.variant === 'displayOne';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SprkHeadingDirective.prototype, "headingTwo", {
        get: function () {
            return this.variant === 'displayTwo';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SprkHeadingDirective.prototype, "headingThree", {
        get: function () {
            return this.variant === 'displayThree';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SprkHeadingDirective.prototype, "headingFour", {
        get: function () {
            return this.variant === 'displayFour';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SprkHeadingDirective.prototype, "headingFive", {
        get: function () {
            return this.variant === 'displayFive';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SprkHeadingDirective.prototype, "headingSix", {
        get: function () {
            return this.variant === 'displaySix';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SprkHeadingDirective.prototype, "headingSeven", {
        get: function () {
            return this.variant === 'displaySeven';
        },
        enumerable: true,
        configurable: true
    });
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], SprkHeadingDirective.prototype, "variant", void 0);
    __decorate([
        HostBinding('class.sprk-b-TypeDisplayOne'),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [])
    ], SprkHeadingDirective.prototype, "headingOne", null);
    __decorate([
        HostBinding('class.sprk-b-TypeDisplayTwo'),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [])
    ], SprkHeadingDirective.prototype, "headingTwo", null);
    __decorate([
        HostBinding('class.sprk-b-TypeDisplayThree'),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [])
    ], SprkHeadingDirective.prototype, "headingThree", null);
    __decorate([
        HostBinding('class.sprk-b-TypeDisplayFour'),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [])
    ], SprkHeadingDirective.prototype, "headingFour", null);
    __decorate([
        HostBinding('class.sprk-b-TypeDisplayFive'),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [])
    ], SprkHeadingDirective.prototype, "headingFive", null);
    __decorate([
        HostBinding('class.sprk-b-TypeDisplaySix'),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [])
    ], SprkHeadingDirective.prototype, "headingSix", null);
    __decorate([
        HostBinding('class.sprk-b-TypeDisplaySeven'),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [])
    ], SprkHeadingDirective.prototype, "headingSeven", null);
    __decorate([
        HostBinding('class.sprk-b-PageTitle')
        /**
         * Value will be used to select
         * the heading style.
         */
        ,
        Input(),
        __metadata("design:type", Object)
    ], SprkHeadingDirective.prototype, "isPageTitle", void 0);
    SprkHeadingDirective = __decorate([
        Directive({
            selector: '[sprkHeading]'
        }),
        __metadata("design:paramtypes", [])
    ], SprkHeadingDirective);
    return SprkHeadingDirective;
}());

var SprkHeadingModule = /** @class */ (function () {
    function SprkHeadingModule() {
    }
    SprkHeadingModule = __decorate([
        NgModule({
            declarations: [SprkHeadingDirective],
            exports: [SprkHeadingDirective]
        })
    ], SprkHeadingModule);
    return SprkHeadingModule;
}());

var SprkFlagComponent = /** @class */ (function () {
    function SprkFlagComponent() {
        /**
         * The Flag component will use this to decide where
         * the media-slot is rendered in relation to the
         * body-slot. The default is the media-slot is on
         * the left of the body-slot. isReversed="true" places the
         * media-slot on the right of the body-slot.
         */
        this.isReversed = false;
        /**
         * The Flag component will use this to stack
         * the element at the `$sprk-flag-stacked-breakpoint`
         */
        this.isStacked = false;
        /**
         * Determines how much space between the
         * media and the body.
         */
        this.spacing = 'medium';
        /**
         * Determines the vertical alignment of content.
         */
        this.verticalAlignment = 'top';
    }
    /**
     * @ignore
     */
    SprkFlagComponent.prototype.getClasses = function () {
        var classArray = ['sprk-o-Flag'];
        if (this.spacing !== 'medium') {
            var spacingClasses = {
                flush: 'sprk-o-Flag--flush',
                tiny: 'sprk-o-Flag--tiny',
                small: 'sprk-o-Flag--small',
                large: 'sprk-o-Flag--large',
                huge: 'sprk-o-Flag--huge',
            };
            classArray.push(spacingClasses[this.spacing]);
        }
        if (this.verticalAlignment !== 'top') {
            var verticalAlignmentClasses = {
                middle: 'sprk-o-Flag--middle',
                bottom: 'sprk-o-Flag--bottom',
            };
            classArray.push(verticalAlignmentClasses[this.verticalAlignment]);
        }
        if (this.isReversed) {
            classArray.push('sprk-o-Flag--rev');
        }
        if (this.isStacked) {
            classArray.push('sprk-o-Flag--stacked');
        }
        if (this.additionalClasses) {
            this.additionalClasses.split(' ').forEach(function (className) {
                classArray.push(className);
            });
        }
        return classArray.join(' ');
    };
    /**
     * @ignore
     */
    SprkFlagComponent.prototype.getMediaClasses = function () {
        var mediaClassArray = ['sprk-o-Flag__figure'];
        if (this.additionalMediaClasses) {
            this.additionalMediaClasses.split(' ').forEach(function (className) {
                mediaClassArray.push(className);
            });
        }
        return mediaClassArray.join(' ');
    };
    /**
     * @ignore
     */
    SprkFlagComponent.prototype.getBodyClasses = function () {
        var bodyClassArray = ['sprk-o-Flag__body'];
        if (this.additionalBodyClasses) {
            this.additionalBodyClasses.split(' ').forEach(function (className) {
                bodyClassArray.push(className);
            });
        }
        return bodyClassArray.join(' ');
    };
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], SprkFlagComponent.prototype, "additionalClasses", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], SprkFlagComponent.prototype, "additionalMediaClasses", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], SprkFlagComponent.prototype, "additionalBodyClasses", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], SprkFlagComponent.prototype, "idString", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], SprkFlagComponent.prototype, "isReversed", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], SprkFlagComponent.prototype, "isStacked", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], SprkFlagComponent.prototype, "spacing", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], SprkFlagComponent.prototype, "verticalAlignment", void 0);
    SprkFlagComponent = __decorate([
        Component({
            selector: 'sprk-flag',
            template: "\n    <div\n      [ngClass]=\"getClasses()\"\n      [attr.data-id]=\"idString\"\n    >\n      <div [ngClass]=\"getMediaClasses()\">\n        <ng-content select=\"[media-slot]\"></ng-content>\n      </div>\n      <div [ngClass]=\"getBodyClasses()\">\n        <ng-content select=\"[body-slot]\"></ng-content>\n      </div>\n    </div>\n  "
        })
    ], SprkFlagComponent);
    return SprkFlagComponent;
}());

var SprkFlagModule = /** @class */ (function () {
    function SprkFlagModule() {
    }
    SprkFlagModule = __decorate([
        NgModule({
            imports: [CommonModule],
            declarations: [SprkFlagComponent],
            exports: [SprkFlagComponent]
        })
    ], SprkFlagModule);
    return SprkFlagModule;
}());

var SprkCenteredColumnDirective = /** @class */ (function () {
    function SprkCenteredColumnDirective() {
    }
    __decorate([
        HostBinding('class.sprk-o-CenteredColumn'),
        __metadata("design:type", Object)
    ], SprkCenteredColumnDirective.prototype, "true", void 0);
    __decorate([
        HostBinding('attr.data-id'),
        Input(),
        __metadata("design:type", String)
    ], SprkCenteredColumnDirective.prototype, "idString", void 0);
    SprkCenteredColumnDirective = __decorate([
        Directive({
            selector: '[sprkCenteredColumn]'
        })
    ], SprkCenteredColumnDirective);
    return SprkCenteredColumnDirective;
}());

var SprkCenteredColumnModule = /** @class */ (function () {
    function SprkCenteredColumnModule() {
    }
    SprkCenteredColumnModule = __decorate([
        NgModule({
            imports: [CommonModule],
            declarations: [SprkCenteredColumnDirective],
            exports: [SprkCenteredColumnDirective]
        })
    ], SprkCenteredColumnModule);
    return SprkCenteredColumnModule;
}());

if (typeof window !== 'undefined') {
    window['sprk'] = { version: { angular: environment.version } } || {};
}
var SparkAngularModule = /** @class */ (function () {
    function SparkAngularModule() {
    }
    SparkAngularModule = __decorate([
        NgModule({
            exports: [
                SprkAlertModule,
                SprkAccordionModule,
                SprkAccordionItemModule,
                SprkAwardModule,
                SprkButtonModule,
                SprkCardModule,
                SprkDictionaryModule,
                SprkDividerModule,
                SprkDropdownModule,
                SprkLinkModule,
                SprkHighlightBoardModule,
                SprkModalModule,
                SprkOrderedListModule,
                SprkUnorderedListModule,
                SprkListItemModule,
                SparkInputContainerModule,
                SprkHugeInputContainerModule,
                SprkTextareaContainerModule,
                SprkIconInputContainerModule,
                SprkSelectionContainerModule,
                SprkSelectionItemContainerModule,
                SprkMastheadModule,
                SprkInputModule,
                SprkSelectionInputModule,
                SprkHelperTextModule,
                SprkLabelModule,
                SprkSelectionLabelModule,
                SprkFieldErrorModule,
                SprkFormatterPhoneNumberModule,
                SprkFormatterDateModule,
                SprkFormatterMonetaryModule,
                SprkFormatterSsnModule,
                SprkDatepickerModule,
                SprkPromoModule,
                SprkTableModule,
                SprkTableHeadModule,
                SprkTableGroupedColumnModule,
                SprkTableEmptyHeadingModule,
                SprkTableRowHeadingModule,
                SprkTabbedNavigationTabModule,
                SprkTabbedNavigationPanelModule,
                SprkPaginationModule,
                SprkStackModule,
                SprkStackItemModule,
                SprkToggleModule,
                SprkIconModule,
                SprkFooterModule,
                SprkTabbedNavigationModule,
                SprkBoxModule,
                SprkTextModule,
                SprkHeadingModule,
                SprkLinkDirectiveModule,
                SprkFlagModule,
                SprkCenteredColumnModule,
            ]
        })
    ], SparkAngularModule);
    return SparkAngularModule;
}());

/*
 * Public API Surface of spark-angular
 */

/**
 * Generated bundle index. Do not edit.
 */

export { SparkAngularModule, SparkInputContainerComponent, SparkInputContainerModule, SprkAccordionComponent, SprkAccordionItemComponent, SprkAccordionItemModule, SprkAccordionModule, SprkAlertComponent, SprkAlertModule, SprkAwardComponent, SprkAwardModule, SprkBoxDirective, SprkBoxModule, SprkButtonDirective, SprkButtonModule, SprkCardComponent, SprkCardModule, SprkCenteredColumnDirective, SprkCenteredColumnModule, SprkDatepickerDirective, SprkDatepickerModule, SprkDictionaryComponent, SprkDictionaryModule, SprkDividerComponent, SprkDividerModule, SprkDropdownComponent, SprkDropdownModule, SprkFieldErrorDirective, SprkFieldErrorModule, SprkFlagComponent, SprkFlagModule, SprkFooterComponent, SprkFooterModule, SprkFormatterDateDirective, SprkFormatterDateModule, SprkFormatterMonetaryDirective, SprkFormatterMonetaryModule, SprkFormatterPhoneNumberDirective, SprkFormatterPhoneNumberModule, SprkFormatterSsnDirective, SprkFormatterSsnModule, SprkHeadingDirective, SprkHeadingModule, SprkHelperTextDirective, SprkHelperTextModule, SprkHighlightBoardComponent, SprkHighlightBoardModule, SprkHugeInputContainerComponent, SprkHugeInputContainerModule, SprkIconComponent, SprkIconInputContainerComponent, SprkIconInputContainerModule, SprkIconModule, SprkInputDirective, SprkInputModule, SprkLabelDirective, SprkLabelModule, SprkLinkComponent, SprkLinkDirective, SprkLinkDirectiveModule, SprkLinkModule, SprkListItemComponent, SprkListItemModule, SprkMastheadAccordionComponent, SprkMastheadAccordionItemComponent, SprkMastheadAccordionItemModule, SprkMastheadAccordionModule, SprkMastheadComponent, SprkMastheadModule, SprkModalComponent, SprkModalModule, SprkOrderedListComponent, SprkOrderedListModule, SprkPaginationComponent, SprkPaginationModule, SprkPromoComponent, SprkPromoModule, SprkSelectionContainerComponent, SprkSelectionContainerModule, SprkSelectionInputDirective, SprkSelectionInputModule, SprkSelectionItemContainerComponent, SprkSelectionItemContainerModule, SprkSelectionLabelDirective, SprkSelectionLabelModule, SprkStackComponent, SprkStackItemDirective, SprkStackItemModule, SprkStackModule, SprkTabbedNavigationComponent, SprkTabbedNavigationModule, SprkTabbedNavigationPanelDirective, SprkTabbedNavigationPanelModule, SprkTabbedNavigationTabDirective, SprkTabbedNavigationTabModule, SprkTableComponent, SprkTableEmptyHeadingDirective, SprkTableEmptyHeadingModule, SprkTableGroupedColumnDirective, SprkTableGroupedColumnModule, SprkTableHeadDirective, SprkTableHeadModule, SprkTableModule, SprkTableRowHeadingDirective, SprkTableRowHeadingModule, SprkTextDirective, SprkTextModule, SprkTextareaContainerComponent, SprkTextareaContainerModule, SprkToggleComponent, SprkToggleModule, SprkUnorderedListComponent, SprkUnorderedListModule, toggleAnimations, SprkAlertModule as ɵa, SprkIconModule as ɵb, SprkDropdownModule as ɵba, SprkDropdownComponent as ɵbb, SprkHighlightBoardModule as ɵbc, SprkHighlightBoardComponent as ɵbd, SprkModalModule as ɵbe, SprkModalComponent as ɵbf, SprkOrderedListModule as ɵbg, SprkOrderedListComponent as ɵbh, SprkUnorderedListModule as ɵbi, SprkUnorderedListComponent as ɵbj, SprkListItemModule as ɵbk, SprkListItemComponent as ɵbl, SparkInputContainerModule as ɵbm, SparkInputContainerComponent as ɵbn, SprkLabelDirective as ɵbo, SprkInputDirective as ɵbp, SprkFieldErrorDirective as ɵbq, SprkTextareaContainerModule as ɵbr, SprkTextareaContainerComponent as ɵbs, SprkIconInputContainerModule as ɵbt, SprkIconInputContainerComponent as ɵbu, SprkSelectionContainerModule as ɵbv, SprkSelectionContainerComponent as ɵbw, SprkSelectionItemContainerComponent as ɵbx, SprkSelectionLabelDirective as ɵby, SprkSelectionInputDirective as ɵbz, SprkIconComponent as ɵc, SprkSelectionItemContainerModule as ɵca, SprkMastheadModule as ɵcb, SprkMastheadAccordionModule as ɵcc, SprkMastheadAccordionComponent as ɵcd, SprkMastheadAccordionItemModule as ɵce, SprkMastheadAccordionItemComponent as ɵcf, SprkMastheadComponent as ɵcg, SprkInputModule as ɵch, SprkSelectionInputModule as ɵci, SprkHelperTextModule as ɵcj, SprkHelperTextDirective as ɵck, SprkLabelModule as ɵcl, SprkSelectionLabelModule as ɵcm, SprkFieldErrorModule as ɵcn, SprkFormatterPhoneNumberModule as ɵco, SprkFormatterPhoneNumberDirective as ɵcp, SprkFormatterDateModule as ɵcq, SprkFormatterDateDirective as ɵcr, SprkFormatterMonetaryModule as ɵcs, SprkFormatterMonetaryDirective as ɵct, SprkFormatterSsnModule as ɵcu, SprkFormatterSsnDirective as ɵcv, SprkDatepickerModule as ɵcw, SprkDatepickerDirective as ɵcx, SprkPromoModule as ɵcy, SprkPromoComponent as ɵcz, SprkAlertComponent as ɵd, SprkTableModule as ɵda, SprkTableComponent as ɵdb, SprkTableHeadModule as ɵdc, SprkTableHeadDirective as ɵdd, SprkTableGroupedColumnModule as ɵde, SprkTableGroupedColumnDirective as ɵdf, SprkTableEmptyHeadingModule as ɵdg, SprkTableEmptyHeadingDirective as ɵdh, SprkTableRowHeadingModule as ɵdi, SprkTableRowHeadingDirective as ɵdj, SprkTabbedNavigationTabModule as ɵdk, SprkTabbedNavigationTabDirective as ɵdl, SprkTabbedNavigationPanelModule as ɵdm, SprkTabbedNavigationPanelDirective as ɵdn, SprkPaginationModule as ɵdo, SprkPaginationComponent as ɵdp, SprkFooterModule as ɵdq, SprkFooterComponent as ɵdr, SprkTabbedNavigationModule as ɵds, SprkTabbedNavigationComponent as ɵdt, SprkAccordionModule as ɵe, SprkLinkModule as ɵf, SprkLinkComponent as ɵg, SprkAccordionComponent as ɵh, SprkAccordionItemModule as ɵi, SprkAccordionItemComponent as ɵj, SprkAwardModule as ɵk, SprkStackModule as ɵl, SprkStackComponent as ɵm, SprkStackItemModule as ɵn, SprkStackItemDirective as ɵo, SprkToggleModule as ɵp, SprkToggleComponent as ɵq, SprkAwardComponent as ɵr, SprkButtonModule as ɵs, SprkButtonDirective as ɵt, SprkCardModule as ɵu, SprkCardComponent as ɵv, SprkDictionaryModule as ɵw, SprkDictionaryComponent as ɵx, SprkDividerModule as ɵy, SprkDividerComponent as ɵz };
//# sourceMappingURL=sparkdesignsystem-spark-angular.js.map
