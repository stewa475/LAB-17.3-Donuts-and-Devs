{"version":3,"sources":["../../../node_modules/tslib/tslib.es6.js","ng://@sparkdesignsystem/spark-angular/environment/environment.ts","ng://@sparkdesignsystem/spark-angular/lib/directives/inputs/formatters/sprk-formatter-date/sprk-formatter-date.directive.ts","ng://@sparkdesignsystem/spark-angular/lib/directives/inputs/formatters/sprk-formatter-date/sprk-formatter-date.module.ts","ng://@sparkdesignsystem/spark-angular/lib/directives/inputs/formatters/sprk-formatter-monetary/sprk-formatter-monetary.directive.ts","ng://@sparkdesignsystem/spark-angular/lib/directives/inputs/formatters/sprk-formatter-monetary/sprk-formatter-monetary.module.ts","ng://@sparkdesignsystem/spark-angular/lib/directives/inputs/formatters/sprk-formatter-phone-number/sprk-formatter-phone-number.directive.ts","ng://@sparkdesignsystem/spark-angular/lib/directives/inputs/formatters/sprk-formatter-phone-number/sprk-formatter-phone-number.module.ts","ng://@sparkdesignsystem/spark-angular/lib/directives/inputs/formatters/sprk-formatter-ssn/sprk-formatter-ssn.directive.ts","ng://@sparkdesignsystem/spark-angular/lib/directives/inputs/formatters/sprk-formatter-ssn/sprk-formatter-ssn.module.ts","ng://@sparkdesignsystem/spark-angular/lib/directives/inputs/sprk-datepicker/sprk-datepicker.directive.ts","ng://@sparkdesignsystem/spark-angular/lib/directives/inputs/sprk-datepicker/sprk-datepicker.module.ts","ng://@sparkdesignsystem/spark-angular/lib/directives/inputs/sprk-field-error/sprk-field-error.directive.ts","ng://@sparkdesignsystem/spark-angular/lib/directives/inputs/sprk-field-error/sprk-field-error.module.ts","ng://@sparkdesignsystem/spark-angular/lib/directives/inputs/sprk-helper-text/sprk-helper-text.directive.ts","ng://@sparkdesignsystem/spark-angular/lib/directives/inputs/sprk-helper-text/sprk-helper-text.module.ts","ng://@sparkdesignsystem/spark-angular/lib/directives/inputs/sprk-input/sprk-input.directive.ts","ng://@sparkdesignsystem/spark-angular/lib/directives/inputs/sprk-input/sprk-input.module.ts","ng://@sparkdesignsystem/spark-angular/lib/directives/inputs/sprk-label/sprk-label.directive.ts","ng://@sparkdesignsystem/spark-angular/lib/directives/inputs/sprk-label/sprk-label.module.ts","ng://@sparkdesignsystem/spark-angular/lib/directives/inputs/sprk-selection-input/sprk-selection-input.directive.ts","ng://@sparkdesignsystem/spark-angular/lib/directives/inputs/sprk-selection-input/sprk-selection-input.module.ts","ng://@sparkdesignsystem/spark-angular/lib/directives/inputs/sprk-selection-label/sprk-selection-label.directive.ts","ng://@sparkdesignsystem/spark-angular/lib/directives/inputs/sprk-selection-label/sprk-selection-label.module.ts","ng://@sparkdesignsystem/spark-angular/lib/directives/sprk-stack-item/sprk-stack-item.directive.ts","ng://@sparkdesignsystem/spark-angular/lib/directives/sprk-stack-item/sprk-stack-item.module.ts","ng://@sparkdesignsystem/spark-angular/lib/directives/sprk-table-empty-heading/sprk-table-empty-heading.directive.ts","ng://@sparkdesignsystem/spark-angular/lib/directives/sprk-table-empty-heading/sprk-table-empty-heading.module.ts","ng://@sparkdesignsystem/spark-angular/lib/directives/sprk-table-grouped-column/sprk-table-grouped-column.directive.ts","ng://@sparkdesignsystem/spark-angular/lib/directives/sprk-table-grouped-column/sprk-table-grouped-column.module.ts","ng://@sparkdesignsystem/spark-angular/lib/directives/sprk-table-head/sprk-table-head.directive.ts","ng://@sparkdesignsystem/spark-angular/lib/directives/sprk-table-head/sprk-table-head.module.ts","ng://@sparkdesignsystem/spark-angular/lib/directives/sprk-table-row-heading/sprk-table-row-heading.directive.ts","ng://@sparkdesignsystem/spark-angular/lib/directives/sprk-table-row-heading/sprk-table-row-heading.module.ts","ng://@sparkdesignsystem/spark-angular/lib/directives/tabbed-navigation/sprk-tabbed-navigation-panel/sprk-tabbed-navigation-panel.directive.ts","ng://@sparkdesignsystem/spark-angular/lib/directives/tabbed-navigation/sprk-tabbed-navigation-panel/sprk-tabbed-navigation-panel.module.ts","ng://@sparkdesignsystem/spark-angular/lib/directives/tabbed-navigation/sprk-tabbed-navigation-tab/sprk-tabbed-navigation-tab.directive.ts","ng://@sparkdesignsystem/spark-angular/lib/directives/tabbed-navigation/sprk-tabbed-navigation-tab/sprk-tabbed-navigation-tab.module.ts","ng://@sparkdesignsystem/spark-angular/lib/components/inputs/sprk-input-container/sprk-input-container.component.ts","ng://@sparkdesignsystem/spark-angular/lib/components/inputs/sprk-input-container/sprk-input-container.module.ts","ng://@sparkdesignsystem/spark-angular/lib/components/inputs/sprk-huge-input-container/sprk-huge-input-container.component.ts","ng://@sparkdesignsystem/spark-angular/lib/components/inputs/sprk-huge-input-container/sprk-huge-input-container.module.ts","ng://@sparkdesignsystem/spark-angular/lib/components/inputs/sprk-textarea-container/sprk-textarea-container.component.ts","ng://@sparkdesignsystem/spark-angular/lib/components/inputs/sprk-textarea-container/sprk-textarea-container.module.ts","ng://@sparkdesignsystem/spark-angular/lib/components/inputs/sprk-icon-input-container/sprk-icon-input-container.component.ts","ng://@sparkdesignsystem/spark-angular/lib/components/inputs/sprk-icon-input-container/sprk-icon-input-container.module.ts","ng://@sparkdesignsystem/spark-angular/lib/components/inputs/sprk-selection-item-container/sprk-selection-item-container.component.ts","ng://@sparkdesignsystem/spark-angular/lib/components/inputs/sprk-selection-container/sprk-selection-container.component.ts","ng://@sparkdesignsystem/spark-angular/lib/components/inputs/sprk-selection-container/sprk-selection-container.module.ts","ng://@sparkdesignsystem/spark-angular/lib/components/inputs/sprk-selection-item-container/sprk-selection-item-container.module.ts","ng://@sparkdesignsystem/spark-angular/lib/components/sprk-icon/sprk-icon.component.ts","ng://@sparkdesignsystem/spark-angular/lib/components/sprk-icon/sprk-icon.module.ts","ng://@sparkdesignsystem/spark-angular/lib/directives/sprk-link/sprk-link.directive.ts","ng://@sparkdesignsystem/spark-angular/lib/directives/sprk-link/sprk-link.module.ts","ng://@sparkdesignsystem/spark-angular/lib/components/sprk-toggle/sprk-toggle-animations.ts","ng://@sparkdesignsystem/spark-angular/lib/components/sprk-accordion-item/sprk-accordion-item.component.ts","ng://@sparkdesignsystem/spark-angular/lib/components/sprk-accordion-item/sprk-accordion-item.module.ts","ng://@sparkdesignsystem/spark-angular/lib/components/sprk-link/sprk-link.component.ts","ng://@sparkdesignsystem/spark-angular/lib/components/sprk-link/sprk-link.module.ts","ng://@sparkdesignsystem/spark-angular/lib/components/sprk-accordion/sprk-accordion.component.ts","ng://@sparkdesignsystem/spark-angular/lib/components/sprk-accordion/sprk-accordion.module.ts","ng://@sparkdesignsystem/spark-angular/lib/components/sprk-alert/sprk-alert.component.ts","ng://@sparkdesignsystem/spark-angular/lib/components/sprk-alert/sprk-alert.module.ts","ng://@sparkdesignsystem/spark-angular/lib/components/sprk-divider/sprk-divider.component.ts","ng://@sparkdesignsystem/spark-angular/lib/components/sprk-divider/sprk-divider.module.ts","ng://@sparkdesignsystem/spark-angular/lib/components/sprk-dropdown/sprk-dropdown.component.ts","ng://@sparkdesignsystem/spark-angular/lib/components/sprk-dropdown/sprk-dropdown.module.ts","ng://@sparkdesignsystem/spark-angular/lib/components/sprk-stack/sprk-stack.component.ts","ng://@sparkdesignsystem/spark-angular/lib/components/sprk-stack/sprk-stack.module.ts","ng://@sparkdesignsystem/spark-angular/lib/components/sprk-toggle/sprk-toggle.component.ts","ng://@sparkdesignsystem/spark-angular/lib/components/sprk-toggle/sprk-toggle.module.ts","ng://@sparkdesignsystem/spark-angular/lib/components/sprk-footer/sprk-footer.component.ts","ng://@sparkdesignsystem/spark-angular/lib/components/sprk-footer/sprk-footer.module.ts","ng://@sparkdesignsystem/spark-angular/lib/components/sprk-list-item/sprk-list-item.component.ts","ng://@sparkdesignsystem/spark-angular/lib/components/sprk-list-item/sprk-list-item.module.ts","ng://@sparkdesignsystem/spark-angular/lib/components/sprk-masthead/sprk-masthead-accordion/sprk-masthead-accordion.component.ts","ng://@sparkdesignsystem/spark-angular/lib/components/sprk-masthead/sprk-masthead-accordion/sprk-masthead-accordion.module.ts","ng://@sparkdesignsystem/spark-angular/lib/components/sprk-masthead/sprk-masthead-accordion-item/sprk-masthead-accordion-item.component.ts","ng://@sparkdesignsystem/spark-angular/lib/components/sprk-masthead/sprk-masthead-accordion-item/sprk-masthead-accordion-item.module.ts","ng://@sparkdesignsystem/spark-angular/lib/components/sprk-masthead/sprk-masthead.component.ts","ng://@sparkdesignsystem/spark-angular/lib/components/sprk-masthead/sprk-masthead.module.ts","ng://@sparkdesignsystem/spark-angular/lib/components/sprk-modal/sprk-modal.component.ts","ng://@sparkdesignsystem/spark-angular/lib/components/sprk-modal/sprk-modal.module.ts","ng://@sparkdesignsystem/spark-angular/lib/components/sprk-ordered-list/sprk-ordered-list.component.ts","ng://@sparkdesignsystem/spark-angular/lib/components/sprk-ordered-list/sprk-ordered-list.module.ts","ng://@sparkdesignsystem/spark-angular/lib/components/sprk-unordered-list/sprk-unordered-list.component.ts","ng://@sparkdesignsystem/spark-angular/lib/components/sprk-unordered-list/sprk-unordered-list.module.ts","ng://@sparkdesignsystem/spark-angular/lib/components/sprk-pagination/sprk-pagination.component.ts","ng://@sparkdesignsystem/spark-angular/lib/components/sprk-pagination/sprk-pagination.module.ts","ng://@sparkdesignsystem/spark-angular/lib/components/sprk-promo/sprk-promo.component.ts","ng://@sparkdesignsystem/spark-angular/lib/components/sprk-promo/sprk-promo.module.ts","ng://@sparkdesignsystem/spark-angular/lib/components/sprk-tabbed-navigation/sprk-tabbed-navigation.component.ts","ng://@sparkdesignsystem/spark-angular/lib/components/sprk-tabbed-navigation/sprk-tabbed-navigation.module.ts","ng://@sparkdesignsystem/spark-angular/lib/components/sprk-table/sprk-table.component.ts","ng://@sparkdesignsystem/spark-angular/lib/components/sprk-table/sprk-table.module.ts","ng://@sparkdesignsystem/spark-angular/lib/directives/inputs/sprk-button/sprk-button.directive.ts","ng://@sparkdesignsystem/spark-angular/lib/directives/inputs/sprk-button/sprk-button.module.ts","ng://@sparkdesignsystem/spark-angular/lib/components/sprk-award/sprk-award.component.ts","ng://@sparkdesignsystem/spark-angular/lib/components/sprk-award/sprk-award.module.ts","ng://@sparkdesignsystem/spark-angular/lib/components/sprk-card/sprk-card.component.ts","ng://@sparkdesignsystem/spark-angular/lib/components/sprk-card/sprk-card.module.ts","ng://@sparkdesignsystem/spark-angular/lib/components/sprk-dictionary/sprk-dictionary.component.ts","ng://@sparkdesignsystem/spark-angular/lib/components/sprk-dictionary/sprk-dictionary.module.ts","ng://@sparkdesignsystem/spark-angular/lib/components/sprk-highlight-board/sprk-highlight-board.component.ts","ng://@sparkdesignsystem/spark-angular/lib/components/sprk-highlight-board/sprk-highlight-board.module.ts","ng://@sparkdesignsystem/spark-angular/lib/directives/sprk-box/sprk-box.directive.ts","ng://@sparkdesignsystem/spark-angular/lib/directives/sprk-box/sprk-box.module.ts","ng://@sparkdesignsystem/spark-angular/lib/directives/sprk-text/sprk-text.directive.ts","ng://@sparkdesignsystem/spark-angular/lib/directives/sprk-text/sprk-text.module.ts","ng://@sparkdesignsystem/spark-angular/lib/directives/sprk-heading/sprk-heading.directive.ts","ng://@sparkdesignsystem/spark-angular/lib/directives/sprk-heading/sprk-heading.module.ts","ng://@sparkdesignsystem/spark-angular/lib/components/sprk-flag/sprk-flag.component.ts","ng://@sparkdesignsystem/spark-angular/lib/components/sprk-flag/sprk-flag.module.ts","ng://@sparkdesignsystem/spark-angular/lib/directives/sprk-centered-column/sprk-centered-column.directive.ts","ng://@sparkdesignsystem/spark-angular/lib/directives/sprk-centered-column/sprk-centered-column.module.ts","ng://@sparkdesignsystem/spark-angular/lib/spark-angular.module.ts"],"names":["__assign","Object","assign","t","s","i","n","arguments","length","p","prototype","hasOwnProperty","call","apply","this","__decorate","decorators","target","key","desc","d","c","r","getOwnPropertyDescriptor","Reflect","decorate","defineProperty","__metadata","metadataKey","metadataValue","metadata","SprkFormatterDateDirective","ref","onFocus","value","nativeElement","formatDate","m","match","newValue","cleanValue","replace","ElementRef","HostListener","Directive","selector","SprkFormatterDateModule","NgModule","imports","CommonModule","RouterModule","declarations","exports","SprkFormatterMonetaryDirective","onBlur","formatMonetary","number","validity","valid","Number","isNaN","toLocaleString","style","currency","SprkFormatterMonetaryModule","SprkFormatterPhoneNumberDirective","formatPhone","SprkFormatterPhoneNumberModule","SprkFormatterSsnDirective","formatSSN","val_1","trim","newVal_1","forEach","size","substr","SprkFormatterSsnModule","SprkDatepickerDirective","ngOnInit","_this","input","TinyDatePicker","mode","lang","days","min","max","format","date","toLocaleDateString","month","day","year","sprkDatePickerConfig","on","event","Event","document","createEvent","initEvent","dispatchEvent","focus","Input","SprkDatepickerModule","SprkFieldErrorDirective","getClasses","item","classList","add","SprkFieldErrorModule","SprkHelperTextDirective","SprkHelperTextModule","SprkInputDirective","OnChange","$event","remove","nodeName","SprkInputModule","SprkLabelDirective","SprkLabelModule","SprkSelectionInputDirective","SprkSelectionInputModule","SprkSelectionLabelDirective","SprkSelectionLabelModule","SprkStackItemDirective","SprkStackItemModule","SprkTableEmptyHeadingDirective","classArray","additionalClasses","split","className","push","SprkTableEmptyHeadingModule","SprkTableGroupedColumnDirective","SprkTableGroupedColumnModule","SprkTableHeadDirective","SprkTableHeadModule","SprkTableRowHeadingDirective","SprkTableRowHeadingModule","SprkTabbedNavigationPanelDirective","defaultActive","setAttribute","SprkTabbedNavigationPanelModule","SprkTabbedNavigationTabDirective","analyticsString","SprkTabbedNavigationTabModule","SparkInputContainerComponent","id","_.uniqueId","input_id","error_id","join","label","error","ContentChild","static","Component","template","SparkInputContainerModule","FormsModule","ReactiveFormsModule","SprkHugeInputContainerComponent","uniqueId","SprkHugeInputContainerModule","SprkTextareaContainerComponent","SprkTextareaContainerModule","SprkIconInputContainerComponent","getIconContainerClasses","iconContainerClasses","SprkIconInputContainerModule","SprkSelectionItemContainerComponent","renderer","addInputTypeClasses","inputType","type","addClass","generateIdForInput","inputId","labelFor","htmlFor","console","warn","setProperty","Renderer2","SprkSelectionContainerComponent","ngAfterContentInit","selectionItems","ContentChildren","QueryList","SprkSelectionContainerModule","SprkSelectionItemContainerModule","SprkIconComponent","icon","iconType","SprkIconModule","SprkLinkDirective","el","variant","HostBinding","SprkLinkDirectiveModule","toggleAnimations","toggleContent","trigger","state","height","overflow","visibility","transition","animate","SprkAccordionItemComponent","isOpen","iconTypeClosed","iconTypeOpen","componentID","accordion_controls_id","currentIconType","iconStateClass","animState","accordionState","toggleAccordion","preventDefault","isActive","getHeadingClasses","additionalHeadingClasses","animations","SprkAccordionItemModule","SprkLinkComponent","router","isExternal","href","undefined","isJumpLink","getPathWithoutHash","url","isExternalLink","RegExp","test","isJumpLinkWithPage","isNoActionLink","scrollToId","elementID","pop","element","getElementById","scrollIntoView","handleClick","navigateByUrl","linkType","isDisabled","Router","SprkLinkModule","SprkAccordionComponent","SprkAccordionModule","SprkAlertComponent","visible","getClassesAlertContainer","alertClassArray","alertType","alertDismiss","SprkAlertModule","SprkDividerComponent","SprkDividerModule","SprkDropdownComponent","dropdownType","choiceMade","EventEmitter","toggle","onClick","contains","hideDropdown","onFocusin","choiceClick","clearActiveChoices","choiceIndex","currentTarget","getAttribute","clickedChoice","choices","setActiveChoice","updateTriggerText","emit","triggerText","choice","getTriggerClasses","additionalTriggerClasses","getTriggerTextClasses","additionalTriggerTextClasses","Output","SprkDropdownModule","SprkStackComponent","splitAt","itemSpacing","SprkStackModule","SprkToggleComponent","titleFontClass","contentId","toggleState","ngAfterViewInit","SprkToggleModule","SprkFooterComponent","SprkFooterModule","SprkListItemComponent","ViewChild","TemplateRef","SprkListItemModule","SprkMastheadAccordionComponent","SprkMastheadAccordionModule","SprkMastheadAccordionItemComponent","SprkMastheadAccordionItemModule","SprkMastheadComponent","logoHref","logoLinkScreenReaderText","isNarrowNavOpen","narrowNavId","controls_id","isScrolled","isNarrowLayout","scrollDirection","isHidden","isNarrowOnResize","scrollPosition","throttledCheckScrollDirection","_.throttle","checkScrollDirection","throttledUpdateLayoutState","updateLayoutState","events","subscribe","NavigationEnd","closeNarrowNav","handleResizeEvent","onScroll","window","scrollY","onResize","isElementVisible","querySelector","elementDisplayValue","getComputedStyle","display","elementVisibilityValue","scrollYDirection","newScrollPos","direction","newDirection","getNarrowNavClasses","additionalNarrowNavClasses","getSecondaryNavClasses","additionalBigNavClasses","toggleNarrowNav","openNarrowNav","body","parentElement","removeClass","SprkMastheadModule","SprkModalComponent","confirmText","cancelText","isVisible","hide","confirmClick","cancelClick","heading_id","content_id","handleKeyboardEvent","closeModal","modalType","emitConfirmClick","emitCancelClick","KeyboardEvent","SprkModalModule","SprkOrderedListComponent","listType","SprkOrderedListModule","SprkUnorderedListComponent","SprkUnorderedListModule","SprkPaginationComponent","paginationType","nextLinkText","prevLinkText","_currentPage","previousClick","nextClick","pageClick","totalPages","goToPage","page","currentPage","goBack","newPage","goForward","Math","ceil","totalItems","itemsPerPage","isLastPage","showNumbers","SprkPaginationModule","SprkPromoComponent","isFlag","hasBorder","getClassesFlag","additionalClassesFlagLink","getClassesImg","additionalClassesImgLink","getClassesContent","imgSrc","additionalClassesContent","SprkPromoModule","SprkTabbedNavigationComponent","activeClass","ariaOrientation","innerWidth","activePanel","panels","find","panel","resetTabs","tabs","map","tab","setActiveTab","onKeydown","keys","tabElements","panelElements","keyCode","incrementTab","getActiveTabIndex","goToEndTab","tabIDs","panelIDs","index","tabID","panelID","reverse","width","activeIndex","tabpanels","removeAttribute","foundNewIndex","hasAttribute","newActiveIndex","tabpanel","SprkTabbedNavigationModule","SprkTableComponent","getTableClasses","additionalTableClasses","SprkTableModule","SprkButtonDirective","isSpinning","spinningAriaLabel","setSpinning","offsetWidth","ariaLabel","spinnerClass","textContent","innerHTML","ngOnChanges","changes","isFirstChange","SprkButtonModule","SprkAwardComponent","getImgContainerClasses","getClassesImgOne","additionalClassesImgOne","getClassesImgTwo","additionalClassesImgTwo","SprkAwardModule","SprkCardComponent","cardType","ctaType","getClassesCta","ctaClassArray","ctaIcon","additionalCtaClasses","getClassesCard","SprkCardModule","SprkDictionaryComponent","data","dictionaryType","objectKeys","SprkDictionaryModule","SprkHighlightBoardComponent","centerBtns","ctaText","ctaText2","SprkHighlightBoardModule","SprkBoxDirective","spacing","SprkBoxModule","SprkTextDirective","SprkTextModule","SprkHeadingDirective","isPageTitle","SprkHeadingModule","SprkFlagComponent","isReversed","isStacked","verticalAlignment","flush","tiny","small","large","huge","middle","bottom","getMediaClasses","mediaClassArray","additionalMediaClasses","getBodyClasses","bodyClassArray","additionalBodyClasses","SprkFlagModule","SprkCenteredColumnDirective","SprkCenteredColumnModule","version","angular","SparkAngularModule"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, privateMap) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to get private field on non-instance\");\r\n    }\r\n    return privateMap.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, privateMap, value) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to set private field on non-instance\");\r\n    }\r\n    privateMap.set(receiver, value);\r\n    return value;\r\n}\r\n","export const environment = {\n  version: '10.0.0'\n};\n","import { Directive, ElementRef, HostListener } from '@angular/core';\n\n@Directive({\n  selector: '[sprkFormatterDate]'\n})\nexport class SprkFormatterDateDirective {\n  constructor(public ref: ElementRef) {}\n\n  @HostListener('input', ['$event.target.value'])\n  onFocus(value) {\n    this.ref.nativeElement.value = this.formatDate(value);\n  }\n\n  formatDate(value): string {\n    const m = value.match(\n      // tslint:disable-next-line:max-line-length\n      /^(((0[13578]|1[02])([/-]?)(0[1-9]|[12]\\d|3[01])|(0[469]|11)([/-]?)(0[1-9]|[12]\\d|30)|02([/-]?)((0[1-9])|[12]\\d))(\\4|\\7|\\9)[12]\\d{3})?$/\n    );\n\n    let newValue = '';\n    const cleanValue = value.replace(/[/-]/g, '');\n\n    if (m) {\n      for (let i = 0; i < cleanValue.length; i += 1) {\n        if (i === 1 || i === 3) {\n          newValue += `${cleanValue[i]}/`;\n        } else {\n          newValue += cleanValue[i];\n        }\n      }\n      return newValue;\n    } else {\n      return value;\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { SprkFormatterDateDirective } from './sprk-formatter-date.directive';\n\n@NgModule({\n  imports: [CommonModule, RouterModule],\n  declarations: [SprkFormatterDateDirective],\n  exports: [SprkFormatterDateDirective]\n})\nexport class SprkFormatterDateModule {}\n","import { Directive, ElementRef, HostListener, Attribute } from '@angular/core';\nimport { Validators } from '@angular/forms';\n\n@Directive({\n  selector: '[sprkFormatterMonetary]'\n})\nexport class SprkFormatterMonetaryDirective {\n  constructor(public ref: ElementRef) {}\n\n  @HostListener('blur', ['this.ref.nativeElement.value'])\n  onBlur(value) {\n    this.ref.nativeElement.value = this.formatMonetary(value);\n  }\n\n  formatMonetary(value): void {\n    let number;\n    if (this.ref.nativeElement.validity.valid) {\n      number = Number(value.replace(/[\\$,]/g, ''));\n\n      if (isNaN(number)) {\n        return value;\n      }\n\n      return number\n        .toLocaleString('en-US', { style: 'currency', currency: 'USD' })\n        .replace(/\\$/g, '');\n    }\n    return value;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { SprkFormatterMonetaryDirective } from './sprk-formatter-monetary.directive';\n\n@NgModule({\n  imports: [CommonModule, RouterModule],\n  declarations: [SprkFormatterMonetaryDirective],\n  exports: [SprkFormatterMonetaryDirective]\n})\nexport class SprkFormatterMonetaryModule {}\n","import { Directive, ElementRef, HostListener } from '@angular/core';\n\n@Directive({\n  selector: '[sprkFormatterPhoneNumber]'\n})\nexport class SprkFormatterPhoneNumberDirective {\n  constructor(public ref: ElementRef) {}\n\n  @HostListener('input', ['$event.target.value'])\n  onFocus(value) {\n    this.ref.nativeElement.value = this.formatPhone(value);\n  }\n\n  formatPhone(value): string {\n    const newValue = `${value}`.replace(/\\D/g, '');\n    const m = newValue.match(/^(\\d{3})(\\d{3})(\\d{4})$/);\n\n    if (m) {\n      return `(${m[1]}) ${m[2]}-${m[3]}`;\n    } else {\n      return value;\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { SprkFormatterPhoneNumberDirective } from './sprk-formatter-phone-number.directive';\n\n@NgModule({\n  imports: [CommonModule, RouterModule],\n  declarations: [SprkFormatterPhoneNumberDirective],\n  exports: [SprkFormatterPhoneNumberDirective]\n})\nexport class SprkFormatterPhoneNumberModule {}\n","import { Directive, ElementRef, HostListener } from '@angular/core';\n\n@Directive({\n  selector: '[sprkFormatterSsn]'\n})\nexport class SprkFormatterSsnDirective {\n  constructor(public ref: ElementRef) {}\n\n  @HostListener('input', ['$event.target.value'])\n  onFocus(value) {\n    this.ref.nativeElement.value = this.formatSSN(value);\n  }\n\n  formatSSN(value): string {\n    const m = value.match(\n      /(^(?!666|000|9\\d{2})\\d{3}([-]{0,1})(?!00)\\d{2}\\1(?!0{4})\\2\\d{4}$)|^$/\n    );\n    if (m) {\n      let val = value.trim().replace(/[ -]/g, '');\n      let newVal = '';\n      const sizes = [3, 2, 4];\n\n      sizes.forEach(size => {\n        if (val.length > size) {\n          newVal += `${val.substr(0, size)}-`;\n          val = val.substr(size);\n        }\n      });\n\n      newVal += val;\n      return newVal;\n    }\n    return value;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { SprkFormatterSsnDirective } from './sprk-formatter-ssn.directive';\n\n@NgModule({\n  imports: [CommonModule, RouterModule],\n  declarations: [SprkFormatterSsnDirective],\n  exports: [SprkFormatterSsnDirective]\n})\nexport class SprkFormatterSsnModule {}\n","import { Directive, ElementRef, Input, OnInit } from '@angular/core';\nimport TinyDatePicker from 'tiny-date-picker';\n\n@Directive({\n  selector: '[sprkDatepicker]'\n})\nexport class SprkDatepickerDirective implements OnInit {\n  /**\n   * @ignore\n   */\n  constructor(public ref: ElementRef) {}\n\n  /**\n   * Exposes configuration provided\n   * by `tiny-date-picker`,\n   * see [github](https://github.com/chrisdavies/tiny-date-picker) for documentation.\n   */\n  @Input()\n  sprkDatePickerConfig: object;\n\n  ngOnInit(): void {\n    const input = this.ref.nativeElement;\n    const tdpConfig = {\n      mode: 'dp-below',\n      lang: {\n        days: ['S', 'M', 'T', 'W', 'T', 'F', 'S']\n      },\n      min: '01/1/2008',\n      max: '01/1/2068',\n      format: date =>\n        date\n          .toLocaleDateString('en-US', {\n            month: '2-digit',\n            day: '2-digit',\n            year: 'numeric'\n          })\n          .replace(/[^ -~]/g, '')\n    };\n\n    if (TinyDatePicker) {\n      TinyDatePicker(input, {\n        ...tdpConfig,\n        ...this.sprkDatePickerConfig\n      }).on('select', () => {\n\n        let event;\n\n        if (typeof(Event) === 'function') {\n          event = new Event('input');\n        } else {\n          event = document.createEvent('Event');\n          event.initEvent('input', true, true);\n        }\n\n        this.ref.nativeElement.dispatchEvent(event);\n        this.ref.nativeElement.focus();\n      });\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { SprkDatepickerDirective } from './sprk-datepicker.directive';\n\n@NgModule({\n  imports: [CommonModule, RouterModule],\n  declarations: [SprkDatepickerDirective],\n  exports: [SprkDatepickerDirective]\n})\nexport class SprkDatepickerModule {}\n","import { Directive, ElementRef, OnInit } from '@angular/core';\n\n@Directive({\n  selector: '[sprkFieldError]'\n})\nexport class SprkFieldErrorDirective implements OnInit {\n  /**\n   * @ignore\n   */\n  constructor(public ref: ElementRef) {}\n\n  /**\n   * @ignore\n   */\n  getClasses(): string[] {\n    const classArray: string[] = ['sprk-b-ErrorContainer'];\n    return classArray;\n  }\n\n  ngOnInit(): void {\n    this.getClasses().forEach(item => {\n      this.ref.nativeElement.classList.add(item);\n    });\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { SprkFieldErrorDirective } from './sprk-field-error.directive';\n\n@NgModule({\n  imports: [CommonModule, RouterModule],\n  declarations: [SprkFieldErrorDirective],\n  exports: [SprkFieldErrorDirective]\n})\nexport class SprkFieldErrorModule {}\n","import { Directive, ElementRef, OnInit } from '@angular/core';\n\n@Directive({\n  selector: '[sprkHelperText]'\n})\nexport class SprkHelperTextDirective implements OnInit {\n /**\n  * @ignore\n  */\n  constructor(public ref: ElementRef) {}\n\n  /**\n   * @ignore\n   */\n  getClasses(): string[] {\n    const classArray: string[] = ['sprk-b-HelperText'];\n    return classArray;\n  }\n\n  ngOnInit(): void {\n    this.getClasses().forEach(item => {\n      this.ref.nativeElement.classList.add(item);\n    });\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { SprkHelperTextDirective } from './sprk-helper-text.directive';\n\n@NgModule({\n  imports: [CommonModule, RouterModule],\n  declarations: [SprkHelperTextDirective],\n  exports: [SprkHelperTextDirective]\n})\nexport class SprkHelperTextModule {}\n","import {\n  Directive,\n  ElementRef,\n  OnInit,\n  HostListener,\n} from '@angular/core';\n\n@Directive({\n  selector: '[sprkInput]'\n})\nexport class SprkInputDirective implements OnInit {\n  /**\n   * @ignore\n   */\n  constructor(public ref: ElementRef) {}\n\n  /**\n   * @ignore\n   */\n  @HostListener('change', ['$event'])\n  OnChange($event) {\n    const value = (this.ref.nativeElement as HTMLInputElement).value;\n    if (value.length > 0) {\n      this.ref.nativeElement.classList.add('sprk-b-Input--has-floating-label');\n    } else {\n      this.ref.nativeElement.classList.remove('sprk-b-Input--has-floating-label');\n    }\n  }\n\n  ngOnInit(): void {\n    if (this.ref.nativeElement.nodeName === 'SELECT') {\n      this.ref.nativeElement.classList.add('sprk-b-Select');\n    } else if (this.ref.nativeElement.nodeName === 'TEXTAREA') {\n      this.ref.nativeElement.classList.add('sprk-b-TextInput');\n      this.ref.nativeElement.classList.add('sprk-b-TextArea');\n    } else {\n      this.ref.nativeElement.classList.add('sprk-b-TextInput');\n    }\n\n    if ((this.ref.nativeElement as HTMLInputElement).value.length > 0 ) {\n      this.ref.nativeElement.classList.add('sprk-b-Input--has-floating-label');\n    }\n    this.ref.nativeElement.classList.add('sprk-u-Width-100');\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { SprkInputDirective } from './sprk-input.directive';\n\n@NgModule({\n  imports: [CommonModule, RouterModule],\n  declarations: [SprkInputDirective],\n  exports: [SprkInputDirective]\n})\nexport class SprkInputModule {}\n","import { Directive, ElementRef, OnInit } from '@angular/core';\n\n@Directive({\n  selector: '[sprkLabel]'\n})\nexport class SprkLabelDirective implements OnInit {\n  /**\n   * @ignore\n   */\n  constructor(public ref: ElementRef) {}\n\n  /**\n   * @ignore\n   */\n  getClasses(): string[] {\n    const classArray: string[] = ['sprk-b-Label'];\n    return classArray;\n  }\n\n  ngOnInit(): void {\n    this.getClasses().forEach(item => {\n      this.ref.nativeElement.classList.add(item);\n    });\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { SprkLabelDirective } from './sprk-label.directive';\n\n@NgModule({\n  imports: [CommonModule, RouterModule],\n  declarations: [SprkLabelDirective],\n  exports: [SprkLabelDirective]\n})\nexport class SprkLabelModule {}\n","import { Directive, ElementRef, OnInit } from '@angular/core';\n\n@Directive({\n  selector: '[sprkSelectionInput]'\n})\nexport class SprkSelectionInputDirective implements OnInit {\n  /**\n   * @ignore\n   */\n  constructor(public ref: ElementRef) {}\n\n  /**\n   * @ignore\n   */\n  getClasses(): string[] {\n    const classArray: string[] = ['sprk-b-SelectionInput'];\n    return classArray;\n  }\n\n  ngOnInit(): void {\n    this.getClasses().forEach(item => {\n      this.ref.nativeElement.classList.add(item);\n    });\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { SprkSelectionInputDirective } from './sprk-selection-input.directive';\n\n@NgModule({\n  imports: [CommonModule, RouterModule],\n  declarations: [SprkSelectionInputDirective],\n  exports: [SprkSelectionInputDirective]\n})\nexport class SprkSelectionInputModule {}\n","import { Directive, ElementRef, OnInit } from '@angular/core';\n\n@Directive({\n  selector: '[sprkSelectionLabel]'\n})\nexport class SprkSelectionLabelDirective implements OnInit {\n  /**\n   * @ignore\n   */\n  constructor(public ref: ElementRef) {}\n\n  /**\n   * @ignore\n   */\n  getClasses(): string[] {\n    const classArray: string[] = ['sprk-b-Label', 'sprk-b-Label--inline'];\n    return classArray;\n  }\n\n  ngOnInit(): void {\n    this.getClasses().forEach(item => {\n      this.ref.nativeElement.classList.add(item);\n    });\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { SprkSelectionLabelDirective } from './sprk-selection-label.directive';\n\n@NgModule({\n  imports: [CommonModule, RouterModule],\n  declarations: [SprkSelectionLabelDirective],\n  exports: [SprkSelectionLabelDirective]\n})\nexport class SprkSelectionLabelModule {}\n","import { Directive, ElementRef, OnInit } from '@angular/core';\n\n@Directive({\n  selector: '[sprkStackItem]'\n})\nexport class SprkStackItemDirective implements OnInit {\n  ngOnInit(): void {\n    this.ref.nativeElement.classList.add('sprk-o-Stack__item');\n  }\n\n  /**\n   * @ignore\n   */\n  constructor(public ref: ElementRef) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { SprkStackItemDirective } from './sprk-stack-item.directive';\n\n@NgModule({\n  imports: [CommonModule, RouterModule],\n  declarations: [SprkStackItemDirective],\n  exports: [SprkStackItemDirective]\n})\nexport class SprkStackItemModule {}\n","import { Directive, ElementRef, Input, OnInit } from '@angular/core';\n\n@Directive({\n  selector: '[sprkTableEmptyHeading]'\n})\nexport class SprkTableEmptyHeadingDirective implements OnInit {\n  /**\n   * Expects a space separated string\n   * of classes to be added to the\n   * element.\n   */\n  @Input()\n  additionalClasses: string;\n\n  /**\n   * @ignore\n   */\n  getClasses(): string[] {\n    const classArray = ['sprk-b-Table__empty-heading'];\n    if (this.additionalClasses) {\n      this.additionalClasses.split(' ').forEach(className => {\n        classArray.push(className);\n      });\n    }\n    return classArray;\n  }\n\n  ngOnInit(): void {\n    this.getClasses().forEach(className => {\n      this.ref.nativeElement.classList.add(className);\n    });\n  }\n\n  /**\n   * @ignore\n   */\n  constructor(public ref: ElementRef) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { SprkTableEmptyHeadingDirective } from './sprk-table-empty-heading.directive';\n\n@NgModule({\n  imports: [CommonModule, RouterModule],\n  declarations: [SprkTableEmptyHeadingDirective],\n  exports: [SprkTableEmptyHeadingDirective]\n})\nexport class SprkTableEmptyHeadingModule {}\n","import { Directive, ElementRef, Input, OnInit } from '@angular/core';\n\n@Directive({\n  selector: '[sprkTableGroupedColumn]'\n})\nexport class SprkTableGroupedColumnDirective implements OnInit {\n /**\n  * Expects a space separated string\n  * of classes to be added to the\n  * element.\n  */\n  @Input()\n  additionalClasses: string;\n\n  /**\n   * @ignore\n   */\n  getClasses(): string[] {\n    const classArray = ['sprk-b-Table__grouped-column'];\n    if (this.additionalClasses) {\n      this.additionalClasses.split(' ').forEach(className => {\n        classArray.push(className);\n      });\n    }\n    return classArray;\n  }\n\n  ngOnInit(): void {\n    this.getClasses().forEach(className => {\n      this.ref.nativeElement.classList.add(className);\n    });\n  }\n  /**\n   * @ignore\n   */\n  constructor(public ref: ElementRef) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { SprkTableGroupedColumnDirective } from './sprk-table-grouped-column.directive';\n\n@NgModule({\n  imports: [CommonModule, RouterModule],\n  declarations: [SprkTableGroupedColumnDirective],\n  exports: [SprkTableGroupedColumnDirective]\n})\nexport class SprkTableGroupedColumnModule {}\n","import { Directive, ElementRef, Input, OnInit } from '@angular/core';\n\n@Directive({\n  selector: '[sprkTableHead]'\n})\nexport class SprkTableHeadDirective implements OnInit {\n  /**\n   * Expects a space separated string\n   * of classes to be added to the\n   * element.\n   */\n  @Input()\n  additionalClasses: string;\n\n  /**\n   * @ignore\n   */\n  getClasses(): string[] {\n    const classArray = ['sprk-b-Table__head'];\n    if (this.additionalClasses) {\n      this.additionalClasses.split(' ').forEach(className => {\n        classArray.push(className);\n      });\n    }\n    return classArray;\n  }\n\n  ngOnInit(): void {\n    this.getClasses().forEach(className => {\n      this.ref.nativeElement.classList.add(className);\n    });\n  }\n  /**\n   * @ignore\n   */\n  constructor(public ref: ElementRef) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { SprkTableHeadDirective } from './sprk-table-head.directive';\n\n@NgModule({\n  imports: [CommonModule, RouterModule],\n  declarations: [SprkTableHeadDirective],\n  exports: [SprkTableHeadDirective]\n})\nexport class SprkTableHeadModule {}\n","import { Directive, ElementRef, Input, OnInit } from '@angular/core';\n\n@Directive({\n  selector: '[sprkTableRowHeading]'\n})\nexport class SprkTableRowHeadingDirective implements OnInit {\n  /**\n   * Expects a space separated string\n   * of classes to be added to the\n   * element.\n   */\n  @Input()\n  additionalClasses: string;\n\n  /**\n   * @ignore\n   */\n  getClasses(): string[] {\n    const classArray = ['sprk-b-Table__row-heading'];\n    if (this.additionalClasses) {\n      this.additionalClasses.split(' ').forEach(className => {\n        classArray.push(className);\n      });\n    }\n    return classArray;\n  }\n\n  ngOnInit(): void {\n    this.getClasses().forEach(className => {\n      this.ref.nativeElement.classList.add(className);\n    });\n  }\n  /**\n   * @ignore\n   */\n  constructor(public ref: ElementRef) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { SprkTableRowHeadingDirective } from './sprk-table-row-heading.directive';\n\n@NgModule({\n  imports: [CommonModule, RouterModule],\n  declarations: [SprkTableRowHeadingDirective],\n  exports: [SprkTableRowHeadingDirective]\n})\nexport class SprkTableRowHeadingModule {}\n","import { Directive, ElementRef, Input, OnInit } from '@angular/core';\n\n@Directive({\n  selector: '[sprkTabbedNavigationPanel]'\n})\nexport class SprkTabbedNavigationPanelDirective implements OnInit {\n  /**\n   * Expects a space separated string\n   * of classes to be added to the\n   * element.\n   */\n  @Input()\n  additionalClasses: string;\n  /**\n   * If `true`, the Panel will\n   * be set as the active Panel on render.\n   */\n  @Input()\n  defaultActive: boolean;\n\n  /**\n   * @ignore\n   */\n  getClasses(): string[] {\n    const classArray: string[] = ['sprk-c-Tabs__content'];\n\n    if (!this.defaultActive) {\n      classArray.push('sprk-u-HideWhenJs');\n    }\n\n    if (this.additionalClasses) {\n      this.additionalClasses.split(' ').forEach(className => {\n        classArray.push(className);\n      });\n    }\n\n    return classArray;\n  }\n\n  ngOnInit(): void {\n    this.ref.nativeElement.setAttribute('role', 'tabpanel');\n    this.ref.nativeElement.setAttribute('tabindex', '0');\n\n    this.getClasses().forEach(item => {\n      this.ref.nativeElement.classList.add(item);\n    });\n  }\n  /**\n   * @ignore\n   */\n  constructor(public ref: ElementRef) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { SprkTabbedNavigationPanelDirective } from './sprk-tabbed-navigation-panel.directive';\n\n@NgModule({\n  imports: [CommonModule, RouterModule],\n  declarations: [SprkTabbedNavigationPanelDirective],\n  exports: [SprkTabbedNavigationPanelDirective]\n})\nexport class SprkTabbedNavigationPanelModule {}\n","import { Directive, ElementRef, Input, OnInit } from '@angular/core';\n\n@Directive({\n  selector: '[sprkTabbedNavigationTab]'\n})\nexport class SprkTabbedNavigationTabDirective implements OnInit {\n /**\n  * Expects a space separated string\n  * of classes to be added to the\n  * element.\n  */\n  @Input()\n  additionalClasses: string;\n  /**\n   * If `true`, the Tab will have\n   * active styles and aria attributes on render.\n   */\n  @Input()\n  defaultActive: boolean;\n  /**\n   * The value supplied will be assigned to the\n   * `data-analytics` attribute on the component.\n   * Intended for an outside\n   * library to capture data.\n   */\n  @Input()\n  analyticsString: string;\n\n  /**\n   * @ignore\n   */\n  getClasses(): string[] {\n    const classArray: string[] = ['sprk-c-Tabs__button'];\n\n    if (this.defaultActive) {\n      classArray.push('sprk-c-Tabs__button--active');\n    }\n\n    if (this.additionalClasses) {\n      this.additionalClasses.split(' ').forEach(className => {\n        classArray.push(className);\n      });\n    }\n\n    return classArray;\n  }\n\n  ngOnInit(): void {\n    this.getClasses().forEach(item => {\n      this.ref.nativeElement.classList.add(item);\n    });\n\n    this.ref.nativeElement.setAttribute('role', 'tab');\n    this.ref.nativeElement.setAttribute(\n      'aria-selected',\n      this.defaultActive ? 'true' : 'false'\n    );\n\n    if (this.analyticsString) {\n      this.ref.nativeElement.setAttribute(\n        'data-analytics',\n        this.analyticsString\n      );\n    }\n  }\n  /**\n   * @ignore\n   */\n  constructor(public ref: ElementRef) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { SprkTabbedNavigationTabDirective } from './sprk-tabbed-navigation-tab.directive';\n\n@NgModule({\n  imports: [CommonModule, RouterModule],\n  declarations: [SprkTabbedNavigationTabDirective],\n  exports: [SprkTabbedNavigationTabDirective]\n})\nexport class SprkTabbedNavigationTabModule {}\n","import { Component, ContentChild, Input, OnInit } from '@angular/core';\nimport * as _ from 'lodash';\nimport { SprkFieldErrorDirective } from '../../../directives/inputs/sprk-field-error/sprk-field-error.directive';\nimport { SprkInputDirective } from '../../../directives/inputs/sprk-input/sprk-input.directive';\nimport { SprkLabelDirective } from '../../../directives/inputs/sprk-label/sprk-label.directive';\n\n@Component({\n  selector: 'sprk-input-container',\n  template: `\n    <div [ngClass]=\"getClasses()\">\n      <ng-content select=\"[sprkLabel]\"></ng-content>\n      <ng-content select=\"[sprkInput]\"></ng-content>\n      <ng-content select=\"[sprk-select-icon]\"></ng-content>\n      <ng-content select=\"sprk-selection-item-container\"></ng-content>\n      <ng-content select=\"[sprkHelperText]\"></ng-content>\n      <ng-content select=\"[sprkFieldError]\"></ng-content>\n    </div>\n  `\n})\nexport class SparkInputContainerComponent implements OnInit {\n  /**\n   * Expects a space separated string\n   * of classes to be added to the\n   * component.\n   */\n  @Input()\n  additionalClasses: string;\n  /**\n   * Expects a space separated string\n   * of classes to be added to the\n   * icon container.\n   */\n  @Input()\n  iconContainerClasses: string;\n\n  /**\n   * This component expects a child label element\n   * with the `sprkLabel` directive.\n   */\n  @ContentChild(SprkLabelDirective, { static: true })\n  label: SprkLabelDirective;\n  /**\n   * This component expects a child input element\n   * with the `sprkInput` directive.\n   */\n  @ContentChild(SprkInputDirective, { static: true })\n  input: SprkInputDirective;\n  /**\n   * This component expects a child element\n   * with the `sprkFieldError` directive.\n   */\n  @ContentChild(SprkFieldErrorDirective, { static: true })\n  error: SprkFieldErrorDirective;\n\n  /**\n   * @ignore\n   */\n  id = _.uniqueId();\n  /**\n   * @ignore\n   */\n  input_id = `input_${this.id}`;\n  /**\n   * @ignore\n   */\n  error_id = `error_${this.id}`;\n\n  /**\n   * @ignore\n   */\n  getClasses(): string {\n    const classArray: string[] = ['sprk-b-InputContainer'];\n\n    if (this.additionalClasses) {\n      this.additionalClasses.split(' ').forEach(className => {\n        classArray.push(className);\n      });\n    }\n    return classArray.join(' ');\n  }\n\n  ngOnInit(): void {\n    if (this.label && this.input) {\n      this.label.ref.nativeElement.setAttribute('for', this.input_id);\n      this.input.ref.nativeElement.id = this.input_id;\n    }\n    if (this.input && this.error) {\n      this.input.ref.nativeElement.setAttribute(\n        'aria-describedby',\n        this.error_id\n      );\n      this.error.ref.nativeElement.id = this.error_id;\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { SparkInputContainerComponent } from './sprk-input-container.component';\n\n@NgModule({\n  imports: [CommonModule, RouterModule, FormsModule, ReactiveFormsModule],\n  declarations: [SparkInputContainerComponent],\n  exports: [SparkInputContainerComponent]\n})\nexport class SparkInputContainerModule {}\n","import { Component, ContentChild, Input, OnInit } from '@angular/core';\nimport { uniqueId } from 'lodash';\nimport { SprkFieldErrorDirective } from '../../../directives/inputs/sprk-field-error/sprk-field-error.directive';\nimport { SprkInputDirective } from '../../../directives/inputs/sprk-input/sprk-input.directive';\nimport { SprkLabelDirective } from '../../../directives/inputs/sprk-label/sprk-label.directive';\n\n@Component({\n  selector: 'sprk-huge-input-container',\n  template: `\n    <div [ngClass]=\"getClasses()\">\n      <ng-content select=\"[sprkInput]\"></ng-content>\n      <ng-content select=\"[sprkLabel]\"></ng-content>\n      <ng-content select=\"[sprk-select-icon]\"></ng-content>\n      <ng-content select=\"sprk-selection-item-container\"></ng-content>\n      <ng-content select=\"[sprkHelperText]\"></ng-content>\n      <ng-content select=\"[sprkFieldError]\"></ng-content>\n    </div>\n  `\n})\nexport class SprkHugeInputContainerComponent implements OnInit {\n /**\n  * Expects a space separated string\n  * of classes to be added to the\n  * component.\n  */\n  @Input()\n  additionalClasses: string;\n /**\n  * Expects a space separated string\n  * of classes to be added to the\n  * icon container.\n  */\n  @Input()\n  iconContainerClasses: string;\n  /**\n   * This component expects a child label element\n   * with the `sprkLabel` directive.\n   */\n  @ContentChild(SprkLabelDirective, { static: true })\n  label: SprkLabelDirective;\n /**\n  * This component expects a child input element\n  * with the `sprkInput` directive.\n  */\n  @ContentChild(SprkInputDirective, { static: true })\n  input: SprkInputDirective;\n  /**\n   * This component expects a child element\n   * with the `sprkFieldError` directive.\n   */\n  @ContentChild(SprkFieldErrorDirective, { static: true })\n  error: SprkFieldErrorDirective;\n\n  /**\n   * @ignore\n   */\n  id = uniqueId();\n  /**\n   * @ignore\n   */\n  input_id = `input_${this.id}`;\n  /**\n   * @ignore\n   */\n  error_id = `error_${this.id}`;\n\n  /**\n   * @ignore\n   */\n  getClasses(): string {\n    const classArray: string[] = [\n      'sprk-b-InputContainer',\n      'sprk-b-InputContainer--huge'\n    ];\n\n    if (this.additionalClasses) {\n      this.additionalClasses.split(' ').forEach(className => {\n        classArray.push(className);\n      });\n    }\n    return classArray.join(' ');\n  }\n\n  ngOnInit(): void {\n    if (this.label && this.input) {\n      this.label.ref.nativeElement.setAttribute('for', this.input_id);\n      this.input.ref.nativeElement.id = this.input_id;\n    }\n    if (this.input && this.error) {\n      this.input.ref.nativeElement.setAttribute(\n        'aria-describedby',\n        this.error_id\n      );\n      this.error.ref.nativeElement.id = this.error_id;\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { SprkHugeInputContainerComponent } from './sprk-huge-input-container.component';\n\n@NgModule({\n  imports: [CommonModule, RouterModule, FormsModule, ReactiveFormsModule],\n  declarations: [SprkHugeInputContainerComponent],\n  exports: [SprkHugeInputContainerComponent]\n})\nexport class SprkHugeInputContainerModule {}\n","import { Component, ContentChild, Input, OnInit } from '@angular/core';\nimport * as _ from 'lodash';\nimport { SprkFieldErrorDirective } from '../../../directives/inputs/sprk-field-error/sprk-field-error.directive';\nimport { SprkInputDirective } from '../../../directives/inputs/sprk-input/sprk-input.directive';\nimport { SprkLabelDirective } from '../../../directives/inputs/sprk-label/sprk-label.directive';\n\n@Component({\n  selector: 'sprk-textarea-container',\n  template: `\n    <div [ngClass]=\"getClasses()\">\n      <ng-content select=\"[sprkLabel]\"></ng-content>\n      <ng-content select=\"[sprkInput]\"></ng-content>\n      <ng-content select=\"sprk-selection-item-container\"></ng-content>\n      <ng-content select=\"[sprkHelperText]\"></ng-content>\n      <ng-content select=\"[sprkFieldError]\"></ng-content>\n    </div>\n  `\n})\nexport class SprkTextareaContainerComponent implements OnInit {\n  /**\n   * Expects a space separated string\n   * of classes to be added to the\n   * component.\n   */\n  @Input()\n  additionalClasses: string;\n  /**\n   * Expects a space separated string\n   * of classes to be added to the\n   * icon container.\n   */\n  @Input()\n  iconContainerClasses: string;\n  /**\n   * This component expects a child label element\n   * with the `sprkLabel` directive.\n   */\n  @ContentChild(SprkLabelDirective, { static: true })\n  label: SprkLabelDirective;\n  /**\n   * This component expects a child input element\n   * with the `sprkInput` directive.\n   */\n  @ContentChild(SprkInputDirective, { static: true })\n  input: SprkInputDirective;\n  /**\n   * This component expects a child element\n   * with the `sprkFieldError` directive.\n   */\n  @ContentChild(SprkFieldErrorDirective, { static: true })\n  error: SprkFieldErrorDirective;\n\n  /**\n   * @ignore\n   */\n  id = _.uniqueId();\n  /**\n   * @ignore\n   */\n  input_id = `input_${this.id}`;\n  /**\n   * @ignore\n   */\n  error_id = `error_${this.id}`;\n\n  /**\n   * @ignore\n   */\n  getClasses(): string {\n    const classArray: string[] = [\n      'sprk-b-InputContainer',\n      'sprk-b-InputContainer--textarea'\n    ];\n\n    if (this.additionalClasses) {\n      this.additionalClasses.split(' ').forEach(className => {\n        classArray.push(className);\n      });\n    }\n\n    return classArray.join(' ');\n  }\n\n  ngOnInit(): void {\n    if (this.label && this.input) {\n      this.label.ref.nativeElement.setAttribute('for', this.input_id);\n      this.input.ref.nativeElement.id = this.input_id;\n    }\n    if (this.input && this.error) {\n      this.input.ref.nativeElement.setAttribute(\n        'aria-describedby',\n        this.error_id\n      );\n      this.error.ref.nativeElement.id = this.error_id;\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { SprkTextareaContainerComponent } from './sprk-textarea-container.component';\n\n@NgModule({\n  imports: [CommonModule, RouterModule, FormsModule, ReactiveFormsModule],\n  declarations: [SprkTextareaContainerComponent],\n  exports: [SprkTextareaContainerComponent]\n})\nexport class SprkTextareaContainerModule {}\n","import { Component, ContentChild, Input, OnInit } from '@angular/core';\nimport * as _ from 'lodash';\nimport { SprkFieldErrorDirective } from '../../../directives/inputs/sprk-field-error/sprk-field-error.directive';\nimport { SprkInputDirective } from '../../../directives/inputs/sprk-input/sprk-input.directive';\nimport { SprkLabelDirective } from '../../../directives/inputs/sprk-label/sprk-label.directive';\n\n@Component({\n  selector: 'sprk-icon-input-container',\n  template: `\n    <div [ngClass]=\"getClasses()\">\n      <div [ngClass]=\"getIconContainerClasses()\">\n        <ng-content select=\"[sprkLabel]\"></ng-content>\n        <ng-content select=\"[sprk-input-icon]\"></ng-content>\n        <ng-content select=\"[sprkInput]\"></ng-content>\n      </div>\n      <ng-content select=\"sprk-selection-item-container\"></ng-content>\n      <ng-content select=\"[sprkHelperText]\"></ng-content>\n      <ng-content select=\"[sprkFieldError]\"></ng-content>\n    </div>\n  `\n})\nexport class SprkIconInputContainerComponent implements OnInit {\n  /**\n   * Expects a space separated string\n   * of classes to be added to the\n   * component.\n   */\n  @Input()\n  additionalClasses: string;\n  /**\n   * Expects a space separated string\n   * of classes to be added to the\n   * icon container.\n   */\n  @Input()\n  iconContainerClasses: string;\n\n  /**\n   * This component expects a child label element\n   * with the `sprkLabel` directive.\n   */\n  @ContentChild(SprkLabelDirective, { static: true })\n  label: SprkLabelDirective;\n  /**\n   * This component expects a child input element\n   * with the `sprkInput` directive.\n   */\n  @ContentChild(SprkInputDirective, { static: true })\n  input: SprkInputDirective;\n  /**\n   * This component expects a child element\n   * with the `sprkFieldError` directive.\n   */\n  @ContentChild(SprkFieldErrorDirective, { static: true })\n  error: SprkFieldErrorDirective;\n\n  /**\n   * @ignore\n   */\n  id = _.uniqueId();\n  /**\n   * @ignore\n   */\n  input_id = `input_${this.id}`;\n  /**\n   * @ignore\n   */\n  error_id = `error_${this.id}`;\n  /**\n   * @ignore\n   */\n  getIconContainerClasses(): string {\n    const classArray: string[] = ['sprk-b-InputContainer__icon-container'];\n\n    if (this.iconContainerClasses) {\n      this.iconContainerClasses.split(' ').forEach(className => {\n        classArray.push(className);\n      });\n    }\n\n    return classArray.join(' ');\n  }\n\n  /**\n   * @ignore\n   */\n  getClasses(): string {\n    const classArray: string[] = ['sprk-b-InputContainer'];\n\n    if (this.additionalClasses) {\n      this.additionalClasses.split(' ').forEach(className => {\n        classArray.push(className);\n      });\n    }\n\n    return classArray.join(' ');\n  }\n\n  ngOnInit(): void {\n    if (this.label && this.input) {\n      this.label.ref.nativeElement.setAttribute('for', this.input_id);\n      this.input.ref.nativeElement.id = this.input_id;\n    }\n    if (this.input && this.error) {\n      this.input.ref.nativeElement.setAttribute(\n        'aria-describedby',\n        this.error_id\n      );\n      this.error.ref.nativeElement.id = this.error_id;\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { SprkIconInputContainerComponent } from './sprk-icon-input-container.component';\n\n@NgModule({\n  imports: [CommonModule, RouterModule, FormsModule, ReactiveFormsModule],\n  declarations: [SprkIconInputContainerComponent],\n  exports: [SprkIconInputContainerComponent]\n})\nexport class SprkIconInputContainerModule {}\n","import { Component, ContentChild, Input, OnInit, Renderer2 } from '@angular/core';\nimport uniqueId from 'lodash/uniqueId';\nimport { SprkSelectionInputDirective } from '../../../directives/inputs/sprk-selection-input/sprk-selection-input.directive';\nimport { SprkSelectionLabelDirective } from '../../../directives/inputs/sprk-selection-label/sprk-selection-label.directive';\n\n@Component({\n  selector: 'sprk-selection-item-container',\n  template: `\n    <div [ngClass]=\"getClasses()\">\n      <ng-content select=\"[sprkSelectionInput]\"></ng-content>\n      <ng-content select=\"[sprkSelectionLabel]\"></ng-content>\n      <ng-content></ng-content>\n    </div>\n  `\n})\nexport class SprkSelectionItemContainerComponent implements OnInit {\n  constructor( private renderer: Renderer2) {}\n  /**\n   * Expects a space separated string\n   * of classes to be added to the\n   * component.\n   */\n  @Input()\n  additionalClasses: string;\n\n  /**\n   * This component expects a child label element\n   * with the `sprkSelectionLabel` directive.\n   */\n  @ContentChild(SprkSelectionLabelDirective, { static: true })\n  label: SprkSelectionLabelDirective;\n  /**\n   * This component expects a child selection input\n   * with the `sprkSelectionInput` directive.\n   */\n  @ContentChild(SprkSelectionInputDirective, { static: true })\n  input: SprkSelectionInputDirective;\n\n  /**\n   * @ignore\n   */\n  getClasses(): string {\n    const classArray: string[] = ['sprk-b-SelectionContainer'];\n\n    if (this.additionalClasses) {\n      this.additionalClasses.split(' ').forEach(className => {\n        classArray.push(className);\n      });\n    }\n\n    return classArray.join(' ');\n  }\n\n  /**\n   * @ignore\n   */\n  addInputTypeClasses(): void {\n    const inputType = this.input.ref.nativeElement.type;\n    if (inputType === 'checkbox') {\n      this.renderer.addClass(this.input.ref.nativeElement, 'sprk-b-Checkbox__input');\n      this.renderer.addClass(this.label.ref.nativeElement, 'sprk-b-Checkbox__label');\n    }\n    if (inputType === 'radio') {\n      this.renderer.addClass(this.input.ref.nativeElement, 'sprk-b-Radio__input');\n      this.renderer.addClass(this.label.ref.nativeElement, 'sprk-b-Radio__label');\n    }\n  }\n\n  /**\n   * @ignore\n   */\n  generateIdForInput(): void {\n    let inputId = this.input.ref.nativeElement.id;\n    const labelFor = this.label.ref.nativeElement.htmlFor;\n\n    // Warn if 'for' exists but the 'id' does not\n    if (labelFor && !inputId) {\n      console.warn(`Spark Design System Warning - The value of 'for' (${labelFor}) on the label expects a matching 'id' on the input.`);\n      return;\n    }\n\n    // Warn if 'for' and 'id' both exist but don't match\n    if (inputId && labelFor && inputId !== labelFor) {\n      console.warn(\n        `Spark Design System Warning - The value of 'for' (${labelFor}) on the label should match the 'id' on the input (${inputId}).`\n      );\n      return;\n    }\n\n    // If we don't have a valid id, generate one with lodash\n    if (!inputId) {\n      inputId = uniqueId(`sprk_input_`);\n      this.renderer.setProperty(this.input.ref.nativeElement, 'id', inputId);\n      this.renderer.setAttribute(this.label.ref.nativeElement, 'for', inputId);\n    }\n  }\n\n  ngOnInit(): void {\n    if (this.label && this.input) {\n      this.generateIdForInput();\n      this.addInputTypeClasses();\n    }\n  }\n}\n","import {\n  AfterContentInit,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Input,\n  QueryList\n} from '@angular/core';\nimport * as _ from 'lodash';\nimport { SprkFieldErrorDirective } from '../../../directives/inputs/sprk-field-error/sprk-field-error.directive';\nimport { SprkLabelDirective } from '../../../directives/inputs/sprk-label/sprk-label.directive';\nimport { SprkSelectionItemContainerComponent } from '../sprk-selection-item-container/sprk-selection-item-container.component';\n\n@Component({\n  selector: 'sprk-selection-container',\n  template: `\n    <div [ngClass]=\"getClasses()\">\n      <fieldset class=\"sprk-b-Fieldset\">\n        <legend class=\"sprk-b-Legend\">\n          <ng-content select=\"[sprkLabel]\"></ng-content>\n        </legend>\n        <ng-content select=\"sprk-selection-item-container\"></ng-content>\n      </fieldset>\n      <ng-content select=\"[sprkHelperText]\"></ng-content>\n      <ng-content select=\"[sprkFieldError]\"></ng-content>\n      <ng-content></ng-content>\n    </div>\n  `\n})\nexport class SprkSelectionContainerComponent implements AfterContentInit {\n  /**\n   * Expects a space separated string\n   * of classes to be added to the\n   * component.\n   */\n  @Input()\n  additionalClasses: string;\n\n  /**\n   * This component expects a child label element\n   * with the `sprkLabel` directive.\n   */\n  @ContentChild(SprkLabelDirective, { static: false })\n  label: SprkLabelDirective;\n  /**\n   * This component expects a child element\n   * with the `sprkFieldError` directive.\n   */\n  @ContentChild(SprkFieldErrorDirective, { static: false })\n  error: SprkFieldErrorDirective;\n  /**\n   * This component expects a child\n   * `<sprk-selection-item-container>` component.\n   */\n  @ContentChildren(SprkSelectionItemContainerComponent)\n  selectionItems: QueryList<SprkSelectionItemContainerComponent>;\n\n  /**\n   * @ignore\n   */\n  id = _.uniqueId();\n  /**\n   * @ignore\n   */\n  error_id = `error_${this.id}`;\n\n  /**\n   * @ignore\n   */\n  getClasses(): string {\n    const classArray: string[] = ['sprk-b-InputContainer'];\n\n    if (this.additionalClasses) {\n      this.additionalClasses.split(' ').forEach(className => {\n        classArray.push(className);\n      });\n    }\n\n    return classArray.join(' ');\n  }\n  /**\n   * @ignore\n   */\n  ngAfterContentInit(): void {\n    if (this.selectionItems && this.error) {\n      this.selectionItems.forEach(item => {\n        item.input.ref.nativeElement.setAttribute(\n          'aria-describedby',\n          this.error_id\n        );\n      });\n      this.error.ref.nativeElement.id = this.error_id;\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { SprkSelectionContainerComponent } from './sprk-selection-container.component';\n\n@NgModule({\n  imports: [CommonModule, RouterModule, FormsModule, ReactiveFormsModule],\n  declarations: [SprkSelectionContainerComponent],\n  exports: [SprkSelectionContainerComponent]\n})\nexport class SprkSelectionContainerModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { SprkSelectionItemContainerComponent } from './sprk-selection-item-container.component';\n\n@NgModule({\n  imports: [CommonModule, RouterModule, FormsModule, ReactiveFormsModule],\n  declarations: [SprkSelectionItemContainerComponent],\n  exports: [SprkSelectionItemContainerComponent]\n})\nexport class SprkSelectionItemContainerModule {}\n","import { Component, Input } from '@angular/core';\n\n@Component({\n  selector: 'sprk-icon',\n  template: `\n    <svg [ngClass]=\"getClasses()\" viewBox=\"0 0 64 64\" [attr.data-id]=\"idString\">\n      <use [attr.xlink:href]=\"icon\" />\n    </svg>\n  `,\n  styles: [':host { line-height: 1; }']\n})\nexport class SprkIconComponent {\n  /**\n   * Determines which icon is rendered.\n   * Expects the value to match the exact name\n   * of the icon found in the docs\n   * (i.e. `chevron-down`, instead of `chevron down`).\n   */\n  @Input()\n  iconType: string;\n  /**\n   * Expects a space separated string\n   * of classes to be added to the\n   * component.\n   */\n  @Input()\n  additionalClasses: string;\n  /**\n   * The value supplied will be assigned\n   * to the `data-id` attribute on the\n   * component. This is intended to be\n   * used as a selector for automated\n   * tools. This value should be unique\n   * per page.\n   */\n  @Input()\n  idString: string;\n\n  /**\n   * @ignore\n   */\n  public icon: string;\n\n  /**\n   * @ignore\n   */\n  getClasses(): string {\n    const classArray: string[] = ['sprk-c-Icon'];\n\n    this.icon = `#${this.iconType}`;\n\n    if (this.additionalClasses) {\n      this.additionalClasses.split(' ').forEach(className => {\n        classArray.push(className);\n      });\n    }\n\n    return classArray.join(' ');\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { SprkIconComponent } from './sprk-icon.component';\n\n@NgModule({\n  imports: [CommonModule, RouterModule],\n  declarations: [SprkIconComponent],\n  exports: [SprkIconComponent]\n})\nexport class SprkIconModule {}\n","import {\n  Directive,\n  Input,\n  HostBinding,\n  Renderer2,\n  ElementRef,\n  OnInit\n} from '@angular/core';\n\n@Directive({\n  selector: '[sprkLink]'\n})\nexport class SprkLinkDirective implements OnInit {\n  /**\n   * @ignore\n   */\n  constructor(private renderer: Renderer2, private el: ElementRef) { }\n  /**\n   * Will cause the appropriate variant type to render.\n   * If omitted, the default Spark Link class is applied.\n   */\n  @Input() variant:\n    | 'simple'\n    | 'icon'\n    | 'unstyled'\n    | 'plain';\n\n  /**\n   * If `true`, will set disabled styles on the link.\n   */\n  @HostBinding('class.sprk-b-Link--disabled')\n  @Input() isDisabled: boolean;\n  /**\n   * The value supplied will be assigned to the\n   * `data-analytics` attribute on the element.\n   * Intended for an outside\n   * library to capture data.\n   */\n  @HostBinding('attr.data-analytics')\n  @Input() analyticsString: string;\n  /**\n   * The value supplied will be assigned\n   * to the `data-id` attribute on the\n   * component. This is intended to be\n   * used as a selector for automated\n   * tools. This value should be unique\n   * per page.\n   */\n  @HostBinding('attr.data-id')\n  @Input() idString: string;\n\n  ngOnInit() {\n    if (this.variant !== 'unstyled') {\n      this.renderer.addClass(this.el.nativeElement, 'sprk-b-Link');\n    }\n    if (this.variant === 'simple' || this.variant === 'icon') {\n      this.renderer.addClass(this.el.nativeElement, 'sprk-b-Link--simple');\n    }\n    if (this.variant === 'icon') {\n      this.renderer.addClass(this.el.nativeElement, 'sprk-b-Link--has-icon');\n    }\n    if (this.variant === 'plain') {\n      this.renderer.addClass(this.el.nativeElement, 'sprk-b-Link--plain');\n    }\n  }\n\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { SprkLinkDirective } from './sprk-link.directive';\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [SprkLinkDirective],\n  exports: [SprkLinkDirective]\n})\nexport class SprkLinkDirectiveModule {}\n","import {\n  trigger,\n  state,\n  style,\n  animate,\n  transition,\n  AnimationTriggerMetadata\n} from '@angular/animations';\n\nexport const toggleAnimations: {\n  readonly toggleContent: AnimationTriggerMetadata;\n} = {\n  toggleContent: trigger('toggleContent', [\n    state(\n      'closed',\n      style({\n        height: '0',\n        overflow: 'hidden',\n        visibility: 'hidden',\n      })\n    ),\n    state(\n      'open',\n      style({\n        height: '*',\n        visibility: 'visible',\n      })\n    ),\n    transition('open <=> closed', animate('300ms ease-in'))\n  ])\n};\n","import { Component, Input, OnInit } from '@angular/core';\nimport * as _ from 'lodash';\nimport { toggleAnimations } from '../sprk-toggle/sprk-toggle-animations';\n\n@Component({\n  selector: 'sprk-accordion-item',\n  template: `\n    <li [ngClass]=\"getClasses()\">\n      <button\n        sprkLink\n        variant=\"unstyled\"\n        href=\"#\"\n        [attr.aria-controls]=\"accordion_controls_id\"\n        [attr.aria-expanded]=\"isOpen\"\n        class=\"sprk-c-Accordion__summary\"\n        [analyticsString]=\"analyticsString\"\n        [idString]=\"idString\"\n        (click)=\"toggleAccordion($event)\"\n      >\n        <span [ngClass]=\"getHeadingClasses()\">\n          <sprk-icon\n            [iconType]=\"leadingIcon\"\n            additionalClasses=\"sprk-c-Icon--stroke-current-color sprk-c-Icon--l sprk-u-mrs\"\n            *ngIf=\"leadingIcon\"\n          ></sprk-icon>\n          {{ title }}\n        </span>\n\n        <sprk-icon\n          additionalClasses=\"sprk-c-Accordion__icon sprk-c-Icon--toggle sprk-c-Icon--l {{\n            iconStateClass\n          }}\"\n          [iconType]=\"currentIconType\"\n        ></sprk-icon>\n      </button>\n\n      <div [@toggleContent]=\"animState\">\n        <div\n          [id]=\"accordion_controls_id\"\n          class=\"sprk-c-Accordion__content sprk-b-TypeBodyTwo\"\n        >\n          <ng-content></ng-content>\n        </div>\n      </div>\n    </li>\n  `,\n  animations: [toggleAnimations.toggleContent]\n})\nexport class SprkAccordionItemComponent implements OnInit {\n  /**\n   * The value supplied will be rendered\n   * inside the title area of the Accordion item.\n   */\n  @Input()\n  title: string;\n  /**\n   * The value supplied will be assigned to the\n   * `data-analytics` attribute on the component.\n   * Intended for an outside\n   * library to capture data.\n   */\n  @Input()\n  analyticsString: string;\n  /**\n   * The value supplied will be assigned\n   * to the `data-id` attribute on the\n   * component. This is intended to be\n   * used as a selector for automated\n   * tools. This value should be unique\n   * per page.\n   */\n  @Input()\n  idString: string;\n  /**\n   * Expects a space separated string\n   * of classes to be added to the\n   * component.\n   */\n  @Input()\n  additionalClasses: string;\n  /**\n   * Expects a space separated string\n   * of classes to be added to the\n   * heading in the Accordion item.\n   */\n  @Input()\n  additionalHeadingClasses: string;\n  /**\n   * The Accordion item will use this to decide\n   * if it should be open or closed on first render.\n   * (Interacting with the toggle will override this input.)\n   */\n  @Input()\n  isOpen = false;\n  /**\n   * If `true`, the active CSS class\n   * will be applied to the item.\n   */\n  @Input()\n  isActive: boolean;\n  /**\n   * The name of the icon to use for\n   * a closed Accordion item.\n   */\n  @Input()\n  iconTypeClosed = 'chevron-up-circle-two-color';\n  /**\n   * The name of the icon to use for\n   * an open Accordion item.\n   */\n  @Input()\n  iconTypeOpen = 'chevron-up-circle-two-color';\n  /**\n   * The name of the icon to use before\n   * the title in the Accordion item.\n   * This is optional.\n   */\n  @Input()\n  leadingIcon: string;\n\n  /**\n   * @ignore\n   */\n  componentID = _.uniqueId();\n  /**\n   * @ignore\n   */\n  accordion_controls_id = `accordionHeading__${this.componentID}`;\n  /**\n   * @ignore\n   */\n  public currentIconType = this.iconTypeClosed;\n  /**\n   * @ignore\n   */\n  public iconStateClass = '';\n  /**\n   * @ignore\n   */\n  public animState = 'closed';\n\n  /**\n   * @ignore\n   */\n  accordionState(): void {\n    this.isOpen === false\n      ? (this.animState = 'closed')\n      : (this.animState = 'open');\n\n    this.isOpen === false\n      ? (this.currentIconType = this.iconTypeClosed)\n      : (this.currentIconType = this.iconTypeOpen);\n\n    this.isOpen === false\n      ? (this.iconStateClass = '')\n      : (this.iconStateClass = 'sprk-c-Icon--open');\n  }\n\n  /**\n   * @ignore\n   */\n  toggleAccordion(event): void {\n    event.preventDefault();\n    this.isOpen = !this.isOpen;\n    this.accordionState();\n  }\n\n  /**\n   * @ignore\n   */\n  getClasses(): string {\n    const classArray: string[] = [\n      'sprk-c-Accordion__item',\n      'sprk-u-Overflow--hidden'\n    ];\n\n    if (this.isOpen) {\n      classArray.push('sprk-c-Accordion__item--open');\n    }\n\n    if (this.isActive) {\n      classArray.push('sprk-c-Accordion__item--active');\n    }\n\n    if (this.additionalClasses) {\n      this.additionalClasses.split(' ').forEach(className => {\n        classArray.push(className);\n      });\n    }\n\n    return classArray.join(' ');\n  }\n\n  /**\n   * @ignore\n   */\n  getHeadingClasses(): string {\n    const classArray: string[] = ['sprk-c-Accordion__heading'];\n\n    if (this.additionalHeadingClasses) {\n      this.additionalHeadingClasses.split(' ').forEach(className => {\n        classArray.push(className);\n      });\n    }\n\n    return classArray.join(' ');\n  }\n\n  ngOnInit() {\n    this.accordionState();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { SprkIconModule } from '../sprk-icon/sprk-icon.module';\nimport { SprkLinkDirectiveModule } from '../../directives/sprk-link/sprk-link.module';\nimport { SprkAccordionItemComponent } from './sprk-accordion-item.component';\n\n@NgModule({\n  imports: [CommonModule, SprkIconModule, SprkLinkDirectiveModule],\n  declarations: [SprkAccordionItemComponent],\n  exports: [SprkAccordionItemComponent]\n})\nexport class SprkAccordionItemModule {}\n","import { Component, Input, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\n@Component({\n  selector: 'sprk-link',\n  template: `\n    <a\n      (click)=\"handleClick($event)\"\n      [ngClass]=\"getClasses()\"\n      [href]=\"href\"\n      [attr.data-analytics]=\"analyticsString\"\n      [attr.target]=\"target\"\n      [attr.data-id]=\"idString\"\n      [attr.disabled]=\"isDisabled\"\n      [attr.aria-controls]=\"ariaControls\"\n      [attr.aria-label]=\"ariaLabel\"\n      [attr.aria-labelledby]=\"ariaLabelledby\"\n      [attr.aria-haspopup]=\"ariaHasPopUp\"\n      [attr.role]=\"role\"\n      [attr.id]=\"id\"\n      [attr.aria-current]=\"ariaCurrent\"\n      [attr.aria-expanded]=\"ariaExpanded\"\n      [attr.aria-hidden]=\"ariaHidden\"\n      [attr.aria-selected]=\"ariaSelected\"\n    >\n      <ng-content></ng-content>\n    </a>\n  `\n})\n/**\n * @deprecate This component will be removed in\n * a future release in favor of the `sprkLink` directive.\n * Please use the Spark Link\n * directive.\n */\nexport class SprkLinkComponent implements OnInit {\n  /**\n   * @ignore\n   */\n  constructor(public router: Router) {}\n\n  /**\n   * Will cause the appropriate variant type to render.\n   * Optional values are: `simple`, `icon`, `unstyled` or `plain`.\n   * If omitted, the default Spark Link class is applied.\n   * The `unstyled` variant will render an `href` with no\n   * CSS classes.\n   */\n  @Input()\n  linkType: string;\n  /**\n   * The `href` value of the link. If omitted,\n   * the href will be set to `#`\n   * and the routing will be disabled. If\n   * set to reference an ID then the page\n   * will scroll to that anchor as normal.\n   */\n  @Input()\n  href: string;\n  /**\n   * The value supplied will be assigned\n   * to the `data-id` attribute on the\n   * component. This is intended to be\n   * used as a selector for automated\n   * tools. This value should be unique\n   * per page.\n   */\n  @Input()\n  idString: string;\n  /**\n   * Value for the `role`\n   * attribute of the link.\n   */\n  @Input()\n  role: string;\n  /**\n   * The string that will be\n   * assigned to the `id` attribute of\n   * the link.\n   */\n  @Input()\n  id: string;\n  /**\n   * Expects a value to assign to the\n   * `aria-controls` attribute of the link.\n   */\n  @Input()\n  ariaControls: string;\n  /**\n   * Expects a value to assign to\n   * the `aria-labelledby` attribute of the link.\n   */\n  @Input()\n  ariaLabelledby: string;\n  /**\n   * Expects a value to assign to\n   * the `aria-selected` attribute of the link.\n   */\n  @Input()\n  ariaSelected: string;\n  /**\n   * Expects a value to assign to\n   * the `aria-hidden` attribute of the link.\n   */\n  @Input()\n  ariaHidden: string;\n  /**\n   * Expects a value to assign\n   * to the `aria-curren`t attribute of the link.\n   */\n  @Input()\n  ariaCurrent: string;\n  /**\n   * Expects a value to assign to\n   * the `aria-expanded `attribute of the link.\n   */\n  @Input()\n  ariaExpanded: string;\n  /**\n   * Expects a value to assign\n   * to the `aria-haspopup` attribute of the link.\n   */\n  @Input()\n  ariaHasPopUp: string;\n  /**\n   * Expects a value to assign to\n   * the `aria-label` attribute of the link.\n   */\n  @Input()\n  ariaLabel: string;\n  /**\n   * The value supplied will be assigned to the\n   * `data-analytics` attribute on the component.\n   * Intended for an outside\n   * library to capture data.\n   */\n  @Input()\n  analyticsString: string;\n  /**\n   * Expects a value to assign to\n   * the `target` attribute of the link.\n   */\n  @Input()\n  target: string;\n  /**\n   * Expects a space separated string\n   * of classes to be added to the\n   * component.\n   */\n  @Input()\n  additionalClasses: string;\n  /**\n   * If `true`, will set disabled styles on the link.\n   */\n  @Input()\n  isDisabled: boolean;\n  /**\n   * By default, the component determines if\n   * the `href` is an external or internal link\n   * by looking for the `:` character in the\n   * `href` string. If external link functionality\n   * is desired with an `href` value that contains\n   * a `:` set this input to true. This overrides\n   * the default and avoids using the Angular Router.\n   */\n  @Input()\n  isExternal = false;\n\n  ngOnInit() {\n\n    // This message is split up like this so that we can keep the line\n    // length down in the editor while also logging a single unformatted\n    // line of text in the console.\n    const message = 'Spark Design System Warning: Spark Link has been ' +\n    'refactored to be an Angular Directive. The old Angular Component ' +\n    'version has been deprecated. This version will be permanently removed ' +\n    'from Spark in our Summer 2020 release. To update to the new version, ' +\n    'replace any instance of the <sprk-link> component in your codebase with ' +\n    'the new Directive syntax.';\n\n    console.warn(message);\n\n    // Sets the default href if none provided\n    if (this.href === '' || this.href === null || this.href === undefined) {\n      this.href = '#';\n      return;\n    }\n    // Build jump link's href\n    if (this.isJumpLink(this.href)) {\n      this.href = `${this.getPathWithoutHash(this.router.url)}${this.href}`;\n    }\n  }\n  /**\n   * @ignore\n   */\n  isExternalLink(value): boolean {\n    return new RegExp('^.*:', 'i').test(value);\n  }\n  /**\n   * @ignore\n   */\n  isJumpLinkWithPage(value): boolean {\n    return new RegExp('^.*#.+', 'i').test(value);\n  }\n  /**\n   * @ignore\n   */\n  isJumpLink(value): boolean {\n    return new RegExp('^#.+', 'i').test(value);\n  }\n  /**\n   * @ignore\n   */\n  isNoActionLink(value): boolean {\n    return value === '#';\n  }\n  /**\n   * @ignore\n   */\n  getPathWithoutHash(value): string {\n    return value.split('#')[0];\n  }\n  /**\n   * @ignore\n   */\n  scrollToId() {\n    const elementID = this.href.split('#').pop();\n    const element: HTMLElement = document.getElementById(elementID);\n    if (element) {\n      element.scrollIntoView();\n    }\n  }\n  /**\n   * @ignore\n   */\n  handleClick(event): void {\n    // Let browser handle route if external Link\n    if (this.isExternalLink(this.href) || this.isExternal) {\n      return;\n    }\n\n    event.preventDefault();\n\n    // Prevent default and return\n    if (this.isNoActionLink(this.href)) {\n      return;\n    } else if (this.isJumpLinkWithPage(this.href)) {\n      if (\n        this.getPathWithoutHash(this.href) ===\n        this.getPathWithoutHash(this.router.url)\n      ) {\n        this.scrollToId();\n      } else {\n        this.router.navigateByUrl(this.href);\n      }\n    } else {\n      this.router.navigateByUrl(this.href);\n    }\n  }\n\n  /**\n   * @ignore\n   */\n  getClasses(): string {\n    const classArray: string[] = [];\n\n    switch (this.linkType) {\n      case 'unstyled':\n        break;\n      case 'simple':\n        classArray.push('sprk-b-Link sprk-b-Link--simple');\n        break;\n      case 'plain':\n        classArray.push('sprk-b-Link sprk-b-Link--plain');\n        break;\n      case 'icon':\n        classArray.push(\n          'sprk-b-Link sprk-b-Link--simple sprk-b-Link--has-icon'\n        );\n        break;\n      default:\n        classArray.push('sprk-b-Link');\n        break;\n    }\n\n    if (this.isDisabled) {\n      classArray.push('sprk-b-Link--disabled');\n    }\n\n    if (this.additionalClasses) {\n      this.additionalClasses.split(' ').forEach(className => {\n        classArray.push(className);\n      });\n    }\n\n    return classArray.join(' ');\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { SprkLinkComponent } from './sprk-link.component';\n\n@NgModule({\n  imports: [CommonModule, RouterModule],\n  declarations: [SprkLinkComponent],\n  exports: [SprkLinkComponent]\n})\nexport class SprkLinkModule {}\n","import { Component, Input } from '@angular/core';\n\n@Component({\n  selector: 'sprk-accordion',\n  template: `\n    <ul [ngClass]=\"getClasses()\">\n      <ng-content></ng-content>\n    </ul>\n  `\n})\nexport class SprkAccordionComponent {\n  /**\n   * Expects a space separated string\n   * of classes to be added to the\n   * component.\n   */\n  @Input()\n  additionalClasses: string;\n\n  /**\n   * @ignore\n   */\n  getClasses(): string {\n    const classArray: string[] = ['sprk-c-Accordion', 'sprk-o-VerticalList'];\n\n    if (this.additionalClasses) {\n      this.additionalClasses.split(' ').forEach(className => {\n        classArray.push(className);\n      });\n    }\n\n    return classArray.join(' ');\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { SprkIconModule } from '../sprk-icon/sprk-icon.module';\nimport { SprkLinkModule } from '../sprk-link/sprk-link.module';\nimport { SprkAccordionComponent } from './sprk-accordion.component';\n\n@NgModule({\n  imports: [CommonModule, RouterModule, SprkIconModule, SprkLinkModule],\n  declarations: [SprkAccordionComponent],\n  exports: [SprkAccordionComponent]\n})\nexport class SprkAccordionModule {}\n","import { Component, Input } from '@angular/core';\n\n@Component({\n  selector: 'sprk-alert',\n  template: `\n    <div\n      *ngIf=\"visible\"\n      [ngClass]=\"getClassesAlertContainer()\"\n      role=\"alert\"\n      [attr.data-analytics]=\"analyticsString\"\n      [attr.data-id]=\"idString\"\n    >\n      <div class=\"sprk-c-Alert__content\">\n        <sprk-icon\n          iconType=\"{{ icon }}\"\n          additionalClasses=\"sprk-c-Alert__icon sprk-c-Icon--l sprk-c-Icon--stroke-current-color\"\n          aria-hidden=\"true\"\n        ></sprk-icon>\n\n        <p class=\"sprk-c-Alert__text\"><ng-content></ng-content></p>\n      </div>\n\n      <button\n        *ngIf=\"dismissible !== false\"\n        class=\"sprk-c-Alert__icon sprk-c-Alert__icon--dismiss\"\n        type=\"button\"\n        title=\"Dismiss\"\n        (click)=\"alertDismiss($event)\"\n      >\n        <sprk-icon\n          iconType=\"close\"\n          additionalClasses=\"sprk-c-Icon--stroke-current-color\"\n          aria-hidden=\"true\"\n        ></sprk-icon>\n      </button>\n    </div>\n  `\n})\nexport class SprkAlertComponent {\n  /**\n   * The type of Alert variant to render.\n   * \tCan be `info`, `fail`, or `success`.\n   */\n  @Input()\n  alertType: string;\n  /**\n   * The value supplied will be assigned to the\n   * `data-analytics` attribute on the component.\n   * Intended for an outside\n   * library to capture data.\n   */\n  @Input()\n  analyticsString: string;\n  /**\n   * The value supplied will be assigned\n   * to the `data-id` attribute on the\n   * component. This is intended to be\n   * used as a selector for automated\n   * tools. This value should be unique\n   * per page.\n   */\n  @Input()\n  idString: string;\n  /**\n   * Expects a space separated string\n   * of classes to be added to the\n   * component.\n   */\n  @Input()\n  additionalClasses: string;\n  /**\n   * If `false`, the dismiss button will not be rendered and\n   * the Alert will not dismissible.\n   * If `true`, the dismiss button will be rendered and\n   * the Alert will be dismissible.\n   */\n  @Input()\n  dismissible: boolean;\n\n  /**\n   * @ignore\n   */\n  public icon: string;\n  /**\n   * @ignore\n   */\n  public visible = true;\n\n  /**\n   * @ignore\n   */\n  getClassesAlertContainer(): string {\n    const alertClassArray: string[] = ['sprk-c-Alert'];\n\n    switch (this.alertType) {\n      case 'success':\n        alertClassArray.push('sprk-c-Alert--success');\n        this.icon = 'check-mark';\n        break;\n      case 'info':\n        alertClassArray.push('sprk-c-Alert--info');\n        this.icon = 'bell';\n        break;\n      case 'fail':\n        alertClassArray.push('sprk-c-Alert--fail');\n        this.icon = 'exclamation';\n        break;\n      default:\n        break;\n    }\n\n    if (this.additionalClasses) {\n      this.additionalClasses.split(' ').forEach(className => {\n        alertClassArray.push(className);\n      });\n    }\n\n    return alertClassArray.join(' ');\n  }\n\n  /**\n   * When the dismiss button is clicked\n   * this method sets the visable state to `false`\n   * and hides the Alert component.\n   */\n  alertDismiss(event): void {\n    this.visible = false;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { SprkIconModule } from '../sprk-icon/sprk-icon.module';\nimport { SprkAlertComponent } from './sprk-alert.component';\n\n@NgModule({\n  imports: [CommonModule, RouterModule, SprkIconModule],\n  declarations: [SprkAlertComponent],\n  exports: [SprkAlertComponent]\n})\nexport class SprkAlertModule {}\n","import { Component, Input } from '@angular/core';\n\n@Component({\n  selector: 'sprk-divider',\n  template: `\n    <span [ngClass]=\"getClasses()\" [attr.data-id]=\"idString\"> </span>\n  `\n})\nexport class SprkDividerComponent {\n  /**\n   * Expects a space separated string\n   * of classes to be added to the\n   * component.\n   */\n  @Input()\n  additionalClasses: string;\n  /**\n   * The value supplied will be assigned\n   * to the `data-id` attribute on the\n   * component. This is intended to be\n   * used as a selector for automated\n   * tools. This value should be unique\n   * per page.\n   */\n  @Input()\n  idString: string;\n\n  /**\n   * @ignore\n   */\n  getClasses(): string {\n    const classArray: string[] = ['sprk-c-Divider'];\n\n    if (this.additionalClasses) {\n      this.additionalClasses.split(' ').forEach(className => {\n        classArray.push(className);\n      });\n    }\n\n    return classArray.join(' ');\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { SprkDividerComponent } from './sprk-divider.component';\n\n@NgModule({\n  imports: [CommonModule, RouterModule],\n  declarations: [SprkDividerComponent],\n  exports: [SprkDividerComponent]\n})\nexport class SprkDividerModule {}\n","import {\n  Component,\n  Input,\n  Output,\n  ElementRef,\n  HostListener,\n  EventEmitter\n} from '@angular/core';\nimport { ISprkDropdownChoice } from './sprk-dropdown.interfaces';\n\n@Component({\n  selector: 'sprk-dropdown',\n  template: `\n    <div\n      [ngClass]=\"{\n        'sprk-c-MastheadMask': isOpen && dropdownType === 'mastheadSelector'\n      }\"\n    >\n      <div [ngClass]=\"{ 'sprk-o-Box': dropdownType === 'mastheadSelector' }\">\n        <a\n          sprkLink\n          [ngClass]=\"getTriggerClasses()\"\n          (click)=\"toggle($event)\"\n          [idString]=\"idString\"\n          [analyticsString]=\"analyticsString\"\n          aria-haspopup=\"listbox\"\n          href=\"#\"\n          [attr.aria-label]=\"triggerText ? triggerText : (screenReaderText || 'Choose One')\"\n        >\n          <span [ngClass]=\"getTriggerTextClasses()\">{{ triggerText }}</span>\n          <span class=\"sprk-u-ScreenReaderText\">{{ screenReaderText }}</span>\n          <sprk-icon\n            [iconType]=\"triggerIconType\"\n            additionalClasses=\"sprk-u-mls sprk-c-Icon--stroke-current-color {{\n              additionalIconClasses\n            }}\"\n          ></sprk-icon>\n        </a>\n      </div>\n\n      <div [ngClass]=\"getClasses()\" *ngIf=\"isOpen\">\n        <div\n          class=\"sprk-c-Dropdown__header\"\n          *ngIf=\"dropdownType === 'mastheadSelector' || title || selector\"\n        >\n          <h2 class=\"sprk-c-Dropdown__title sprk-b-TypeBodyTwo\" *ngIf=\"title\">\n            {{ title }}\n          </h2>\n\n          <a\n            sprkLink\n            *ngIf=\"selector && !title\"\n            variant=\"plain\"\n            class=\"sprk-o-Stack sprk-o-Stack--split@xxs sprk-o-Stack--center-column sprk-u-Width-100\"\n            (click)=\"toggle($event)\"\n            [attr.aria-label]=\"title\"\n            href=\"#\"\n          >\n            <span\n              class=\"sprk-c-Dropdown__title sprk-b-TypeBodyTwo sprk-o-Stack__item sprk-o-Stack__item--flex@xxs\"\n              >{{ selector }}</span\n            >\n            <sprk-icon\n              [iconType]=\"triggerIconType\"\n              additionalClasses=\"sprk-c-Icon--stroke-current-color sprk-u-mls sprk-c-Icon--toggle sprk-Stack__item {{\n                additionalIconClasses\n              }}\"\n            ></sprk-icon>\n          </a>\n        </div>\n\n        <ul\n          class=\"sprk-c-Dropdown__links\"\n          role=\"listbox\"\n          [attr.aria-label]=\"title ? title : (screenReaderText || 'My Choices')\"\n        >\n          <li\n            class=\"sprk-c-Dropdown__item\"\n            *ngFor=\"let choice of choices; let i = index\"\n            [attr.data-sprk-dropdown-choice-index]=\"i\"\n            (click)=\"choiceClick($event)\"\n            [attr.aria-selected]=\"choice.active\"\n            role=\"option\"\n          >\n            <div *ngIf=\"choice.content; then content; else link\"></div>\n            <ng-template #link>\n              <a\n                sprkLink\n                variant=\"unstyled\"\n                [attr.href]=\"choice.href\"\n                [analyticsString]=\"choice.analyticsString\"\n                [ngClass]=\"{\n                  'sprk-c-Dropdown__link': true,\n                  'sprk-c-Dropdown__link--active': choice.active\n                }\"\n                [attr.aria-label]=\"choice.text\"\n                >{{ choice.text }}\n              </a>\n            </ng-template>\n            <ng-template #content>\n              <a\n                sprkLink\n                variant=\"unstyled\"\n                [attr.href]=\"choice.href\"\n                [analyticsString]=\"choice.analyticsString\"\n                [ngClass]=\"{\n                  'sprk-c-Dropdown__link': true,\n                  'sprk-c-Dropdown__link--active': choice.active\n                }\"\n                [attr.aria-label]=\"choice.content.title\"\n              >\n                <p class=\"sprk-b-TypeBodyOne\">{{ choice.content.title }}</p>\n                <p>{{ choice.content.infoLine1 }}</p>\n                <p>{{ choice.content.infoLine2 }}</p>\n              </a>\n            </ng-template>\n          </li>\n        </ul>\n        <ng-content select=\"[sprkDropdownFooter]\"></ng-content>\n      </div>\n    </div>\n  `\n})\nexport class SprkDropdownComponent {\n  /**\n   * The variant of the Dropdown to render.\n   */\n  @Input()\n  dropdownType = 'base';\n  /**\n   * Expects a space separated string\n   * of classes to be added to the\n   * component.\n   */\n  @Input()\n  additionalClasses: string;\n  /**\n   * Expects a space separated string\n   * of classes to be added to the\n   * icon.\n   */\n  @Input()\n  additionalIconClasses: string;\n  /**\n   * Expects a space separated string of\n   * classes to be added to the trigger link element.\n   */\n  @Input()\n  additionalTriggerClasses: string;\n  /**\n   * Expects a space separated string of\n   * classes to be added to the trigger text.\n   */\n  @Input()\n  additionalTriggerTextClasses: string;\n  /**\n   * The value supplied will be assigned\n   * to the `data-id` attribute on the\n   * component. This is intended to be\n   * used as a selector for automated\n   * tools. This value should be unique\n   * per page.\n   */\n  @Input()\n  idString: string;\n  /**\n   * The value supplied will be assigned to the\n   * `data-analytics` attribute on the component.\n   * Intended for an outside\n   * library to capture data.\n   */\n  @Input()\n  analyticsString: string;\n  /**\n   * If `true`, the Dropdown will be open when rendered.\n   */\n  @Input()\n  isOpen = false;\n  /**\n   * The value supplied will be displayed\n   * in a box above the choices.\n   */\n  @Input()\n  title: string;\n  /**\n   * The value supplied will be assigned to\n   * the title text.\n   */\n  @Input()\n  selector: string;\n  /**\n   * Expects an array of\n   * [ISprkDropdownChoice](https://github.com/sparkdesignsystem/spark-design-system/tree/master/src/angular/projects/spark-angular/src/lib/components/sprk-dropdown/sprk-dropdown.interfaces.ts)\n   *  objects.\n   */\n  @Input()\n  choices: ISprkDropdownChoice[];\n  /**\n   * If supplied, will render the icon\n   * to the right of the trigger text.\n   */\n  @Input()\n  triggerIconType: string;\n  /**\n   * The text that is initially rendered to the trigger.\n   * If `dropdownType` is `informational`,\n   * clicking on a choice will change the trigger text.\n   */\n  @Input()\n  triggerText: string;\n  /**\n   * The value supplied will be visually hidden\n   * inside the trigger. Userful\n   * for when title is empty,\n   * and only `triggerIconType` is supplied.\n   */\n  @Input()\n  screenReaderText: string;\n  /**\n   * The event that is\n   * emitted from the Dropdown when a choice\n   * is clicked. The event contains the value\n   * of the choice that was clicked.\n   */\n  @Output()\n  choiceMade: EventEmitter<string> = new EventEmitter();\n  /**\n   * @ignore\n   */\n  constructor(public ref: ElementRef) {}\n  /**\n   * @ignore\n   */\n  toggle(event): void {\n    event.preventDefault();\n    this.isOpen = !this.isOpen;\n  }\n\n  @HostListener('document:click', ['$event'])\n  onClick(event): void {\n    if (\n      !this.ref.nativeElement.contains(event.target) ||\n      event.target.classList.contains('sprk-c-MastheadMask')\n    ) {\n      this.hideDropdown();\n    }\n  }\n\n  @HostListener('document:focusin', ['$event'])\n  onFocusin(event): void {\n    /* istanbul ignore else: angular focus event isnt setting e.target */\n    if (\n      !this.ref.nativeElement.contains(event.target) ||\n      event.target.classList.contains('sprk-c-MastheadMask')\n    ) {\n      this.hideDropdown();\n    }\n  }\n  /**\n   * @ignore\n   */\n  choiceClick(event) {\n    this.clearActiveChoices();\n    const choiceIndex = event.currentTarget.getAttribute(\n      'data-sprk-dropdown-choice-index'\n    );\n    const clickedChoice = this.choices[choiceIndex];\n    if (\n      this.dropdownType === 'informational' ||\n      this.dropdownType === 'mastheadSelector'\n    ) {\n      this.setActiveChoice(event);\n      this.updateTriggerText(event);\n    }\n    this.hideDropdown();\n    this.choiceMade.emit(clickedChoice['value']);\n  }\n  /**\n   * @ignore\n   */\n  setActiveChoice(event): void {\n    const choiceIndex = event.currentTarget.getAttribute(\n      'data-sprk-dropdown-choice-index'\n    );\n    this.choices[choiceIndex]['active'] = true;\n  }\n  /**\n   * @ignore\n   */\n  updateTriggerText(event): void {\n    const choiceIndex = event.currentTarget.getAttribute(\n      'data-sprk-dropdown-choice-index'\n    );\n    this.triggerText = this.choices[choiceIndex]['value'];\n  }\n\n  /**\n   * @ignore\n   */\n  clearActiveChoices(): void {\n    this.choices.forEach((choice: ISprkDropdownChoice) => {\n      choice['active'] = false;\n    });\n  }\n\n  /**\n   * @ignore\n   */\n  hideDropdown(): void {\n    this.isOpen = false;\n  }\n\n  /**\n   * @ignore\n   */\n  getClasses(): string {\n    const classArray: string[] = ['sprk-c-Dropdown'];\n\n    if (this.additionalClasses) {\n      this.additionalClasses.split(' ').forEach(className => {\n        classArray.push(className);\n      });\n    }\n\n    return classArray.join(' ');\n  }\n\n  /**\n   * @ignore\n   */\n  getTriggerClasses(): string {\n    const classArray: string[] = [];\n\n    if (this.additionalTriggerClasses) {\n      this.additionalTriggerClasses.split(' ').forEach(className => {\n        classArray.push(className);\n      });\n    }\n\n    return classArray.join(' ');\n  }\n\n  /**\n   * @ignore\n   */\n  getTriggerTextClasses(): string {\n    const classArray: string[] = [''];\n\n    if (this.additionalTriggerTextClasses) {\n      this.additionalTriggerTextClasses.split(' ').forEach(className => {\n        classArray.push(className);\n      });\n    }\n\n    return classArray.join(' ');\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { SprkIconModule } from '../sprk-icon/sprk-icon.module';\nimport { SprkLinkDirectiveModule } from '../../directives/sprk-link/sprk-link.module';\nimport { SprkDropdownComponent } from './sprk-dropdown.component';\n\n@NgModule({\n  imports: [CommonModule, SprkIconModule, SprkLinkDirectiveModule],\n  declarations: [SprkDropdownComponent],\n  exports: [SprkDropdownComponent]\n})\nexport class SprkDropdownModule {}\n","import { Component, Input } from '@angular/core';\n\n@Component({\n  selector: 'sprk-stack',\n  template: `\n    <div [ngClass]=\"getClasses()\" [attr.data-analytics]=\"analyticsString\">\n      <ng-content></ng-content>\n    </div>\n  `\n})\nexport class SprkStackComponent {\n  /**\n   * The value supplied can be `tiny`, `small`, `medium`, `large`, or `huge`.\n   * This is used as the breakpoint at which the component\n   * moves or \"splits\" to a side by side layout.\n   */\n  @Input()\n  splitAt: string;\n  /**\n   * This is used as the amount of spacing\n   * between the child `sprkStackItem` items.\n   * The value supplied can be `tiny`, `small`, `medium`, `large`, or `huge`.\n   */\n  @Input()\n  itemSpacing: string;\n  /**\n   * The value supplied will be assigned to the\n   * `data-analytics` attribute on the component.\n   * Intended for an outside\n   * library to capture data.\n   */\n  @Input()\n  analyticsString: string;\n  /**\n   * Expects a space separated string\n   * of classes to be added to the\n   * component.\n   */\n  @Input()\n  additionalClasses: string;\n\n  /**\n   * @ignore\n   */\n  getClasses(): string {\n    const classArray: string[] = ['sprk-o-Stack'];\n\n    // Handle the choice of item split breakpoint by adding CSS class\n    switch (this.splitAt) {\n      case 'tiny':\n        classArray.push('sprk-o-Stack--split@xs');\n        break;\n      case 'small':\n        classArray.push('sprk-o-Stack--split@s');\n        break;\n      case 'medium':\n        classArray.push('sprk-o-Stack--split@m');\n        break;\n      case 'large':\n        classArray.push('sprk-o-Stack--split@l');\n        break;\n      case 'huge':\n        classArray.push('sprk-o-Stack--split@xl');\n        break;\n      default:\n        break;\n    }\n\n    // Handle the choice of item spacing by adding CSS class\n    switch (this.itemSpacing) {\n      case 'tiny':\n        classArray.push('sprk-o-Stack--tiny');\n        break;\n      case 'small':\n        classArray.push('sprk-o-Stack--small');\n        break;\n      case 'medium':\n        classArray.push('sprk-o-Stack--medium');\n        break;\n      case 'large':\n        classArray.push('sprk-o-Stack--large');\n        break;\n      case 'huge':\n        classArray.push('sprk-o-Stack--huge');\n        break;\n      default:\n        break;\n    }\n\n    if (this.additionalClasses) {\n      this.additionalClasses.split(' ').forEach(className => {\n        classArray.push(className);\n      });\n    }\n\n    return classArray.join(' ');\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { SprkStackComponent } from './sprk-stack.component';\n\n@NgModule({\n  imports: [CommonModule, RouterModule],\n  declarations: [SprkStackComponent],\n  exports: [SprkStackComponent]\n})\nexport class SprkStackModule {}\n","import { Component, Input, AfterViewInit } from '@angular/core';\nimport { toggleAnimations } from './sprk-toggle-animations';\nimport { uniqueId } from 'lodash';\nimport 'focus-visible';\n\n@Component({\n  selector: 'sprk-toggle',\n  template: `\n    <div\n      class=\"sprk-c-Toggle {{ additionalClasses }}\"\n      [attr.data-id]=\"idString\"\n    >\n      <button\n        variant=\"icon\"\n        [ngClass]=\"getClasses()\"\n        (click)=\"toggle($event)\"\n        [attr.aria-expanded]=\"isOpen ? 'true' : 'false'\"\n        [attr.data-analytics]=\"analyticsString\"\n        [attr.aria-controls]=\"contentId\"\n      >\n        <sprk-icon\n          iconType=\"chevron-down-circle-two-color\"\n          additionalClasses=\"{{\n            iconClass\n          }} sprk-c-Icon--l sprk-u-mrs sprk-c-Icon--toggle {{ iconStateClass }}\"\n        ></sprk-icon>\n        {{ title }}\n      </button>\n\n      <div\n        [@toggleContent]=\"animState\"\n        [id]=\"contentId\"\n      >\n        <div class=\"sprk-u-pts sprk-u-pbs sprk-c-Toggle__content\">\n          <ng-content></ng-content>\n        </div>\n      </div>\n    </div>\n  `,\n  animations: [toggleAnimations.toggleContent]\n})\nexport class SprkToggleComponent implements AfterViewInit {\n\n  /**\n   * The value supplied will be assigned to the\n   * `data-analytics` attribute on the component.\n   * Intended for an outside\n   * library to capture data.\n   */\n  @Input()\n  analyticsString: string;\n  /**\n   * Expects a space separated string\n   * of classes to be added to the\n   * component.\n   */\n  @Input()\n  additionalClasses: string;\n  /**\n   * The value supplied will be\n   * rendered as the main Toggle link text.\n   */\n  @Input()\n  title: string;\n  /**\n   * The value supplied will be assigned as a\n   * CSS class on the icon used in the Toggle.\n   * This is intended for overrides.\n   */\n  @Input()\n  iconClass: string;\n  /**\n   * The value supplied will be assigned as a CSS class\n   * on the clickable title text used in the Toggle.\n   * This is intended for overrides.\n   */\n  @Input()\n  titleFontClass = 'sprk-b-TypeBodyThree';\n  /**\n   * The value supplied will be assigned\n   * to the `data-id` attribute on the\n   * component. This is intended to be\n   * used as a selector for automated\n   * tools. This value should be unique\n   * per page.\n   */\n  @Input()\n  idString: string;\n  /**\n   * A string that is used to set the `id` on the content\n   * and the `aria-controls` for the toggle trigger button.\n   */\n  @Input()\n  contentId = uniqueId(`sprk_toggle_content_`);\n\n  /**\n   * @ignore\n   */\n  public isOpen = false;\n  /**\n   * @ignore\n   */\n  public iconStateClass = '';\n  /**\n   * @ignore\n   */\n  public animState = 'closed';\n\n  /**\n   * @ignore\n   */\n  toggleState(): void {\n    this.isOpen === false\n      ? (this.animState = 'closed')\n      : (this.animState = 'open');\n\n    this.isOpen === false\n      ? (this.iconStateClass = '')\n      : (this.iconStateClass = 'sprk-c-Icon--open');\n  }\n\n  /**\n   * @ignore\n   */\n  toggle(event): void {\n    event.preventDefault();\n    this.isOpen = !this.isOpen;\n    this.toggleState();\n  }\n\n  /**\n   * @ignore\n   */\n  getClasses(): string {\n    const classArray: string[] = [\n      'sprk-c-Toggle__trigger sprk-u-TextCrop--none',\n      this.titleFontClass,\n    ];\n    return classArray.join(' ');\n  }\n\n  ngAfterViewInit() {\n    this.toggleState();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { SprkIconModule } from '../sprk-icon/sprk-icon.module';\nimport { SprkLinkDirectiveModule } from '../../directives/sprk-link/sprk-link.module';\nimport { SprkToggleComponent } from './sprk-toggle.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    SprkIconModule,\n    SprkLinkDirectiveModule\n  ],\n  declarations: [SprkToggleComponent],\n  exports: [SprkToggleComponent]\n})\nexport class SprkToggleModule {}\n","import { Component, Input } from '@angular/core';\nimport {\n  ISprkFooterGlobalLink,\n  ISprkFooterLocalLinkColumn,\n  ISprkFooterSocialLink,\n  ISprkFooterAward,\n  ISprkFooterBadgeLink,\n  ISprkDisclaimerText,\n  ISprkDisclaimerToggle\n} from './sprk-footer.interfaces';\n\n@Component({\n  selector: 'sprk-footer',\n  template: `\n    <div class=\"sprk-o-Box sprk-o-Box--large sprk-u-BackgroundColor--gray\">\n      <footer\n        [ngClass]=\"getClasses()\"\n        role=\"contentinfo\"\n        [attr.data-id]=\"idString\"\n      >\n        <div\n          class=\"sprk-o-Stack__item sprk-o-Stack sprk-o-Stack--medium sprk-o-Stack--split@m\"\n        >\n          <div\n            *ngIf=\"globalLinks\"\n            class=\"sprk-o-Stack__item sprk-o-Stack__item--three-tenths@m sprk-o-Stack sprk-o-Stack--misc-b sprk-o-Box sprk-u-prh\"\n          >\n            <h3 class=\"sprk-o-Stack__item sprk-b-TypeBodyOne\">\n              {{ globalHeading }}\n            </h3>\n\n            <div\n              *ngFor=\"let item of globalLinks\"\n              class=\"sprk-o-Stack__item sprk-o-Stack sprk-o-Stack--medium\"\n            >\n              <div class=\"sprk-o-Stack__item\">\n                <a\n                  sprkLink\n                  variant=\"plain\"\n                  href=\"{{ item.href }}\"\n                  analyticsString=\"{{ item.analytics || item.analyticsString }}\"\n                >\n                  <sprk-icon\n                    *ngIf=\"item.icon\"\n                    iconType=\"{{ item.icon }}\"\n                    additionalClasses=\"{{ item.iconCSS }}\"\n                  ></sprk-icon>\n                  <span *ngIf=\"item.icon\" class=\"sprk-u-ScreenReaderText\">{{\n                    item.iconScreenReaderText\n                  }}</span>\n                  <img\n                    *ngIf=\"item.imgSrc\"\n                    src=\"{{ item.imgSrc }}\"\n                    alt=\"{{ item.imgAlt }}\"\n                    class=\"{{ item.imgCSS }}\"\n                  />\n                </a>\n              </div>\n\n              <p class=\"sprk-o-Stack__item sprk-b-TypeBodyFour\">\n                {{ item.text }}\n              </p>\n            </div>\n          </div>\n\n          <div\n            class=\"sprk-o-Stack__item sprk-o-Stack__item--seven-tenths@m sprk-o-Stack sprk-o-Stack--medium\"\n          >\n            <div\n              *ngIf=\"localLinks\"\n              class=\"sprk-o-Stack__item sprk-o-Stack sprk-o-Stack--medium sprk-o-Stack--split@m\"\n            >\n              <div\n                *ngFor=\"let item of localLinks\"\n                class=\"sprk-o-Stack__item sprk-o-Stack__item--third@m sprk-o-Box sprk-u-PaddingRight--a sprk-o-Stack sprk-o-Stack--large\"\n              >\n                <h3 class=\"sprk-o-Stack__item sprk-b-TypeBodyOne\">\n                  {{ item.heading }}\n                </h3>\n\n                <ul\n                  class=\"sprk-o-Stack__item sprk-o-Stack sprk-o-Stack--misc-a sprk-b-List sprk-b-List--bare\"\n                >\n                  <li\n                    class=\"sprk-o-Stack__item\"\n                    *ngFor=\"let link of item.links\"\n                  >\n                    <a\n                      sprkLink\n                      variant=\"simple\"\n                      class=\"sprk-u-FontWeight--normal\"\n                      href=\"{{ link.href }}\"\n                      analyticsString=\"{{ link.analyticsString || link.analytics }}\"\n                    >\n                      {{ link.text }}\n                    </a>\n                  </li>\n                </ul>\n              </div>\n            </div>\n\n            <div\n              *ngIf=\"socialLinks\"\n              class=\"sprk-o-Stack__item sprk-o-Stack sprk-o-Stack--large sprk-o-Box\"\n            >\n              <h3 class=\"sprk-o-Stack__item sprk-b-TypeBodyOne\">\n                {{ connectHeading }}\n              </h3>\n\n              <div\n                class=\"sprk-o-Stack__item sprk-o-Stack sprk-o-Stack--large sprk-o-Stack--split@m\"\n              >\n                <ul\n                  *ngIf=\"socialLinks\"\n                  class=\"\n                    sprk-o-Stack__item\n                    sprk-o-Stack__item--flex@m\n                    sprk-o-Stack\n                    sprk-o-Stack--split@xxs\n                    sprk-o-Stack--medium\n                    sprk-b-List\n                    sprk-b-List--bare\"\n                >\n                  <li\n                    *ngFor=\"let item of socialLinks\"\n                    class=\"sprk-o-Stack__item\"\n                  >\n                    <a\n                      sprkLink\n                      variant=\"plain\"\n                      href=\"{{ item.href }}\"\n                      analyticsString=\"{{ item.analytics || item.analyticsString }}\"\n                    >\n                      <sprk-icon\n                        *ngIf=\"item.icon\"\n                        iconType=\"{{ item.icon }}\"\n                        additionalClasses=\"{{ item.iconCSS }}\"\n                      ></sprk-icon>\n                      <span *ngIf=\"item.icon\" class=\"sprk-u-ScreenReaderText\">{{\n                        item.iconScreenReaderText\n                      }}</span>\n                    </a>\n                  </li>\n                </ul>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        <span\n          class=\"sprk-c-Divider sprk-u-mvn sprk-u-mhm\"\n          data-id=\"divider-1\"\n        ></span>\n\n        <div\n          class=\"sprk-o-Stack__item sprk-o-Stack sprk-o-Stack--misc-b sprk-o-Box sprk-u-PaddingTop--b\"\n        >\n          <div\n            *ngIf=\"awards\"\n            class=\"sprk-o-Stack__item sprk-o-Stack sprk-o-Stack--large\"\n          >\n            <h3 class=\"sprk-o-Stack__item sprk-b-TypeBodyOne\">\n              {{ awardsHeading }}\n            </h3>\n\n            <div\n              class=\"sprk-o-Stack__item sprk-o-Stack sprk-o-Stack--medium sprk-o-Stack--split@s sprk-u-mbm\"\n            >\n              <div class=\"sprk-o-Stack__item\" *ngFor=\"let award of awards\">\n                <a\n                  sprkLink\n                  variant=\"plain\"\n                  class=\"sprk-o-Stack__item\"\n                  href=\"{{ award.href }}\"\n                  analyticsString=\"{{ award.analytics || award.analyticsString }}\"\n                >\n                  <img\n                    *ngIf=\"award.imgSrc\"\n                    src=\"{{ award.imgSrc }}\"\n                    alt=\"{{ award.imgAlt }}\"\n                    class=\"{{ award.imgCSS }}\"\n                  />\n                </a>\n              </div>\n            </div>\n\n            <div\n              *ngFor=\"let toggle of disclaimerToggle\"\n              class=\"sprk-o-Stack__item\"\n            >\n              <sprk-toggle\n                title=\"{{ toggle.title }}\"\n                analyticsString=\"{{ toggle.analytics || toggle.analyticsString }}\"\n                iconClass=\"sprk-c-Icon--stroke-current-color\"\n                titleFontClass=\"sprk-b-TypeBodyFour\"\n              >\n                <p class=\"sprk-b-TypeBodyFour\">{{ toggle.body }}</p>\n              </sprk-toggle>\n            </div>\n          </div>\n\n          <div\n            *ngIf=\"disclaimerText\"\n            class=\"sprk-o-Stack__item sprk-o-Stack sprk-o-Stack--large\"\n          >\n            <p\n              *ngFor=\"let disclaimer of disclaimerText\"\n              class=\"sprk-o-Stack__item sprk-b-TypeBodyFour\"\n            >\n              {{ disclaimer.text }}\n            </p>\n          </div>\n\n          <ul\n            *ngIf=\"badgeLinks\"\n            class=\"\n              sprk-o-Stack__item\n              sprk-o-Stack__item--flex@m\n              sprk-o-Stack\n              sprk-o-Stack--split@xxs\n              sprk-o-Stack--medium\n              sprk-b-List\n              sprk-b-List--bare\"\n          >\n            <li *ngFor=\"let item of badgeLinks\" class=\"sprk-o-Stack__item\">\n              <a\n                sprkLink\n                variant=\"plain\"\n                href=\"{{ item.href }}\"\n                analyticsString=\"{{ item.analytics || item.analyticsString }}\"\n              >\n                <sprk-icon\n                  *ngIf=\"item.icon\"\n                  iconType=\"{{ item.icon }}\"\n                  additionalClasses=\"{{ item.iconCSS }}\"\n                ></sprk-icon>\n                <span *ngIf=\"item.icon\" class=\"sprk-u-ScreenReaderText\">{{\n                  item.iconScreenReaderText\n                }}</span>\n              </a>\n            </li>\n          </ul>\n        </div>\n      </footer>\n    </div>\n  `\n})\nexport class SprkFooterComponent {\n  /**\n   * Expects a space separated string\n   * of classes to be added to the\n   * component.\n   */\n  @Input()\n  additionalClasses: string;\n  /**\n   * The value supplied will be assigned\n   * to the `data-id` attribute on the\n   * component. This is intended to be\n   * used as a selector for automated\n   * tools. This value should be unique\n   * per page.\n   */\n  @Input()\n  idString: string;\n  /**\n   * The heading for the \"Global\" section.\n   */\n  @Input()\n  globalHeading: string;\n  /**\n   * The heading for the \"Awards\" section.\n   */\n  @Input()\n  awardsHeading: string;\n  /**\n   * The heading for the \"Connect With Us\" section.\n   */\n  @Input()\n  connectHeading: string;\n  /**\n   * Array of\n   * [ISprkFooterGlobalLink](https://github.com/sparkdesignsystem/spark-design-system/blob/master/angular/projects/spark-angular/src/lib/components/sprk-footer/sprk-footer.interfaces.ts)\n   *  used to build the\n   * links in the \"Global\" section.\n   */\n  @Input()\n  globalLinks: ISprkFooterGlobalLink[];\n  /**\n   * Array of\n   * [ISprkFooterLocalLinkColumn](https://github.com/sparkdesignsystem/spark-design-system/blob/master/angular/projects/spark-angular/src/lib/components/sprk-footer/sprk-footer.interfaces.ts)\n   *  used to build\n   * the columns of links\n   * in the \"Site Links\" section.\n   */\n  @Input()\n  localLinks: ISprkFooterLocalLinkColumn[];\n  /**\n   * Array of\n   * [ISprkFooterSocialLink](https://github.com/sparkdesignsystem/spark-design-system/blob/master/angular/projects/spark-angular/src/lib/components/sprk-footer/sprk-footer.interfaces.ts)\n   *  used to build the\n   * icon links in the \"Connect With Us section\".\n   */\n  @Input()\n  socialLinks: ISprkFooterSocialLink[];\n  /**\n   * Array of\n   * [ISprkFooterAward](https://github.com/sparkdesignsystem/spark-design-system/blob/master/angular/projects/spark-angular/src/lib/components/sprk-footer/sprk-footer.interfaces.ts)\n   *  used to build the\n   * awards in the \"Awards\" section.\n   */\n  @Input()\n  awards: ISprkFooterAward[];\n  /**\n   * Array of\n   * [ISprkFooterBadgeLink](https://github.com/sparkdesignsystem/spark-design-system/blob/master/angular/projects/spark-angular/src/lib/components/sprk-footer/sprk-footer.interfaces.ts)\n   *  used to build the\n   * icon links in the icon\n   * section in the bottom\n   * of the Footer.\n   */\n  @Input()\n  badgeLinks: ISprkFooterBadgeLink[];\n  /**\n   * Array of\n   * [ISprkDisclaimerText](https://github.com/sparkdesignsystem/spark-design-system/blob/master/angular/projects/spark-angular/src/lib/components/sprk-footer/sprk-footer.interfaces.ts)\n   *  used to build disclaimer text in the\n   * of the Footer.\n   */\n  @Input()\n  disclaimerText: ISprkDisclaimerText[];\n  /**\n   * Array of\n   * [ISprkDisclaimerToggle](https://github.com/sparkdesignsystem/spark-design-system/blob/master/angular/projects/spark-angular/src/lib/components/sprk-footer/sprk-footer.interfaces.ts)\n   *  used to build\n   * the disclamer toggle(s) in\n   * the the Footer.\n   */\n  @Input()\n  disclaimerToggle: ISprkDisclaimerToggle[];\n\n  /**\n   * @ignore\n   */\n  getClasses(): string {\n    const classArray: string[] = [\n      'sprk-o-CenteredColumn sprk-o-Stack sprk-o-Stack--misc-b'\n    ];\n\n    if (this.additionalClasses) {\n      this.additionalClasses.split(' ').forEach(className => {\n        classArray.push(className);\n      });\n    }\n\n    return classArray.join(' ');\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { SprkStackItemModule } from '../../directives/sprk-stack-item/sprk-stack-item.module';\nimport { SprkIconModule } from '../sprk-icon/sprk-icon.module';\nimport { SprkLinkDirectiveModule } from '../../directives/sprk-link/sprk-link.module';\nimport { SprkStackModule } from '../sprk-stack/sprk-stack.module';\nimport { SprkToggleModule } from '../sprk-toggle/sprk-toggle.module';\nimport { SprkFooterComponent } from './sprk-footer.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    SprkIconModule,\n    SprkStackModule,\n    SprkStackItemModule,\n    SprkToggleModule,\n    SprkLinkDirectiveModule\n  ],\n  declarations: [SprkFooterComponent],\n  exports: [SprkFooterComponent]\n})\nexport class SprkFooterModule {}\n","import { Component, Input, TemplateRef, ViewChild } from '@angular/core';\n\n@Component({\n  selector: 'sprk-list-item',\n  template: `\n    <ng-template>\n      <ng-content></ng-content>\n    </ng-template>\n  `\n})\nexport class SprkListItemComponent {\n  /**\n   * The value supplied will be assigned to the\n   * `data-analytics` attribute on the component.\n   * Intended for an outside\n   * library to capture data.\n   */\n  @Input()\n  analyticsString: string;\n  /**\n   * The value supplied will be assigned\n   * to the `data-id` attribute on the\n   * component. This is intended to be\n   * used as a selector for automated\n   * tools. This value should be unique\n   * per page.\n   */\n  @Input()\n  idString: string;\n  /**\n   * Expects a space separated string\n   * of classes to be added to the\n   * component.\n   */\n  @Input()\n  additionalClasses: string;\n\n  /**\n   * @ignore\n   */\n  @ViewChild(TemplateRef, { static: true }) content: TemplateRef<any>;\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { SprkListItemComponent } from './sprk-list-item.component';\n\n@NgModule({\n  imports: [CommonModule, RouterModule],\n  declarations: [SprkListItemComponent],\n  exports: [SprkListItemComponent]\n})\nexport class SprkListItemModule {}\n","import { Component, Input } from '@angular/core';\n\n@Component({\n  selector: 'sprk-masthead-accordion',\n  template: `\n    <nav role=\"navigation\" [attr.data-id]=\"idString\">\n      <ul [ngClass]=\"getClasses()\">\n        <ng-content></ng-content>\n      </ul>\n    </nav>\n  `\n})\nexport class SprkMastheadAccordionComponent {\n  /**\n   * Expects a space separated string\n   * of classes to be added to the\n   * component.\n   */\n  @Input()\n  additionalClasses: string;\n  /**\n   * The value supplied will be assigned\n   * to the `data-id` attribute on the\n   * component. This is intended to be\n   * used as a selector for automated\n   * tools. This value should be unique\n   * per page.\n   */\n  @Input()\n  idString: string;\n\n  /**\n   * @ignore\n   */\n  getClasses(): string {\n    const classArray: string[] = [\n      'sprk-c-MastheadAccordion',\n      'sprk-b-List',\n      'sprk-b-List--bare'\n    ];\n\n    if (this.additionalClasses) {\n      this.additionalClasses.split(' ').forEach(className => {\n        classArray.push(className);\n      });\n    }\n\n    return classArray.join(' ');\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { SprkIconModule } from '../../sprk-icon/sprk-icon.module';\nimport {\n  SprkMastheadAccordionComponent\n} from './sprk-masthead-accordion.component';\n\n@NgModule({\n  imports: [CommonModule, SprkIconModule],\n  declarations: [SprkMastheadAccordionComponent],\n  exports: [SprkMastheadAccordionComponent]\n})\nexport class SprkMastheadAccordionModule {}\n","import { Component, Input, OnInit } from '@angular/core';\nimport * as _ from 'lodash';\nimport { toggleAnimations } from '../../sprk-toggle/sprk-toggle-animations';\n\n@Component({\n  selector: 'sprk-masthead-accordion-item',\n  template: `\n    <li [ngClass]=\"getClasses()\">\n      <div\n        class=\"sprk-u-Position--relative sprk-o-Stack__item sprk-u-Width-100\"\n      >\n        <button\n          [attr.aria-controls]=\"accordion_controls_id\"\n          class=\"sprk-c-MastheadAccordion__summary\"\n          [attr.data-analytics]=\"analyticsString\"\n          [attr.data-id]=\"idString\"\n          (click)=\"toggleAccordion($event)\"\n          [attr.aria-expanded]=\"isOpen\"\n        >\n          <span [ngClass]=\"getHeadingClasses()\">\n            <sprk-icon\n              [iconType]=\"leadingIcon\"\n              additionalClasses=\"sprk-c-Icon--stroke-current-color sprk-c-Icon--l sprk-c-Icon--toggle sprk-u-mrs\"\n              *ngIf=\"leadingIcon\"\n            ></sprk-icon>\n            {{ title }}\n          </span>\n\n          <sprk-icon\n            additionalClasses=\"sprk-c-MastheadAccordion__icon sprk-c-Icon--stroke-current-color sprk-c-Icon--toggle {{\n              iconStateClass\n            }}\"\n            [iconType]=\"currentIconType\"\n          ></sprk-icon>\n        </button>\n      </div>\n\n      <div [@toggleContent]=\"animState\">\n        <div [id]=\"accordion_controls_id\"><ng-content></ng-content></div>\n      </div>\n    </li>\n  `,\n  animations: [toggleAnimations.toggleContent]\n})\nexport class SprkMastheadAccordionItemComponent implements OnInit {\n  @Input()\n  title: string;\n  /**\n   * The value supplied will be assigned to the\n   * `data-analytics` attribute on the component.\n   * Intended for an outside\n   * library to capture data.\n   */\n  @Input()\n  analyticsString: string;\n  /**\n   * The value supplied will be assigned\n   * to the `data-id` attribute on the\n   * component. This is intended to be\n   * used as a selector for automated\n   * tools. This value should be unique\n   * per page.\n   */\n  @Input()\n  idString: string;\n  /**\n   * Expects a space separated string\n   * of classes to be added to the\n   * component.\n   */\n  @Input()\n  additionalClasses: string;\n  /**\n   * Expects a space separated string\n   * of classes to be added to the\n   * heading.\n   */\n  @Input()\n  additionalHeadingClasses: string;\n  /**\n   * If `true`, the Masthead accordion item\n   * will be open when it is rendered.\n   */\n  @Input()\n  isOpen = false;\n  /**\n   * If `true`, the Masthead ccordion item\n   * will be active when it is rendered.\n   */\n  @Input()\n  isActive: boolean;\n  /**\n   * The name of the icon to use\n   * for the clickable close icon.\n   */\n  @Input()\n  iconTypeClosed = 'chevron-up-circle-two-color';\n  /**\n   * The name of the icon to use\n   * for the clickable open icon.\n   */\n  @Input()\n  iconTypeOpen = 'chevron-up-circle-two-color';\n  /**\n   * Expects a name of an icon to use\n   * as a leading icon for the Masthead accordion item.\n   */\n  @Input()\n  leadingIcon: string;\n\n  /**\n   * @ignore\n   */\n  componentID = _.uniqueId();\n  /**\n   * @ignore\n   */\n  accordion_controls_id = `accordionHeading__${this.componentID}`;\n  /**\n   * @ignore\n   */\n  public currentIconType = this.iconTypeClosed;\n  /**\n   * @ignore\n   */\n  public iconStateClass = '';\n  /**\n   * @ignore\n   */\n  public animState = 'closed';\n\n  /**\n   * @ignore\n   */\n  accordionState(): void {\n    this.isOpen === false\n      ? (this.animState = 'closed')\n      : (this.animState = 'open');\n\n    this.isOpen === false\n      ? (this.currentIconType = this.iconTypeClosed)\n      : (this.currentIconType = this.iconTypeOpen);\n\n    this.isOpen === false\n      ? (this.iconStateClass = '')\n      : (this.iconStateClass = 'sprk-c-Icon--open');\n  }\n  /**\n   * @ignore\n   */\n  toggleAccordion(event): void {\n    event.preventDefault();\n    this.isOpen = !this.isOpen;\n    this.accordionState();\n  }\n\n  /**\n   * @ignore\n   */\n  getClasses(): string {\n    const classArray: string[] = [\n      'sprk-c-MastheadAccordion__item',\n      'sprk-u-Overflow--hidden'\n    ];\n\n    if (this.isOpen) {\n      classArray.push('sprk-c-MastheadAccordion__item--open');\n    }\n\n    if (this.isActive) {\n      classArray.push('sprk-c-MastheadAccordion__item--active');\n    }\n\n    if (this.additionalClasses) {\n      this.additionalClasses.split(' ').forEach(className => {\n        classArray.push(className);\n      });\n    }\n\n    return classArray.join(' ');\n  }\n  /**\n   * @ignore\n   */\n  getHeadingClasses(): string {\n    const classArray: string[] = ['sprk-c-MastheadAccordion__heading'];\n\n    if (this.additionalHeadingClasses) {\n      this.additionalHeadingClasses.split(' ').forEach(className => {\n        classArray.push(className);\n      });\n    }\n\n    return classArray.join(' ');\n  }\n\n  ngOnInit() {\n    this.accordionState();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { SprkIconModule } from '../../sprk-icon/sprk-icon.module';\nimport {\n  SprkMastheadAccordionItemComponent\n} from './sprk-masthead-accordion-item.component';\n\n@NgModule({\n  imports: [CommonModule, SprkIconModule],\n  declarations: [SprkMastheadAccordionItemComponent],\n  exports: [SprkMastheadAccordionItemComponent]\n})\nexport class SprkMastheadAccordionItemModule {}\n","import {\n  Component,\n  HostListener,\n  Input,\n  Renderer2,\n  AfterContentInit\n} from '@angular/core';\nimport { Router, Event, NavigationEnd } from '@angular/router';\nimport * as _ from 'lodash';\nimport {\n  ISprkNarrowNavLink,\n  ISprkNarrowSelector,\n  ISprkBigNavLink\n} from './sprk-masthead.interfaces';\n\n@Component({\n  selector: 'sprk-masthead',\n  template: `\n    <header [ngClass]=\"getClasses()\" role=\"banner\" [attr.data-id]=\"idString\">\n      <div\n        class=\"sprk-c-Masthead__content sprk-o-Stack__item sprk-o-Stack sprk-o-Stack--split@xxs\"\n      >\n        <div\n          class=\"sprk-c-Masthead__menu sprk-o-Stack__item sprk-o-Stack__item--center-column@xxs\"\n        >\n          <button\n            class=\"sprk-c-Menu\"\n            type=\"button\"\n            [attr.aria-expanded]=\"isNarrowNavOpen ? true : false\"\n            (click)=\"toggleNarrowNav($event)\"\n            [attr.aria-controls]=\"narrowNavId\"\n          >\n            <span class=\"sprk-u-ScreenReaderText\">Toggle Navigation</span>\n            <svg\n              [ngClass]=\"{\n                'sprk-c-Icon': true,\n                'sprk-c-Icon--l': true,\n                'sprk-c-Menu__icon': true,\n                'sprk-c-Menu__icon--open': isNarrowNavOpen\n              }\"\n              aria-hidden=\"true\"\n              viewBox=\"0 0 64 64\"\n              xmlns=\"http://www.w3.org/2000/svg\"\n            >\n              <g>\n                <path\n                  class=\"sprk-c-Menu__line sprk-c-Menu__line--two\"\n                  d=\"m8 32h48\"\n                />\n                <path\n                  class=\"sprk-c-Menu__line sprk-c-Menu__line--one\"\n                  d=\"m8 18.68h48\"\n                />\n                <path\n                  class=\"sprk-c-Menu__line sprk-c-Menu__line--three\"\n                  d=\"m8 45.32h48\"\n                />\n              </g>\n            </svg>\n          </button>\n        </div>\n\n        <div\n          class=\"sprk-c-Masthead__branding sprk-o-Stack__item sprk-o-Stack__item--center-column@xxs\"\n        >\n          <a sprkLink [attr.href]=\"logoHref\" variant=\"unstyled\">\n            <ng-content select=\"[logo-slot]\"></ng-content>\n            <span class=\"sprk-u-ScreenReaderText\">{{\n              logoLinkScreenReaderText\n            }}</span>\n          </a>\n        </div>\n\n        <div\n          class=\"sprk-c-Masthead__nav-item sprk-o-Stack__item sprk-o-Stack__item--center-column@xxs\"\n        >\n          <ng-content select=\"[navItem-slot]\"></ng-content>\n        </div>\n        <nav\n          class=\"\n          sprk-c-Masthead__little-nav\n          sprk-o-Stack__item\n          sprk-o-Stack__item--flex@xxs\n          sprk-o-Stack\n          sprk-o-Stack--misc-a\n          sprk-o-Stack--split@xxs\n          sprk-o-Stack--end-row\"\n          role=\"navigation\"\n        >\n          <ng-content select=\"[little-nav-slot]\"></ng-content>\n\n          <ng-content select=\"[utility-slot]\"></ng-content>\n        </nav>\n      </div>\n\n      <div class=\"sprk-o-Stack__item\">\n        <nav\n          class=\"sprk-c-Masthead__big-nav\"\n          role=\"navigation\"\n          [attr.data-id]=\"idString\"\n          *ngIf=\"bigNavLinks\"\n        >\n          <ul [ngClass]=\"getSecondaryNavClasses()\">\n            <li\n              *ngFor=\"let link of bigNavLinks\"\n              [ngClass]=\"{\n                'sprk-c-Masthead__big-nav-item': true,\n                'sprk-o-Stack__item': true,\n                'sprk-c-Masthead__big-nav-item--open':\n                  link.focused && link.subNav\n              }\"\n              routerLinkActive=\"sprk-c-Masthead__big-nav-item--active\"\n              [attr.aria-haspopup]=\"link.subNav ? 'true' : null\"\n            >\n              <div *ngIf=\"link.subNav\">\n                <sprk-dropdown\n                  [choices]=\"link.subNav\"\n                  additionalTriggerClasses=\"sprk-b-Link--plain sprk-c-Masthead__link sprk-c-Masthead__link--big-nav\"\n                  additionalClasses=\"sprk-u-TextAlign--left\"\n                  triggerIconType=\"chevron-down\"\n                  [analyticsString]=\"link.analyticsString\"\n                  [triggerText]=\"link.text\"\n                ></sprk-dropdown>\n              </div>\n              <div *ngIf=\"!link.subNav\">\n                <a\n                  sprkLink\n                  variant=\"plain\"\n                  [analyticsString]=\"link.analyticsString\"\n                  class=\"sprk-c-Masthead__link sprk-c-Masthead__link--big-nav\"\n                  [attr.href]=\"link.href\"\n                >\n                  {{ link.text }}\n                </a>\n              </div>\n            </li>\n          </ul>\n        </nav>\n      </div>\n\n      <nav\n        *ngIf=\"isNarrowNavOpen\"\n        class=\"sprk-c-Masthead__narrow-nav\"\n        role=\"navigation\"\n        [id]=\"narrowNavId\"\n      >\n        <sprk-dropdown\n          *ngIf=\"narrowSelector\"\n          dropdownType=\"mastheadSelector\"\n          additionalClasses=\"sprk-c-Masthead__selector-dropdown\"\n          additionalTriggerClasses=\"\n            sprk-c-Masthead__selector\n            sprk-b-Link\n            sprk-b-Link--plain\n            sprk-o-Stack\n            sprk-o-Stack--split@xxs\n            sprk-o-Stack--center-column\"\n          additionalTriggerTextClasses=\"sprk-o-Stack__item sprk-o-Stack__item--flex@xxs\"\n          additionalIconClasses=\"sprk-Stack__item sprk-u-mrs\"\n          [triggerText]=\"narrowSelector['trigger'].text\"\n          selector=\"Select One\"\n          triggerIconType=\"chevron-down\"\n          [choices]=\"narrowSelector['choices']\"\n        >\n          <div\n            *ngIf=\"narrowSelector['footer']\"\n            class=\"sprk-c-Dropdown__footer sprk-u-TextAlign--center\"\n            sprkDropdownFooter\n          >\n            <a\n              sprkLink\n              variant=\"unstyled\"\n              [analyticsString]=\"narrowSelector['footer'].analyticsString\"\n              [attr.href]=\"narrowSelector['footer'].href\"\n              class=\"sprk-c-Button sprk-c-Button--tertiary\"\n            >\n              {{ narrowSelector['footer'].text }}\n            </a>\n          </div>\n        </sprk-dropdown>\n\n        <sprk-masthead-accordion [additionalClasses]=\"getNarrowNavClasses()\">\n          <div *ngFor=\"let narrowLink of narrowNavLinks\">\n            <div *ngIf=\"narrowLink.subNav\">\n              <sprk-masthead-accordion-item\n                iconTypeOpen=\"chevron-down\"\n                iconTypeClosed=\"chevron-down\"\n                [leadingIcon]=\"narrowLink.leadingIcon\"\n                [isActive]=\"narrowLink.active\"\n                [title]=\"narrowLink.text\"\n              >\n                <ul\n                  class=\"sprk-b-List sprk-b-List--bare sprk-c-MastheadAccordion__details\"\n                >\n                  <li\n                    class=\"sprk-c-MastheadAccordion__item\"\n                    *ngFor=\"let subNavLink of narrowLink.subNav\"\n                  >\n                    <a\n                      sprkLink\n                      variant=\"unstyled\"\n                      class=\"sprk-c-MastheadAccordion__summary\"\n                      [attr.href]=\"subNavLink.href\"\n                      [analyticsString]=\"subNavLink.analyticsString\"\n                    >\n                      <sprk-icon\n                        [iconType]=\"subNavLink.leadingIcon\"\n                        additionalClasses=\"sprk-c-Icon--stroke-current-color sprk-u-mrs\"\n                        *ngIf=\"subNavLink.leadingIcon\"\n                      ></sprk-icon>\n                      {{ subNavLink.text }}\n                    </a>\n                  </li>\n                </ul>\n              </sprk-masthead-accordion-item>\n            </div>\n            <div *ngIf=\"!narrowLink.subNav\">\n              <li\n                [ngClass]=\"{\n                  'sprk-c-MastheadAccordion__item': true,\n                  'sprk-c-MastheadAccordion__item--active': narrowLink.active\n                }\"\n              >\n                <a\n                  sprkLink\n                  variant=\"unstyled\"\n                  class=\"sprk-c-MastheadAccordion__summary\"\n                  [attr.href]=\"narrowLink.href\"\n                  [analyticsString]=\"narrowLink.analyticsString\"\n                >\n                  <span class=\"sprk-c-MastheadAccordion__heading\">\n                    <sprk-icon\n                      [iconType]=\"narrowLink.leadingIcon\"\n                      additionalClasses=\"sprk-c-Icon--stroke-current-color sprk-u-mrs\"\n                      *ngIf=\"narrowLink.leadingIcon\"\n                    ></sprk-icon>\n                    {{ narrowLink.text }}\n                  </span>\n                </a>\n              </li>\n            </div>\n          </div>\n        </sprk-masthead-accordion>\n        <ng-content select=\"[narrowNavFooter]\"></ng-content>\n      </nav>\n    </header>\n  `\n})\nexport class SprkMastheadComponent implements AfterContentInit {\n  /**\n   * @ignore\n   */\n  constructor(private renderer: Renderer2, router: Router) {\n    router.events.subscribe((event: Event) => {\n      if (event instanceof NavigationEnd) {\n        this.closeNarrowNav();\n      }\n    });\n  }\n\n /**\n  *  The `href` value of the logo.\n  */\n  @Input()\n  logoHref = '/';\n  /**\n   * The value supplied will be used as\n   * screen reader text that is visually hidden\n   * for the link that wraps the logo.\n   */\n  @Input()\n  logoLinkScreenReaderText = 'Go to the homepage';\n  /**\n   * Expects a space separated string\n   * of classes to be added to the\n   * component.\n   */\n  @Input()\n  additionalClasses: string;\n  /**\n   * Expects a space separated string\n   * of classes to be added to the\n   * big navigation link container.\n   */\n  @Input()\n  additionalBigNavClasses: string;\n  /**\n   * Expects a space separated string\n   * of classes to be added to the\n   * narrow navigation container.\n   */\n  @Input()\n  additionalNarrowNavClasses: string;\n  /**\n   * Expects an array of\n   * [ISprkNarrowNavLink](https://github.com/sparkdesignsystem/spark-design-system/tree/master/src/angular/projects/spark-angular/src/lib/components/sprk-masthead/sprk-masthead.interfaces.ts)\n   * to be\n   * represented in the narrow nav element\n   * of the Masthead component.\n   */\n  @Input()\n  narrowNavLinks: ISprkNarrowNavLink[];\n  /**\n   * Represents the initial state of the\n   * narrow nav element of the Masthead component.\n   */\n  @Input()\n  isNarrowNavOpen = false;\n  /**\n   * The value supplied will be assigned\n   * to the `data-id` attribute on the\n   * component. This is intended to be\n   * used as a selector for automated\n   * tools. This value should be unique\n   * per page.\n   */\n  @Input()\n  idString: string;\n  /**\n   * Expects an array of\n   * [ISprkBigNavLink](https://github.com/sparkdesignsystem/spark-design-system/tree/master/src/angular/projects/spark-angular/src/lib/components/sprk-masthead/sprk-masthead.interfaces.ts)\n   * to be\n   * used to create the Big Navigation of\n   * the Masthead component.\n   */\n  @Input()\n  bigNavLinks: ISprkBigNavLink[];\n  /**\n   * Expects a [ISprkNarrowSelector](https://github.com/sparkdesignsystem/spark-design-system/tree/master/src/angular/projects/spark-angular/src/lib/components/sprk-masthead/sprk-masthead.interfaces.ts)\n   * object that\n   * represents dropdown choices inside the dropdown\n   * rendered in the Narrow Navigation.\n   */\n  @Input()\n  narrowSelector: ISprkNarrowSelector;\n  /**\n   * A string that is used to set the `id` on the narrow nav\n   * and the `aria-controls` for the menu trigger button.\n   */\n  @Input()\n  narrowNavId = _.uniqueId(`sprk_masthead_narrow_nav_`);\n\n  /**\n   * @ignore\n   */\n  iconType = 'chevron-down';\n  /**\n   * @ignore\n   */\n  componentID = _.uniqueId();\n  /**\n   * @ignore\n   */\n  controls_id = `sprk-narrow-navigation-item__${this.componentID}`;\n  /**\n   * @ignore\n   */\n  isScrolled = false;\n  /**\n   * @ignore\n   */\n  isNarrowLayout = false;\n  /**\n   * @ignore\n   */\n  scrollDirection = 'up';\n  /**\n   * @ignore\n   */\n  isHidden = false;\n  /**\n   * @ignore\n   */\n  isNarrowOnResize = false;\n  /**\n   * @ignore\n   */\n  scrollPosition = 0;\n  /**\n   * @ignore\n   */\n  throttledCheckScrollDirection = _.throttle(this.checkScrollDirection, 500);\n  /**\n   * @ignore\n   */\n  throttledUpdateLayoutState = _.throttle(this.updateLayoutState, 500);\n\n  /**\n   * @ignore\n   * Closes the narrow navigation menu\n   * if it is left open when\n   * the viewport is expanded.\n   */\n  @HostListener('window:orientationchange')\n  handleResizeEvent() {\n    this.closeNarrowNav();\n  }\n\n  /**\n   * @ignore\n   */\n  @HostListener('window:scroll', ['$event'])\n  onScroll(event): void {\n    window.scrollY >= 10 ? (this.isScrolled = true) : (this.isScrolled = false);\n    if (this.isNarrowLayout) {\n      this.throttledCheckScrollDirection();\n    }\n  }\n\n  /**\n   * @ignore\n   * Handles when viewport size changes to\n   * large while narrow nav is hidden.\n   */\n  @HostListener('window:resize', ['$event'])\n  onResize(event): void {\n    this.isNarrowOnResize = this.isElementVisible('.sprk-c-Masthead__menu');\n    this.throttledUpdateLayoutState();\n  }\n\n  /**\n   * @ignore\n   */\n  updateLayoutState() {\n    if (this.isNarrowLayout !== this.isNarrowOnResize) {\n      this.isNarrowLayout = this.isNarrowOnResize;\n\n      // If is not narrow on resize update, make sure it's visible\n      if (!this.isNarrowLayout) {\n        this.isHidden = false;\n      }\n    }\n  }\n\n  /**\n   * @ignore\n   */\n  ngAfterContentInit() {\n    this.isNarrowLayout = this.isElementVisible('.sprk-c-Masthead__menu');\n  }\n\n  /**\n   * @ignore\n   */\n  isElementVisible(selector) {\n    if (typeof window === 'undefined') { return; }\n    const element = document.querySelector(selector);\n    if (!element) {\n      return;\n    }\n    const elementDisplayValue = window.getComputedStyle(element).display;\n    const elementVisibilityValue = window.getComputedStyle(element).visibility;\n    const elementIsVisible =\n      elementDisplayValue === 'none' || elementVisibilityValue === 'hidden'\n        ? false\n        : true;\n    return elementIsVisible;\n  }\n\n  /**\n   * @ignore\n   */\n  scrollYDirection() {\n    if (typeof window !== 'undefined') {\n      const newScrollPos = window.scrollY;\n      if (newScrollPos < 0) {\n        return;\n      }\n      const diff = newScrollPos - this.scrollPosition;\n      const direction = diff > 0 ? 'down' : 'up';\n      this.scrollPosition = newScrollPos;\n      return direction;\n    }\n  }\n\n  /**\n   * @ignore\n   */\n  checkScrollDirection() {\n    const newDirection = this.scrollYDirection();\n    if (this.scrollDirection !== newDirection) {\n      this.scrollDirection = newDirection;\n      this.scrollDirection === 'down'\n        ? (this.isHidden = true)\n        : (this.isHidden = false);\n    }\n  }\n\n  /**\n   * @ignore\n   */\n  getClasses(): string {\n    const classArray: string[] = ['sprk-c-Masthead', 'sprk-o-Stack'];\n\n    if (this.additionalClasses) {\n      this.additionalClasses.split(' ').forEach(className => {\n        classArray.push(className);\n      });\n    }\n\n    if (this.isNarrowNavOpen) {\n      classArray.push('sprk-c-Masthead--open');\n    }\n\n    if (this.isScrolled) {\n      classArray.push('sprk-c-Masthead--scroll');\n    }\n\n    if (this.isHidden) {\n      classArray.push('sprk-c-Masthead--hidden');\n    }\n\n    return classArray.join(' ');\n  }\n\n  /**\n   * @ignore\n   */\n  getNarrowNavClasses(): string {\n    const classArray: string[] = [];\n\n    if (this.additionalNarrowNavClasses) {\n      this.additionalNarrowNavClasses.split(' ').forEach(className => {\n        classArray.push(className);\n      });\n    }\n\n    return classArray.join(' ');\n  }\n\n  /**\n   * @ignore\n   */\n  getSecondaryNavClasses(): string {\n    const classArray: string[] = [\n      'sprk-c-Masthead__big-nav-items',\n      'sprk-o-Stack',\n      'sprk-o-Stack--misc-a',\n      'sprk-o-Stack--center-row',\n      'sprk-o-Stack--split@xxs',\n      'sprk-b-List',\n      'sprk-b-List--bare'\n    ];\n\n    if (this.additionalBigNavClasses) {\n      this.additionalBigNavClasses.split(' ').forEach(className => {\n        classArray.push(className);\n      });\n    }\n\n    return classArray.join(' ');\n  }\n\n  /**\n   * @ignore\n   */\n  toggleNarrowNav(event): void {\n    event.preventDefault();\n    if (this.isNarrowNavOpen) {\n      this.closeNarrowNav();\n    } else {\n      this.openNarrowNav();\n    }\n  }\n\n  /**\n   * @ignore\n   */\n  openNarrowNav(): void {\n    this.renderer.addClass(document.body, 'sprk-u-Overflow--hidden');\n    this.renderer.addClass(\n      document.body.parentElement,\n      'sprk-u-Overflow--hidden'\n    );\n    this.renderer.addClass(document.body, 'sprk-u-Height--100');\n    this.renderer.addClass(document.body.parentElement, 'sprk-u-Height--100');\n    this.isNarrowNavOpen = true;\n  }\n\n  /**\n   * @ignore\n   */\n  closeNarrowNav(): void {\n    this.renderer.removeClass(document.body, 'sprk-u-Overflow--hidden');\n    this.renderer.removeClass(\n      document.body.parentElement,\n      'sprk-u-Overflow--hidden'\n    );\n    this.renderer.removeClass(document.body, 'sprk-u-Height--100');\n    this.renderer.removeClass(\n      document.body.parentElement,\n      'sprk-u-Height--100'\n    );\n    this.isNarrowNavOpen = false;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { SprkIconModule } from '../sprk-icon/sprk-icon.module';\nimport { SprkLinkDirectiveModule } from '../../directives/sprk-link/sprk-link.module';\nimport {\n  SprkMastheadAccordionModule\n} from './sprk-masthead-accordion/sprk-masthead-accordion.module';\nimport {\n  SprkMastheadAccordionItemModule\n} from './sprk-masthead-accordion-item/sprk-masthead-accordion-item.module';\nimport { SprkMastheadComponent } from './sprk-masthead.component';\nimport { SprkDropdownModule } from '../sprk-dropdown/sprk-dropdown.module';\nimport { SprkAccordionModule } from '../sprk-accordion/sprk-accordion.module';\nimport {\n  SprkAccordionItemModule\n} from '../sprk-accordion-item/sprk-accordion-item.module';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    SprkIconModule,\n    RouterModule,\n    SprkMastheadAccordionModule,\n    SprkMastheadAccordionItemModule,\n    SprkDropdownModule,\n    SprkAccordionModule,\n    SprkAccordionItemModule,\n    SprkLinkDirectiveModule,\n  ],\n  declarations: [SprkMastheadComponent],\n  exports: [SprkMastheadComponent],\n})\nexport class SprkMastheadModule {}\n","import {\n  Component,\n  EventEmitter,\n  HostListener,\n  Input,\n  Output\n} from '@angular/core';\nimport * as _ from 'lodash';\n\n@Component({\n  selector: 'sprk-modal',\n  template: `\n    <div\n      *ngIf=\"isVisible\"\n      [ngClass]=\"{\n        'sprk-c-Modal': true,\n        'sprk-c-Modal--wait': modalType === 'wait'\n      }\"\n      role=\"dialog\"\n      tabindex=\"1\"\n      [attr.aria-labelledby]=\"heading_id\"\n      aria-modal=\"true\"\n      [attr.aria-describedby]=\"content_id\"\n      [attr.data-id]=\"idString\"\n    >\n      <div class=\"sprk-o-Stack sprk-o-Stack--large\">\n        <header class=\"sprk-o-Stack__item sprk-c-Modal__header\">\n          <h2\n            class=\"sprk-c-Modal__heading sprk-b-TypeDisplayFour\"\n            [id]=\"heading_id\"\n          >\n            {{ title }}\n          </h2>\n\n          <button\n            *ngIf=\"modalType != 'wait'\"\n            class=\"sprk-c-Modal__icon\"\n            type=\"button\"\n            aria-label=\"Close Modal\"\n            (click)=\"closeModal($event)\"\n          >\n            <sprk-icon\n              iconType=\"close\"\n              additionalClasses=\"sprk-c-Icon--stroke-current-color\"\n            ></sprk-icon>\n          </button>\n        </header>\n\n        <div\n          class=\"sprk-o-Stack__item sprk-c-Modal__body sprk-o-Stack sprk-o-Stack--medium\"\n        >\n          <div\n            *ngIf=\"modalType == 'wait'\"\n            class=\"sprk-o-Stack__item sprk-c-Spinner sprk-c-Spinner--circle sprk-c-Spinner--large sprk-c-Spinner--dark\"\n          ></div>\n          <ng-content></ng-content>\n        </div>\n\n        <footer\n          *ngIf=\"modalType === 'choice'\"\n          class=\"sprk-o-Stack__item sprk-c-Modal__footer\"\n        >\n          <button\n            class=\"sprk-c-Button sprk-u-mrm\"\n            [attr.data-analytics]=\"confirmAnalyticsString\"\n            (click)=\"emitConfirmClick($event)\"\n          >\n            {{ confirmText }}\n          </button>\n\n          <button\n            class=\"sprk-c-Button sprk-c-Button--tertiary\"\n            [attr.data-analytics]=\"cancelAnalyticsString\"\n            (click)=\"emitCancelClick($event)\"\n          >\n            {{ cancelText }}\n          </button>\n        </footer>\n      </div>\n    </div>\n\n    <div\n      *ngIf=\"isVisible\"\n      class=\"sprk-c-ModalMask\"\n      tabindex=\"-1\"\n      (click)=\"closeModal($event)\"\n    ></div>\n  `\n})\nexport class SprkModalComponent {\n  @Input()\n  title: string;\n  /**\n   * This determines the variant of the Modal.\n   * Can be `choice`, `info`, or `wait`.\n   */\n  @Input()\n  modalType: string;\n  /**\n   * The value supplied will be\n   * rendered as the text for the confirm button.\n   */\n  @Input()\n  confirmText = 'Confirm';\n  /**\n   * The value supplied will be rendered\n   * as the text for the cancel button.\n   */\n  @Input()\n  cancelText = 'Cancel';\n  /**\n   * The value supplied will be assigned to the\n   * `data-analytics` attribute\n   * on the confirm button. Intended\n   * for an outside library to capture data.\n   */\n  @Input()\n  confirmAnalyticsString: string;\n  /**\n   * The value supplied will be assigned to the\n   * `data-analytics` attribute\n   * on the cancel button. Intended\n   * for an outside library to capture data.\n   */\n  @Input()\n  cancelAnalyticsString: string;\n  /**\n   * The value supplied will be assigned\n   * to the `data-id` attribute on the\n   * component. This is intended to be\n   * used as a selector for automated\n   * tools. This value should be unique\n   * per page.\n   */\n  @Input()\n  idString: string;\n  /**\n   * If `true`, the Modal will be shown.\n   * If `false`, the modal will not be shown.\n   */\n  @Input()\n  isVisible = false;\n  /**\n   * When the Modal is closed the hide event is\n   * emitted and a callback function can\n   * be triggered if supplied.\n   */\n  @Output()\n  hide = new EventEmitter<any>();\n  /**\n   * Available when the Modal type is `choice`.\n   * The Modal will emit a confirm click event\n   * when the confirmation button is clicked.\n   * A callback function can be triggered if\n   * supplied.\n   */\n  @Output()\n  confirmClick = new EventEmitter<any>();\n  /**\n   * Available when the Modal type is `choice`.\n   * The Modal will emit a cancel click event\n   * when the cancel link is clicked.\n   * A callback function can be triggered if supplied.\n   */\n  @Output()\n  cancelClick = new EventEmitter<any>();\n  /**\n   * @ignore\n   */\n  componentID = _.uniqueId();\n  /**\n   * @ignore\n   */\n  heading_id = `modalHeading__${this.componentID}`;\n  /**\n   * @ignore\n   */\n  content_id = `modalContent__${this.componentID}`;\n\n  /**\n   * @ignore\n   */\n  @HostListener('document:keydown', ['$event'])\n  handleKeyboardEvent(event: KeyboardEvent) {\n    if (this.isVisible && event.key === 'Escape') {\n      this.closeModal(event);\n    }\n  }\n\n  /**\n   * @ignore\n   */\n  constructor() {}\n\n  /**\n   * @ignore\n   */\n  closeModal(event): void {\n    if (this.modalType !== 'wait') {\n      event.preventDefault();\n      this.hide.emit(event);\n    }\n  }\n\n  /**\n   * Emits an event when the confirmation\n   * button is clicked.\n   */\n  emitConfirmClick(event): void {\n    this.confirmClick.emit(event);\n  }\n\n  /**\n   * Emits an event when the cancel\n   * link is clicked.\n   */\n  emitCancelClick(event): void {\n    event.preventDefault();\n    this.cancelClick.emit(event);\n    this.closeModal(event);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { SprkIconModule } from '../sprk-icon/sprk-icon.module';\nimport { SprkModalComponent } from './sprk-modal.component';\n\n@NgModule({\n  imports: [CommonModule, RouterModule, SprkIconModule],\n  declarations: [SprkModalComponent],\n  exports: [SprkModalComponent]\n})\nexport class SprkModalModule {}\n","import { Component, Input, ContentChildren, QueryList } from '@angular/core';\nimport { SprkListItemComponent } from '../sprk-list-item/sprk-list-item.component';\n\n@Component({\n  selector: 'sprk-ordered-list',\n  template: `\n    <ol [ngClass]=\"getClasses()\" [attr.data-id]=\"idString\">\n      <li\n        *ngFor=\"let item of items\"\n        [attr.data-analytics]=\"item.analyticsString\"\n        [attr.data-id]=\"item.idString\"\n        [ngClass]=\"item.additionalClasses\"\n      >\n        <ng-container [ngTemplateOutlet]=\"item.content\"></ng-container>\n      </li>\n    </ol>\n  `\n})\nexport class SprkOrderedListComponent {\n  /**\n   * Will cause the appropriate variant type to render.\n   * Can be `bare` or `indented`.\n   */\n  @Input()\n  listType: string;\n  /**\n   * Expects a space separated string\n   * of classes to be added to the\n   * component.\n   */\n  @Input()\n  additionalClasses: string;\n  /**\n   * The value supplied will be assigned\n   * to the `data-id` attribute on the\n   * component. This is intended to be\n   * used as a selector for automated\n   * tools. This value should be unique\n   * per page.\n   */\n  @Input()\n  idString: string;\n\n  /**\n   * This component expects children\n   * components of `<sprk-list-item></<sprk-list-item>`.\n   */\n  @ContentChildren(SprkListItemComponent) items: QueryList<\n    SprkListItemComponent\n  >;\n\n  /**\n   * @ignore\n   */\n  getClasses(): string {\n    const classArray: string[] = ['sprk-b-List'];\n\n    switch (this.listType) {\n      case 'indented':\n        classArray.push('sprk-b-List--indented');\n        break;\n      case 'bare':\n        classArray.push('sprk-b-List--bare');\n        break;\n      default:\n        break;\n    }\n\n    if (this.additionalClasses) {\n      this.additionalClasses.split(' ').forEach(className => {\n        classArray.push(className);\n      });\n    }\n\n    return classArray.join(' ');\n  }\n  constructor() {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { SprkOrderedListComponent } from './sprk-ordered-list.component';\n\n@NgModule({\n  imports: [CommonModule, RouterModule],\n  declarations: [SprkOrderedListComponent],\n  exports: [SprkOrderedListComponent]\n})\nexport class SprkOrderedListModule {}\n","import { Component, Input, ContentChildren, QueryList } from '@angular/core';\nimport { SprkListItemComponent } from '../sprk-list-item/sprk-list-item.component';\n\n@Component({\n  selector: 'sprk-unordered-list',\n  template: `\n    <ul [ngClass]=\"getClasses()\" [attr.data-id]=\"idString\">\n      <li\n        *ngFor=\"let item of items\"\n        [attr.data-analytics]=\"item.analyticsString\"\n        [attr.data-id]=\"item.idString\"\n        [ngClass]=\"item.additionalClasses\"\n      >\n        <ng-container [ngTemplateOutlet]=\"item.content\"></ng-container>\n      </li>\n    </ul>\n  `\n})\nexport class SprkUnorderedListComponent {\n  /**\n   * This value determines what List variant is rendered.\n   * Can be `bare` or `indented`.\n   */\n  @Input()\n  listType: string;\n  /**\n   * Expects a space separated string\n   * of classes to be added to the\n   * component.\n   */\n  @Input()\n  additionalClasses: string;\n  /**\n   * The value supplied will be assigned\n   * to the `data-id` attribute on the\n   * component. This is intended to be\n   * used as a selector for automated\n   * tools. This value should be unique\n   * per page.\n   */\n  @Input()\n  idString: string;\n\n  /**\n   * This component expects children `<sprk-list-item></sprk-list-item>`\n   * components.\n   */\n  @ContentChildren(SprkListItemComponent) items: QueryList<\n    SprkListItemComponent\n  >;\n\n  /**\n   * @ignore\n   */\n  getClasses(): string {\n    const classArray: string[] = [''];\n\n    switch (this.listType) {\n      case 'indented':\n        classArray.push('sprk-b-List');\n        classArray.push('sprk-b-List--indented');\n        break;\n      case 'bare':\n        classArray.push('sprk-b-List');\n        classArray.push('sprk-b-List--bare');\n        break;\n      case 'horizontal':\n        classArray.push('sprk-o-HorizontalList');\n        break;\n      default:\n        break;\n    }\n\n    if (this.additionalClasses) {\n      this.additionalClasses.split(' ').forEach(className => {\n        classArray.push(className);\n      });\n    }\n\n    return classArray.join(' ');\n  }\n  constructor() {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { SprkUnorderedListComponent } from './sprk-unordered-list.component';\n\n@NgModule({\n  imports: [CommonModule, RouterModule],\n  declarations: [SprkUnorderedListComponent],\n  exports: [SprkUnorderedListComponent]\n})\nexport class SprkUnorderedListModule {}\n","import { Component, EventEmitter, Input, Output } from '@angular/core';\n\n@Component({\n  selector: 'sprk-pagination',\n  template: `\n    <nav\n      aria-label=\"Pagination Navigation\"\n      [ngClass]=\"getClasses()\"\n      [attr.data-id]=\"idString\"\n    >\n      <sprk-unordered-list\n        listType=\"horizontal\"\n        additionalClasses=\"sprk-c-Pagination sprk-o-HorizontalList--spacing-medium\"\n      >\n        <sprk-list-item>\n          <a\n            sprkLink\n            variant=\"plain\"\n            (click)=\"goBack($event, currentPage)\"\n            [isDisabled]=\"currentPage === 1\"\n            class=\"sprk-c-Pagination__icon\"\n            [analyticsString]=\"analyticsStringLinkPrev\"\n            aria-label=\"Previous Page\"\n            href=\"#\"\n          >\n            <span class=\"sprk-u-ScreenReaderText\">{{ prevLinkText }}</span>\n            <sprk-icon\n              additionalClasses=\"sprk-c-Icon--stroke-current-color\"\n              iconType=\"chevron-left\"\n            ></sprk-icon>\n          </a>\n        </sprk-list-item>\n\n        <sprk-list-item *ngIf=\"showNumbers()\">\n          <a\n            sprkLink\n            href=\"#\"\n            (click)=\"goToPage($event, 1)\"\n            [ngClass]=\"{\n              'sprk-c-Pagination__link': true,\n              'sprk-c-Pagination__link--current': currentPage === 1\n            }\"\n            [analyticsString]=\"analyticsStringFirstLink\"\n            [attr.aria-current]=\"currentPage === 1\"\n            aria-label=\"Page 1\"\n          >\n            1\n          </a>\n        </sprk-list-item>\n\n        <sprk-list-item\n          *ngIf=\"showNumbers() && currentPage !== 2 && totalPages() === 3\"\n        >\n          <a\n            sprkLink\n            href=\"#\"\n            (click)=\"goToPage($event, 2)\"\n            class=\"sprk-c-Pagination__link\"\n            [attr.aria-current]=\"false\"\n            aria-label=\"Page 2\"\n          >\n            2\n          </a>\n        </sprk-list-item>\n\n        <sprk-list-item\n          *ngIf=\"showNumbers() && currentPage > 2 && totalPages() > 3\"\n        >\n          ...\n        </sprk-list-item>\n\n        <sprk-list-item\n          *ngIf=\"showNumbers() && currentPage > 1 && currentPage < totalPages()\"\n        >\n          <a\n            sprkLink\n            href=\"#\"\n            (click)=\"goToPage($event, currentPage)\"\n            class=\"sprk-c-Pagination__link sprk-c-Pagination__link--current\"\n            aria-current=\"true\"\n            [analyticsString]=\"analyticsStringSecondLink\"\n            attr.aria-label=\"Page {{ currentPage }}\"\n          >\n            {{ currentPage }}\n          </a>\n        </sprk-list-item>\n\n        <sprk-list-item\n          *ngIf=\"\n            showNumbers() && currentPage < totalPages() - 1 && totalPages() > 3\n          \"\n        >\n          ...\n        </sprk-list-item>\n\n        <sprk-list-item *ngIf=\"showNumbers() && totalPages() > 1\">\n          <a\n            sprkLink\n            href=\"#\"\n            (click)=\"goToPage($event, totalPages())\"\n            [ngClass]=\"{\n              'sprk-c-Pagination__link': true,\n              'sprk-c-Pagination__link--current': currentPage === totalPages()\n            }\"\n            attr.aria-label=\"Page {{ totalPages() }}\"\n            [analyticsString]=\"analyticsStringThirdLink\"\n            [attr.aria-current]=\"currentPage === totalPages()\"\n          >\n            {{ totalPages() }}\n          </a>\n        </sprk-list-item>\n\n        <sprk-list-item>\n          <a\n            sprkLink\n            href=\"#\"\n            variant=\"plain\"\n            [isDisabled]=\"isLastPage()\"\n            (click)=\"goForward($event, currentPage)\"\n            class=\"sprk-c-Pagination__icon\"\n            [analyticsString]=\"analyticsStringLinkNext\"\n            aria-label=\"Next Page\"\n          >\n            <span class=\"sprk-u-ScreenReaderText\">{{ nextLinkText }}</span>\n            <sprk-icon\n              additionalClasses=\"sprk-c-Icon--stroke-current-color\"\n              iconType=\"chevron-right\"\n            ></sprk-icon>\n          </a>\n        </sprk-list-item>\n      </sprk-unordered-list>\n    </nav>\n  `\n})\nexport class SprkPaginationComponent {\n  /**\n   * If set to `pager`, the component will render\n   * in the Pager variant with no visible number\n   * links. Otherwise, the component will render in\n   * the Default variant if there three or fewer\n   * pages or in the Long variant if there are\n   * more than three pages.\n   */\n  @Input()\n  paginationType = 'default';\n  /**\n   * The total number of items in the\n   * paged data. This is used to calculate\n   * the number of pages.\n   */\n  @Input()\n  totalItems: number;\n  /**\n   * The total number of items\n   * to render per page. This is\n   * used to calculate the number of pages.\n   */\n  @Input()\n  itemsPerPage: number;\n  /**\n   * Expects a space separated string\n   * of classes to be added to the\n   * component.\n   */\n  @Input()\n  additionalClasses: string;\n  /**\n   * Screen reader text for the \"Next Page\" icon.\n   */\n  @Input()\n  nextLinkText = 'Next';\n  /**\n   * Screen reader text for the \"Previous Page\"\n   * icon.\n   */\n  @Input()\n  prevLinkText = 'Prev';\n  /**\n   * The value supplied will be assigned\n   * to the `data-analytics` attribute on\n   * the first link. Intended for an outside\n   * library to capture data.\n   */\n  @Input()\n  analyticsStringFirstLink: string;\n  /**\n   * The value supplied will be assigned\n   * to the `data-analytics` attribute on\n   * the second link. Intended for an outside\n   * library to capture data.\n   */\n  @Input()\n  analyticsStringSecondLink: string;\n  /**\n   * The value supplied will be assigned\n   * to the `data-analytics` attribute on\n   * the third link. Intended for an outside\n   * library to capture data.\n   */\n  @Input()\n  analyticsStringThirdLink: string;\n  /**\n   * The value supplied will be assigned\n   * to the `data-analytics` attribute on\n   * the \"Next\" link. Intended for an outside\n   * library to capture data.\n   */\n  @Input()\n  analyticsStringLinkNext: string;\n  /**\n   * The value supplied will be assigned\n   * to the `data-analytics` attribute on\n   * the \"Prev\" link. Intended for an outside\n   * library to capture data.\n   */\n  @Input()\n  analyticsStringLinkPrev: string;\n  /**\n   * The value supplied will be assigned\n   * to the `data-id` attribute on the\n   * component. This is intended to be\n   * used as a selector for automated\n   * tools. This value should be unique\n   * per page.\n   */\n  @Input()\n  idString: string;\n\n  /**\n   * @ignore\n   */\n  private _currentPage = 1;\n\n  /**\n   * The current page number.\n   * In the Default and Long variants,\n   * this value corresponds to the active page link.\n   */\n  @Input()\n  set currentPage(value: number) {\n    if (value > this.totalPages()) {\n      value = this.totalPages();\n    } else if (value < 1) {\n      value = 1;\n    }\n\n    this._currentPage = value;\n  }\n  get currentPage(): number {\n    return this._currentPage;\n  }\n\n  /**\n   * Accepts a function to run when the\n   * previous link is clicked.\n   * On click, `previousClick`\n   * will emit the click event and current page.\n   */\n  @Output()\n  previousClick = new EventEmitter();\n  /**\n   * Accepts a function\n   * to run when the next link is clicked.\n   * On click, `nextClick` will emit the click event and current page.\n   */\n  @Output()\n  nextClick = new EventEmitter();\n  /**\n   * Accepts a function to run when the individual page\n   * links are clicked. On click, `pageClick` will\n   * emit the click event and current page.\n   */\n  @Output()\n  pageClick = new EventEmitter();\n\n  /**\n   * @ignore\n   */\n  goToPage(event, page): void {\n    event.preventDefault();\n    this.currentPage = page;\n    this.pageClick.emit({ event, page });\n  }\n\n  /**\n   * @ignore\n   */\n  goBack(event, page): void {\n    event.preventDefault();\n    let newPage = page;\n\n    if (this.currentPage > 1) {\n      newPage = this.currentPage - 1;\n      this.currentPage = newPage;\n    }\n\n    // Page is still returning the old page. This allows us to\n    // close Issue 1401 without introducing a breaking change.\n    this.previousClick.emit({ event, page, newPage });\n  }\n\n  /**\n   * @ignore\n   */\n  goForward(event, page): void {\n    event.preventDefault();\n    let newPage = page;\n\n    if (this.currentPage < this.totalPages()) {\n      newPage = this.currentPage + 1;\n      this.currentPage = newPage;\n    }\n\n    // Page is still returning the old page. This allows us to\n    // close Issue 1401 without introducing a breaking change.\n    this.nextClick.emit({ event, page, newPage });\n  }\n\n  /**\n   * @ignore\n   * @returns total number of pages based on total\n   * number of items and the desired number of\n   * items to show per page.\n   */\n  totalPages(): number {\n    return Math.ceil(this.totalItems / this.itemsPerPage);\n  }\n\n  /**\n   * @ignore\n   * @returns true if currently on the last page.\n   */\n  isLastPage(): boolean {\n    return this.currentPage === this.totalPages();\n  }\n\n  /**\n   * @ignore\n   * @returns true if the component is in\n   * either the default or long variant.\n   */\n  showNumbers(): boolean {\n    return this.paginationType !== 'pager';\n  }\n\n  /**\n   * @ignore\n   */\n  getClasses(): string {\n    const classArray: string[] = [''];\n\n    if (this.additionalClasses) {\n      this.additionalClasses.split(' ').forEach(className => {\n        classArray.push(className);\n      });\n    }\n\n    return classArray.join(' ');\n  }\n  constructor() {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { SprkIconModule } from '../sprk-icon/sprk-icon.module';\nimport { SprkLinkDirectiveModule } from '../../directives/sprk-link/sprk-link.module';\nimport {\n  SprkUnorderedListModule\n} from '../sprk-unordered-list/sprk-unordered-list.module';\nimport { SprkListItemModule } from '../sprk-list-item/sprk-list-item.module';\nimport { SprkPaginationComponent } from './sprk-pagination.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    SprkUnorderedListModule,\n    SprkIconModule,\n    SprkLinkDirectiveModule,\n    SprkListItemModule\n  ],\n  declarations: [SprkPaginationComponent],\n  exports: [SprkPaginationComponent]\n})\nexport class SprkPaginationModule {}\n","import { Component, Input } from '@angular/core';\n\n@Component({\n  selector: 'sprk-promo',\n  template: `\n    <div [ngClass]=\"getClasses()\" [attr.data-id]=\"idString\">\n      <a\n        sprkLink\n        variant=\"unstyled\"\n        *ngIf=\"isFlag && !mediaRev\"\n        [ngClass]=\"getClassesFlag()\"\n        [attr.href]=\"imgHref\"\n        [analyticsString]=\"flagLinkAnalytics\"\n      >\n        <img\n          class=\"sprk-c-Promo__image--flag\"\n          alt=\"{{ imgAlt }}\"\n          src=\"{{ imgSrc }}\"\n        />\n      </a>\n      <a\n        sprkLink\n        variant=\"unstyled\"\n        *ngIf=\"imgSrc && !mediaRev && !isFlag\"\n        [attr.href]=\"imgHref\"\n        [analyticsString]=\"imgLinkAnalytics\"\n        [ngClass]=\"getClassesImg()\"\n      >\n        <img\n          class=\"sprk-c-Promo__image\"\n          alt=\"{{ imgAlt }}\"\n          src=\"{{ imgSrc }}\"\n        />\n      </a>\n\n      <div [ngClass]=\"getClassesContent()\">\n        <h3\n          *ngIf=\"title\"\n          class=\"sprk-b-TypeDisplayFive sprk-o-Stack__item sprk-c-Promo__title\"\n        >\n          {{ title }}\n        </h3>\n\n        <div *ngIf=\"subtitle\" class=\"sprk-c-Promo__subtitle sprk-o-Stack__item\">\n          {{ subtitle }}\n        </div>\n\n        <div class=\"sprk-b-TypeBodyTwo sprk-o-Stack__item\">\n          <ng-content></ng-content>\n        </div>\n\n        <div *ngIf=\"cta === 'button'\" class=\"sprk-o-Stack__item\">\n          <a\n            sprkLink\n            variant=\"unstyled\"\n            [attr.href]=\"buttonHref\"\n            class=\"sprk-c-Button\"\n            [analyticsString]=\"buttonLinkAnalytics\"\n          >\n            {{ ctaText }}\n          </a>\n        </div>\n\n        <a\n          sprkLink\n          variant=\"simple\"\n          *ngIf=\"cta === 'link'\"\n          [attr.href]=\"ctaLinkHref\"\n          class=\"sprk-o-Stack__item\"\n          [analyticsString]=\"ctaLinkAnalytics\"\n        >\n          {{ ctaText }}\n        </a>\n      </div>\n\n      <a\n        sprkLink\n        variant=\"unstyled\"\n        *ngIf=\"isFlag && mediaRev\"\n        [attr.href]=\"imgHref\"\n        [ngClass]=\"getClassesFlag()\"\n        [analyticsString]=\"flagLinkAnalytics\"\n      >\n        <img\n          class=\"sprk-c-Promo__image--flag\"\n          alt=\"{{ imgAlt }}\"\n          src=\"{{ imgSrc }}\"\n        />\n      </a>\n\n      <a\n        sprkLink\n        variant=\"unstyled\"\n        *ngIf=\"imgSrc && mediaRev && !isFlag\"\n        [attr.href]=\"imgHref\"\n        [analyticsString]=\"imgLinkAnalytics\"\n        [ngClass]=\"getClassesImg()\"\n      >\n        <img\n          class=\"sprk-c-Promo__image\"\n          alt=\"{{ imgAlt }}\"\n          src=\"{{ imgSrc }}\"\n        />\n      </a>\n    </div>\n  `\n})\nexport class SprkPromoComponent {\n  /**\n   * The main heading on the Promo.\n   */\n  @Input()\n  title: string;\n  /**\n   * If supplied, this will be used as the\n   * text for a subtitle.\n   */\n  @Input()\n  subtitle: string;\n  /**\n   * Can be `link` or `button`.\n   * This determines the type for the call to action in the Promo body.\n   */\n  @Input()\n  cta: string;\n  /**\n   * This determines the text for the call to action.\n   */\n  @Input()\n  ctaText: string;\n  /**\n   * This will be the `href` for the button\n   * if `cta` is set to `button`.\n   */\n  @Input()\n  buttonHref: string;\n  /**\n   * The value supplied will be assigned to the\n   * `data-analytics` attribute on the\n   * call-to-action button if `cta` is set to `button`.\n   * This is intended for an outside library to capture data.\n   */\n  @Input()\n  buttonLinkAnalytics: string;\n  /**\n   * This will be the href for the the link if `cta` is set to `link`.\n   */\n  @Input()\n  ctaLinkHref: string;\n  /**\n   * The value supplied will be assigned to\n   * the `data-analytics` attribute on the\n   * call-to-action link if `cta` is set to\n   * `link`. This is intended for an\n   * outside library to capture data.\n   */\n  @Input()\n  ctaLinkAnalytics: string;\n  /**\n   * Expects a space separated string\n   * of classes to be added to the\n   * component.\n   */\n  @Input()\n  additionalClasses: string;\n  /**\n   * Expects a space separated string\n   * of classes to be added to the\n   * content container.\n   */\n  @Input()\n  additionalClassesContent: string;\n  /**\n   * If `true`, the Flag Promo variant will be rendered.\n   */\n  @Input()\n  isFlag: boolean;\n  /**\n   * Expects a space separated string\n   * of classes to be added to the\n   * link surrounding the image in the Flag variant.\n   */\n  @Input()\n  additionalClassesFlagLink: string;\n  /**\n   * If `isFlag` is set to `true`,\n   * the Promo will render with\n   * an anchor element containing the\n   * image specified in `imgSrc`. The value\n   * supplied here will be assigned to the `data-analytics`\n   * attribute on that anchor element.\n   * This is intended for an outside library to capture data.\n   */\n  @Input()\n  flagLinkAnalytics: string;\n  /**\n   * The source value for the Promo image.\n   */\n  @Input()\n  imgSrc: string;\n  /**\n   * The `alt` text for the Promo image.\n   */\n  @Input()\n  imgAlt: string;\n  /**\n   * The `href` value for the Promo image.\n   */\n  @Input()\n  imgHref: string;\n  /**\n   * If `imgSrc` is true and `isFlag` is `false`,\n   * the value supplied will be assigned to\n   * the `data-analytics` attribute on the\n   * anchor containing the Promo image.\n   * This is intended for an outside library to capture data.\n   */\n  @Input()\n  imgLinkAnalytics: string;\n  /**\n   * If `imgSrc` is true and `isFlag` is false,\n   * this string of additional classes will\n   * be added to the anchor containing the Promo\n   * image. This is intended for overrides.\n   */\n  @Input()\n  additionalClassesImgLink: string;\n  /**\n   * If `true`, the media will render\n   * on the right side of the Promo content.\n   */\n  @Input()\n  mediaRev: boolean;\n  /**\n   * If `true`, the Promo will be rendered\n   * with a border.\n   */\n  @Input()\n  hasBorder: boolean;\n  /**\n   * The value supplied will be assigned\n   * to the `data-id` attribute on the\n   * component. This is intended to be\n   * used as a selector for automated\n   * tools. This value should be unique\n   * per page.\n   */\n  @Input()\n  idString: string;\n\n  /**\n   * @ignore\n   */\n  getClasses(): string {\n    const classArray: string[] = [\n      'sprk-c-Promo',\n      'sprk-o-Stack',\n      'sprk-o-Stack--split@s'\n    ];\n\n    if (this.isFlag) {\n      classArray.push('sprk-c-Promo--flag');\n    }\n\n    if (this.hasBorder) {\n      classArray.push('sprk-c-Promo--bordered');\n    }\n\n    if (this.additionalClasses) {\n      this.additionalClasses.split(' ').forEach(className => {\n        classArray.push(className);\n      });\n    }\n    return classArray.join(' ');\n  }\n\n  /**\n   * @ignore\n   */\n  getClassesFlag(): string {\n    const classArray: string[] = [\n      'sprk-o-Stack__item--fourth@s',\n      'sprk-o-Stack__item'\n    ];\n\n    if (this.additionalClassesFlagLink) {\n      this.additionalClassesFlagLink.split(' ').forEach(className => {\n        classArray.push(className);\n      });\n    }\n    return classArray.join(' ');\n  }\n\n  /**\n   * @ignore\n   */\n  getClassesImg(): string {\n    const classArray: string[] = [\n      'sprk-o-Stack__item',\n      'sprk-o-Stack__item--half@s'\n    ];\n\n    if (this.additionalClassesImgLink) {\n      this.additionalClassesImgLink.split(' ').forEach(className => {\n        classArray.push(className);\n      });\n    }\n    return classArray.join(' ');\n  }\n\n  /**\n   * @ignore\n   */\n  getClassesContent(): string {\n    const classArray: string[] = [\n      'sprk-c-Promo__content',\n      'sprk-o-Stack__item',\n      'sprk-o-Stack',\n      'sprk-o-Stack--large'\n    ];\n\n    if (this.isFlag) {\n      classArray.push('sprk-o-Stack__item--three-fourths@s');\n    } else {\n      if (this.imgSrc) {\n        classArray.push('sprk-o-Stack__item--half@s');\n      }\n    }\n\n    if (this.additionalClassesContent) {\n      this.additionalClassesContent.split(' ').forEach(className => {\n        classArray.push(className);\n      });\n    }\n    return classArray.join(' ');\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { SprkIconModule } from '../sprk-icon/sprk-icon.module';\nimport { SprkLinkDirectiveModule } from '../../directives/sprk-link/sprk-link.module';\nimport { SprkPromoComponent } from './sprk-promo.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    SprkIconModule,\n    SprkLinkDirectiveModule\n  ],\n  declarations: [SprkPromoComponent],\n  exports: [SprkPromoComponent]\n})\nexport class SprkPromoModule {}\n","import {\n  AfterContentInit,\n  Component,\n  ContentChildren,\n  ElementRef,\n  HostListener,\n  Input,\n  QueryList\n} from '@angular/core';\nimport * as _ from 'lodash';\nimport {\n  SprkTabbedNavigationPanelDirective\n} from '../../directives/tabbed-navigation/sprk-tabbed-navigation-panel/sprk-tabbed-navigation-panel.directive';\nimport {\n  SprkTabbedNavigationTabDirective\n} from '../../directives/tabbed-navigation/sprk-tabbed-navigation-tab/sprk-tabbed-navigation-tab.directive';\n\n@Component({\n  selector: 'sprk-tabbed-navigation',\n  template: `\n    <div [ngClass]=\"getClasses()\" [attr.data-id]=\"idString\">\n      <div class=\"sprk-c-Tabs__buttons\" role=\"tablist\">\n        <ng-content select=\"[sprkTabbedNavigationTab]\"></ng-content>\n      </div>\n      <ng-content select=\"[sprkTabbedNavigationPane]\"></ng-content>\n      <ng-content></ng-content>\n    </div>\n  `\n})\nexport class SprkTabbedNavigationComponent implements AfterContentInit {\n  /**\n   * Expects a space separated string\n   * of classes to be added to the\n   * component.\n   */\n  @Input()\n  additionalClasses: string;\n  /**\n   * The value supplied will be assigned\n   * to the `data-id` attribute on the\n   * component. This is intended to be\n   * used as a selector for automated\n   * tools. This value should be unique\n   * per page.\n   */\n  @Input()\n  idString: string;\n  /**\n   * This component expects children `<button>` elements\n   * with the `SprkTabbedNavigationTabDirective` on them.\n   * These serve as the Tabs.\n   */\n  @ContentChildren(SprkTabbedNavigationTabDirective)\n  tabs: QueryList<SprkTabbedNavigationTabDirective>;\n  /**\n   * This component expects children `<div>` elements\n   * with the `SprkTabbedNavigationPanelDirective` on them.\n   * These serve as the Panels.\n   */\n  @ContentChildren(SprkTabbedNavigationPanelDirective)\n  panels: QueryList<SprkTabbedNavigationPanelDirective>;\n  /**\n   * @ignore\n   */\n  componentID = _.uniqueId();\n  /**\n   * @ignore\n   */\n  activeClass = 'sprk-c-Tabs__button--active';\n\n  /**\n   * @ignore\n   */\n  @HostListener('click', ['$event'])\n  onClick($event) {\n    if ($event.target.classList.contains('sprk-c-Tabs__button')) {\n      const activePanel = this.panels.find(panel => {\n        return (\n          panel.ref.nativeElement.id ===\n          $event.target.getAttribute('aria-controls')\n        );\n      });\n\n      this.resetTabs(\n        this.tabs.map(tab => tab.ref.nativeElement),\n        this.panels.map(panel => panel.ref.nativeElement),\n        this.activeClass\n      );\n\n      this.setActiveTab(\n        $event.target,\n        activePanel.ref.nativeElement,\n        this.activeClass\n      );\n    }\n  }\n\n  /**\n   * @ignore\n   */\n  @HostListener('window:resize')\n  onResize() {\n    this.ariaOrientation(window.innerWidth, this.ref.nativeElement);\n  }\n\n  /**\n   * @ignore\n   */\n  @HostListener('keydown', ['$event'])\n  onKeydown($event) {\n    const isTabsButton = $event.target.classList.contains('sprk-c-Tabs__button');\n    if (!isTabsButton) {\n      return;\n    }\n\n    const keys = {\n      end: 35,\n      home: 36,\n      left: 37,\n      up: 38,\n      right: 39,\n      down: 40,\n      tab: 9\n    };\n\n    const tabElements = this.tabs.map(tab => tab.ref.nativeElement);\n    const panelElements = this.panels.map(panel => panel.ref.nativeElement);\n\n    if ($event.keyCode === keys.left || $event.keyCode === keys.up) {\n      this.incrementTab(tabElements, panelElements, this.activeClass, -1);\n    } else if ($event.keyCode === keys.right || $event.keyCode === keys.down) {\n      this.incrementTab(tabElements, panelElements, this.activeClass, 1);\n    } else if ($event.keyCode === keys.tab) {\n      if ($event.target.getAttribute('role') === 'tab') {\n        $event.preventDefault();\n        panelElements[\n          this.getActiveTabIndex(tabElements, this.activeClass)\n        ].focus();\n      }\n    } else if ($event.keyCode === keys.home) {\n      this.goToEndTab(tabElements, panelElements, this.activeClass, -1);\n    } else if ($event.keyCode === keys.end) {\n      this.goToEndTab(tabElements, panelElements, this.activeClass, 1);\n    }\n  }\n\n  /**\n   * @ignore\n   */\n  getClasses(): string {\n    const classArray: string[] = ['sprk-c-Tabs'];\n\n    if (this.additionalClasses) {\n      this.additionalClasses.split(' ').forEach(className => {\n        classArray.push(className);\n      });\n    }\n\n    return classArray.join(' ');\n  }\n\n  /**\n   * @ignore\n   */\n  ngAfterContentInit(): void {\n    let tabIDs = [];\n    let panelIDs = [];\n\n    if (this.tabs && this.panels) {\n      this.tabs.forEach((tab, index) => {\n        const tabID = `tabbed-navigation-${this.componentID}-tab-${index}`;\n        const panelID = `tabbed-navigation-${this.componentID}-panel-${index}`;\n\n        tab.ref.nativeElement.setAttribute('id', tabID);\n        tab.ref.nativeElement.setAttribute('aria-controls', panelID);\n        tabIDs.push(tabID);\n        panelIDs.push(panelID);\n      });\n\n      tabIDs = tabIDs.reverse();\n      panelIDs = panelIDs.reverse();\n\n      this.panels.forEach(panel => {\n        panel.ref.nativeElement.setAttribute('id', panelIDs.pop());\n        panel.ref.nativeElement.setAttribute('aria-labelledby', tabIDs.pop());\n      });\n    }\n  }\n\n  /**\n   * @ignore\n   */\n  ariaOrientation(width, element) {\n    // switch aria-orientation on mobile (based on _tabs.scss breakpoint)\n    if (width <= 736) {\n      element.setAttribute('aria-orientation', 'vertical');\n    } else {\n      element.setAttribute('aria-orientation', 'horizontal');\n    }\n  }\n\n  /**\n   * @ignore\n   */\n  getActiveTabIndex(tabs, activeClass) {\n    let activeIndex = null;\n    tabs.forEach((tab, index) => {\n      if (\n        tab.classList.contains(activeClass || 'sprk-c-Tabs__button--active')\n      ) {\n        activeIndex = index;\n      }\n    });\n\n    return activeIndex;\n  }\n\n  /**\n   * @ignore\n   */\n  resetTabs(tabs, tabpanels, activeClass) {\n    tabs.forEach(tab => {\n      tab.classList.remove(activeClass || 'sprk-c-Tabs__button--active');\n      tab.removeAttribute('tabindex');\n      tab.setAttribute('aria-selected', 'false');\n      tabpanels.forEach(panel => {\n        panel.classList.add('sprk-u-HideWhenJs');\n      });\n    });\n  }\n\n  /**\n   * @ignore\n   */\n  incrementTab(tabs, tabpanels, activeClass, direction) {\n    let activeIndex = this.getActiveTabIndex(tabs, activeClass);\n\n    let foundNewIndex = false;\n\n    // Start looking for the next available tab\n    while (foundNewIndex === false) {\n      // if the next tab would be off the left of the tabstrip\n      if (activeIndex + direction < 0) {\n        // loop to the end and keep looking\n        activeIndex = tabs.length;\n\n      // if the next tab would be off the right of the tabstrip\n      } else if (activeIndex + direction >= tabs.length) {\n        // loop back to the beginning and keep looking\n        activeIndex = -1;\n\n      // If the next tab is not disabled\n      } else if (!tabs[activeIndex + direction].hasAttribute('disabled')) {\n        // move to the next tab\n        activeIndex += direction;\n        // stop looking for the correct tab\n        foundNewIndex = true;\n\n      } else {\n        // move to the next tab and keep looking\n        activeIndex += direction;\n      }\n    }\n\n    // deselect all tabs\n    this.resetTabs(tabs, tabpanels, activeClass);\n    // select the correct tab\n    this.setActiveTab(tabs[activeIndex], tabpanels[activeIndex], activeClass);\n  }\n\n  goToEndTab(tabs, tabpanels, activeClass, direction) {\n    let newActiveIndex;\n\n    // if direction is positive, go to the right-most tab\n    if (direction > 0) {\n      newActiveIndex = tabs.length - 1;\n\n    // else go to the left-most tab\n    } else {\n      newActiveIndex = 0;\n    }\n\n    let foundNewIndex = false;\n\n    // step through the tabs until we find one that isn't disabled\n    while (foundNewIndex === false) {\n\n      // if this tab is not disabled\n      if (!tabs[newActiveIndex].hasAttribute('disabled')) {\n\n        // stop looking for the correct tab\n        foundNewIndex = true;\n\n      // else step one tab away from the end and keep looking\n      } else {\n        newActiveIndex -= direction;\n      }\n    }\n\n    this.resetTabs(tabs, tabpanels, activeClass);\n    this.setActiveTab(tabs[newActiveIndex], tabpanels[newActiveIndex], activeClass);\n  }\n\n  /**\n   * @ignore\n   */\n  setActiveTab(tab, tabpanel, activeClass) {\n    tab.classList.add(activeClass || 'sprk-c-Tabs__button--active');\n    tab.setAttribute('tabindex', '0');\n    tab.setAttribute('aria-selected', 'true');\n    if (tabpanel) {\n      tabpanel.classList.remove('sprk-u-HideWhenJs');\n    }\n    tab.focus();\n  }\n\n  /**\n   * @ignore\n   */\n  constructor(public ref: ElementRef) {\n    this.ariaOrientation(window.innerWidth, this.ref.nativeElement);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { SprkTabbedNavigationComponent } from './sprk-tabbed-navigation.component';\n\n@NgModule({\n  imports: [CommonModule, RouterModule],\n  declarations: [SprkTabbedNavigationComponent],\n  exports: [SprkTabbedNavigationComponent]\n})\nexport class SprkTabbedNavigationModule {}\n","import { Component, Input } from '@angular/core';\n\n@Component({\n  selector: 'sprk-table',\n  template: `\n    <div [ngClass]=\"getClasses()\" [attr.data-id]=\"idString\">\n      <table [ngClass]=\"getTableClasses()\">\n        <ng-content></ng-content>\n      </table>\n    </div>\n  `\n})\nexport class SprkTableComponent {\n  /**\n   * Expects a space separated string\n   * of classes to be added to the\n   * component container element.\n   */\n  @Input()\n  additionalClasses: string;\n  /**\n   * Expects a space separated string\n   * of classes to be added to the\n   * `table` element.\n   */\n  @Input()\n  additionalTableClasses: string;\n  /**\n   * The value supplied will be assigned\n   * to the `data-id` attribute on the\n   * component. This is intended to be\n   * used as a selector for automated\n   * tools. This value should be unique\n   * per page.\n   */\n  @Input()\n  idString: string;\n\n  /**\n   * @ignore\n   */\n  getClasses(): string {\n    const classArray: string[] = ['sprk-b-TableContainer'];\n\n    if (this.additionalClasses) {\n      this.additionalClasses.split(' ').forEach(className => {\n        classArray.push(className);\n      });\n    }\n\n    return classArray.join(' ');\n  }\n\n  /**\n   * @ignore\n   */\n  getTableClasses(): string {\n    const classArray: string[] = [\n      'sprk-b-Table',\n      'sprk-b-Table--spacing-medium',\n    ];\n\n    if (this.additionalTableClasses) {\n      this.additionalTableClasses.split(' ').forEach(className => {\n        classArray.push(className);\n      });\n    }\n\n    return classArray.join(' ');\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { SprkTableComponent } from './sprk-table.component';\n\n@NgModule({\n  imports: [CommonModule, RouterModule],\n  declarations: [SprkTableComponent],\n  exports: [SprkTableComponent]\n})\nexport class SprkTableModule {}\n","import {\n  Directive,\n  ElementRef,\n  OnInit,\n  Input,\n  HostBinding,\n  OnChanges,\n  Renderer2,\n  AfterViewInit,\n  SimpleChanges,\n} from '@angular/core';\n\n@Directive({\n  selector: '[sprkButton]'\n})\nexport class SprkButtonDirective implements OnInit, OnChanges, AfterViewInit {\n  /**\n   * @ignore\n   */\n  constructor(public ref: ElementRef, private renderer: Renderer2) {}\n\n  /**\n   * Will show a spinner inside the\n   * button if set to `true`.\n   */\n  @Input() isSpinning = false;\n\n  /**\n   * Optional string value that is\n   * set for the `aria-label`\n   * when `isSpinning` is `true`.\n   */\n  @Input() spinningAriaLabel = 'Loading';\n\n  /**\n   *  Determines the coresponding button style.\n   */\n  @Input() variant: 'primary'| 'secondary' | 'tertiary' = 'primary';\n\n  // Always set the button class on the element\n  @HostBinding('class.sprk-c-Button') true;\n\n  /**\n   * The value supplied will be assigned\n   * to the `data-id` attribute on the\n   * component. This is intended to be\n   * used as a selector for automated\n   * tools. This value should be unique\n   * per page.\n   */\n  @HostBinding('attr.data-id')\n  @Input() idString: string;\n\n  /**\n   * The value supplied will be assigned to the\n   * `data-analytics` attribute on the element.\n   * Intended for an outside\n   * library to capture data.\n   */\n  @HostBinding('attr.data-analytics')\n  @Input() analyticsString: string;\n\n  ngOnInit(): void {\n    if (this.variant === 'secondary') {\n      this.renderer.addClass(\n        this.ref.nativeElement,\n        'sprk-c-Button--secondary'\n      );\n    }\n    if (this.variant === 'tertiary') {\n      this.renderer.addClass(\n        this.ref.nativeElement,\n        'sprk-c-Button--tertiary'\n      );\n    }\n  }\n\n  /**\n   * Add spinner only after view has loaded.\n   * This is to allow time for the text\n   * content of the button to load so that\n   * the width value accounts for that text.\n   */\n  ngAfterViewInit() {\n    if (this.isSpinning) {\n      this.setSpinning(this.ref.nativeElement);\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (this.isSpinning && !changes['isSpinning'].isFirstChange()) {\n      this.setSpinning(this.ref.nativeElement);\n    }\n  }\n\n  /**\n   * @ignore\n   */\n  setSpinning = (element) => {\n    const el = element;\n    const width = element.offsetWidth;\n    const ariaLabel = this.spinningAriaLabel;\n    let spinnerClass = 'sprk-c-Spinner sprk-c-Spinner--circle';\n    if (\n        el.classList.contains('sprk-c-Button--secondary') ||\n        this.variant === 'secondary') {\n      spinnerClass += ' sprk-c-Spinner--dark';\n    }\n    this.renderer.setAttribute(\n      el,\n      'data-sprk-spinner-text',\n      el.textContent,\n    );\n    this.renderer.setAttribute(\n      el,\n      'aria-label',\n      ariaLabel,\n    );\n    el.innerHTML = `<div class=\"${spinnerClass}\"></div>`;\n    el.setAttribute('data-sprk-has-spinner', 'true');\n    this.renderer.setAttribute(\n      el,\n      'data-sprk-has-spinner',\n      'true',\n    );\n    this.renderer.setAttribute(\n      el,\n      'style',\n      `width: ${width}px`,\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { SprkButtonDirective } from './sprk-button.directive';\n\n@NgModule({\n  imports: [CommonModule, RouterModule],\n  declarations: [SprkButtonDirective],\n  exports: [SprkButtonDirective]\n})\nexport class SprkButtonModule {}\n","import { Component, Input } from '@angular/core';\n\n@Component({\n  selector: 'sprk-award',\n  template: `\n    <sprk-stack\n      itemSpacing=\"medium\"\n      additionalClasses=\"{{ additionalClasses }}\"\n    >\n      <h2\n        sprkStackItem\n        [attr.data-id]=\"idString\"\n        class=\"\n          sprk-o-Stack__item\n          sprk-b-TypeDisplayFive\n          sprk-b-Measure sprk-b-Measure--narrow\n          sprk-u-TextAlign--center\n          sprk-o-Stack__item--center-column\n        \"\n      >\n        {{ title }}\n      </h2>\n\n      <div sprkStackItem [ngClass]=\"getClasses()\">\n        <div\n          [ngClass]=\"getImgContainerClasses()\"\n        >\n          <a\n            sprkLink\n            variant=\"unstyled\"\n            class=\"sprk-o-Stack\"\n            [attr.href]=\"imgOneHref\"\n            [analyticsString]=\"analyticsStringImgOne\"\n          >\n            <img\n              [ngClass]=\"getClassesImgOne()\"\n              alt=\"{{ imgOneAlt }}\"\n              src=\"{{ imgOneSrc }}\"\n            />\n          </a>\n        </div>\n        <div\n          [ngClass]=\"getImgContainerClasses()\"\n        >\n          <a\n            sprkLink\n            variant=\"unstyled\"\n            class=\"sprk-o-Stack\"\n            [attr.href]=\"imgTwoHref\"\n            [analyticsString]=\"analyticsStringImgTwo\"\n          >\n            <img\n              [ngClass]=\"getClassesImgTwo()\"\n              alt=\"{{ imgTwoAlt }}\"\n              src=\"{{ imgTwoSrc }}\"\n            />\n          </a>\n        </div>\n      </div>\n\n      <sprk-toggle\n        *ngIf=\"disclaimer !== 'false'\"\n        sprkStackItem\n        additionalClasses=\"sprk-o-Stack__item--start-column\"\n        toggleType=\"base\"\n        title=\"{{ disclaimerTitle }}\"\n        analyticsString=\"{{ analyticsStringDisclaimer }}\"\n      >\n        <p class=\"sprk-b-TypeBodyFour\">{{ disclaimerCopy }}</p>\n      </sprk-toggle>\n    </sprk-stack>\n  `\n})\nexport class SprkAwardComponent {\n  /**\n   * The relative size of the viewport that\n   * the Award component should switch\n   * from a stacked layout to a side by side\n   * layout. You will need to experiment\n   * with your content to see which value\n   * is the best fit. Can be `tiny`,\n   * `small`, `medium`, `large` or `huge`.\n   */\n  @Input()\n  splitAt: string;\n  /**\n   * The `alt` text that will be applied\n   * to the first image.\n   */\n  @Input()\n  imgOneAlt: string;\n  /**\n   * The image `href` value that will be\n   * applied to the first image.\n   */\n  @Input()\n  imgOneHref: string;\n  /**\n   * The image `href` value that will be\n   * applied to the second image.\n   */\n  @Input()\n  imgTwoHref: string;\n  /**\n   * The `alt` text that will be applied\n   * 'to the second image.\n   */\n  @Input()\n  imgTwoAlt: string;\n  /**\n   * The image source that will be\n   * applied to the first image.\n   */\n  @Input()\n  imgOneSrc: string;\n  /**\n   * The image source that will be\n   * applied to the second image.\n   */\n  @Input()\n  imgTwoSrc: string;\n  /**\n   * The string that will be assigned to the\n   * `data-analytics` attribute of the first image.\n   */\n  @Input()\n  analyticsStringImgOne: string;\n  /**\n   * The string that will be assigned to the\n   * `data-analytics` attribute of the second image.\n   */\n  @Input()\n  analyticsStringImgTwo: string;\n  /**\n   * The string that will be assigned to the\n   * `data-analytics` attribute of\n   * the clickable disclaimer.\n   */\n  @Input()\n  analyticsStringDisclaimer: string;\n  /**\n   * Expects a space separated string\n   * of classes to be added to the\n   * component.\n   */\n  @Input()\n  additionalClasses: string;\n  /**\n   * Expects a space separated string\n   * of classes to be added to the\n   * first image.\n   */\n  @Input()\n  additionalClassesImgOne: string;\n  /**\n   * Expects a space separated string\n   * of classes to be added to the\n   * second image.\n   */\n  @Input()\n  additionalClassesImgTwo: string;\n  /**\n   * The text that appears above the\n   * images and serves as the heading\n   * for the Award.\n   */\n  @Input()\n  title: string;\n  /**\n   * The text that will be the clickable\n   * title of the disclaimer toggle.\n   */\n  @Input()\n  disclaimerTitle: string;\n  /**\n   * The text that will be inside the\n   * disclaimer toggle.\n   */\n  @Input()\n  disclaimerCopy: string;\n  /**\n   * If `false`, the disclaimer\n   * toggle will not be rendered.\n   */\n  @Input()\n  disclaimer: string;\n  /**\n   * The value supplied will be assigned\n   * to the `data-id` attribute on the\n   * component. This is intended to be\n   * used as a selector for automated\n   * tools. This value should be unique\n   * per page.\n   */\n  @Input()\n  idString: string;\n\n  /**\n   * @ignore\n   */\n  getClasses(): string {\n    const classArray: string[] = [\n      'sprk-o-Stack sprk-o-Stack--medium sprk-o-Stack__item sprk-o-Stack__item--center-column'\n    ];\n\n    // Handle the choice of item split\n    // breakpoint by adding CSS class\n    switch (this.splitAt) {\n      case 'tiny':\n        classArray.push('sprk-o-Stack--split@xs');\n        break;\n      case 'small':\n        classArray.push('sprk-o-Stack--split@s');\n        break;\n      case 'medium':\n        classArray.push('sprk-o-Stack--split@m');\n        break;\n      case 'large':\n        classArray.push('sprk-o-Stack--split@l');\n        break;\n      case 'huge':\n        classArray.push('sprk-o-Stack--split@xl');\n        break;\n      default:\n        break;\n    }\n\n    return classArray.join(' ');\n  }\n\n  /**\n   * @ignore\n   */\n  getImgContainerClasses(): string {\n    const classArray: string[] = [\n      'sprk-o-Stack__item'\n    ];\n\n    // Handle the choice of item split\n    // breakpoint by adding CSS class\n    switch (this.splitAt) {\n      case 'tiny':\n        classArray.push('sprk-o-Stack__item--flex@xs');\n        break;\n      case 'small':\n        classArray.push('sprk-o-Stack__item--flex@s');\n        break;\n      case 'medium':\n        classArray.push('sprk-o-Stack__item--flex@m');\n        break;\n      case 'large':\n        classArray.push('sprk-o-Stack__item--flex@l');\n        break;\n      case 'huge':\n        classArray.push('sprk-o-Stack__item--flex@xl');\n        break;\n      default:\n        break;\n    }\n\n    return classArray.join(' ');\n  }\n  /**\n   * @ignore\n   */\n  getClassesImgOne(): string {\n    const classArray: string[] = [\n      'sprk-o-Stack__item sprk-o-Stack__item--center-column'\n    ];\n\n    if (this.additionalClassesImgOne) {\n      this.additionalClassesImgOne.split(' ').forEach(className => {\n        classArray.push(className);\n      });\n    }\n    return classArray.join(' ');\n  }\n\n  /**\n   * @ignore\n   */\n  getClassesImgTwo(): string {\n    const classArray: string[] = [\n      'sprk-o-Stack__item sprk-o-Stack__item--center-column'\n    ];\n\n    if (this.additionalClassesImgTwo) {\n      this.additionalClassesImgTwo.split(' ').forEach(className => {\n        classArray.push(className);\n      });\n    }\n    return classArray.join(' ');\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { SprkStackModule } from '../sprk-stack/sprk-stack.module';\nimport { SprkStackItemModule } from '../../directives/sprk-stack-item/sprk-stack-item.module';\nimport { SprkLinkDirectiveModule } from '../../directives/sprk-link/sprk-link.module';\nimport { SprkToggleModule } from '../sprk-toggle/sprk-toggle.module';\nimport { SprkAwardComponent } from './sprk-award.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    SprkStackModule,\n    SprkStackItemModule,\n    SprkLinkDirectiveModule,\n    SprkToggleModule\n  ],\n  declarations: [SprkAwardComponent],\n  exports: [SprkAwardComponent]\n})\nexport class SprkAwardModule {}\n","import { Component, Input } from '@angular/core';\n\n@Component({\n  selector: 'sprk-card',\n  template: `\n    <div\n      [ngClass]=\"getClassesCard()\"\n      *ngIf=\"cardType === 'teaser'\"\n      [attr.data-id]=\"idString\"\n    >\n      <a\n        sprkLink\n        variant=\"unstyled\"\n        *ngIf=\"media === 'img'\"\n        [href]=\"imgHref\"\n        class=\"sprk-o-Stack__item\"\n        [analyticsString]=\"imgLinkAnalytics\"\n      >\n        <img\n          class=\"sprk-c-Card__media\"\n          [attr.alt]=\"imgAlt\"\n          [attr.src]=\"imgSrc\"\n        />\n      </a>\n\n      <div\n        [ngClass]=\"{\n          'sprk-o-Stack__item': true,\n          'sprk-c-Card__content': true,\n          'sprk-o-Stack': true,\n          'sprk-o-Stack--medium': true,\n          'sprk-u-TextAlign--center': media === 'icon'\n        }\"\n      >\n        <a\n          sprkLink\n          variant=\"unstyled\"\n          *ngIf=\"media === 'icon'\"\n          [attr.href]=\"iconHref\"\n          class=\"sprk-o-Stack__item sprk-u-AbsoluteCenter\"\n          [analyticsString]=\"iconLinkAnalytics\"\n        >\n          <sprk-icon\n            [iconType]=\"iconType\"\n            [additionalClasses]=\"additionalClassesIcon\"\n          ></sprk-icon>\n        </a>\n\n        <h3 class=\"sprk-b-TypeDisplayFive sprk-o-Stack__item\">{{ title }}</h3>\n\n        <p class=\"sprk-b-TypeBodyTwo sprk-o-Stack__item\">{{ body }}</p>\n\n        <div class=\"sprk-o-Stack__item\">\n          <a\n            sprkLink\n            variant=\"unstyled\"\n            [attr.href]=\"ctaHref\"\n            [ngClass]=\"getClassesCta()\"\n            [analyticsString]=\"ctaAnalytics\"\n          >\n            {{ ctaText }}\n            <sprk-icon\n              *ngIf=\"ctaIcon && (ctaType === 'link')\"\n              [iconType]=\"ctaIcon\"\n            ></sprk-icon>\n          </a>\n        </div>\n      </div>\n    </div>\n\n    <div\n      [ngClass]=\"getClassesCard()\"\n      *ngIf=\"cardType === 'base'\"\n      [attr.data-id]=\"idString\"\n    >\n      <ng-content></ng-content>\n    </div>\n\n    <div\n      [ngClass]=\"getClassesCard()\"\n      *ngIf=\"cardType === 'teaserHeading'\"\n      [attr.data-id]=\"idString\"\n    >\n      <h3\n        class=\"sprk-o-Stack__item sprk-c-Card__content sprk-b-TypeDisplayFive\"\n      >\n        {{ title }}\n      </h3>\n\n      <div\n        class=\"sprk-o-Stack__item sprk-c-Card__content sprk-o-Stack sprk-o-Stack--medium\"\n      >\n        <a\n          sprkLink\n          variant=\"unstyled\"\n          *ngIf=\"media === 'img'\"\n          [attr.href]=\"imgHref\"\n          class=\"sprk-o-Stack__item\"\n          [analyticsString]=\"imgLinkAnalytics\"\n        >\n          <img [attr.alt]=\"imgAlt\" [attr.src]=\"imgSrc\" />\n        </a>\n\n        <a\n          sprkLink\n          *ngIf=\"media === 'icon'\"\n          [attr.href]=\"iconHref\"\n          variant=\"unstyled\"\n          class=\"sprk-o-Stack__item sprk-o-Stack__item--center\"\n          [analyticsString]=\"iconLinkAnalytics\"\n        >\n          <sprk-icon\n            [iconType]=\"iconType\"\n            [additionalClasses]=\"additionalClassesIcon\"\n          ></sprk-icon>\n        </a>\n\n        <p class=\"sprk-b-TypeBodyTwo sprk-o-Stack__item\">{{ body }}</p>\n\n        <div class=\"sprk-o-Stack__item\">\n          <a\n            sprkLink\n            variant=\"unstyled\"\n            [attr.href]=\"ctaHref\"\n            [ngClass]=\"getClassesCta()\"\n            [analyticsString]=\"ctaAnalytics\"\n          >\n            {{ ctaText }}\n            <sprk-icon\n              *ngIf=\"ctaIcon && (ctaType === 'link')\"\n              [iconType]=\"ctaIcon\"\n            ></sprk-icon>\n          </a>\n        </div>\n      </div>\n    </div>\n  `\n})\nexport class SprkCardComponent {\n  /**\n   * The type of Card variant to render.\n   * The available values are `base`, `teaser`, and `teaserHeading`.\n   */\n  @Input()\n  cardType: 'base' | 'teaser' | 'teaserHeading' = 'base' ;\n  /**\n   * The main content\n   * of the Card. Placed between\n   * the title and call to action.\n   */\n  @Input()\n  body: string;\n  /**\n   * Determines which type of media will be rendered.\n   * The available values are `image` and `icon`.\n   */\n  @Input()\n  media: string;\n  /**\n   * Expects a space separated string\n   * of classes to be added to the\n   * icon if the media type is icon.\n   */\n  @Input()\n  additionalClassesIcon: string;\n  /**\n   * The title of the Card.\n   */\n  @Input()\n  title: string;\n  /**\n   * If the `media` input is set to `image`,\n   * this is the text that will be applied to the\n   * `src` attribute of the image.\n   */\n  @Input()\n  imgSrc: string;\n  /**\n   * If the `media` input is set to `image`,\n   * this is the text that is applied to\n   * the `alt` attribute of the image.\n   */\n  @Input()\n  imgAlt: string;\n  /**\n   * If the `media` input is set to `icon`, this\n   * is used to supply the name of the icon to use.\n   */\n  @Input()\n  iconType: string;\n  /**\n   * If the `media` input is set to `icon`, this\n   * is used to supply the `href` for the icon.\n   */\n  @Input()\n  iconHref: string;\n  /**\n   * If the `media` input is set to `img`, this\n   * is used to supply the `href` of the image.\n   */\n  @Input()\n  imgHref: string;\n  /**\n   * Determines what icon `sprk-icon` renders\n   * next to the call-to-action link.\n   */\n  @Input()\n  ctaIcon: string;\n  /**\n   * Determines which type of call to action is rendered.\n   * The available values are `link` and `button`.\n   */\n  @Input()\n  ctaType: 'link' | 'button' = 'link';\n  /**\n   * The text content of the call to action.\n   */\n  @Input()\n  ctaText: string;\n  /**\n   * The text that will be applied to the `data-analytics` attribute\n   * of the call to action.\n   */\n  @Input()\n  ctaAnalytics: string;\n  /**\n   * The text that will be applied to the `data-analytics` attribute\n   * of the link surrounding the image.\n   */\n  @Input()\n  imgLinkAnalytics: string;\n  /**\n   * The text that will be applied to the `data-analytics` attribute\n   * of the link surrounding the icon.\n   */\n  @Input()\n  iconLinkAnalytics: string;\n  /**\n   * The `href` value for the call to action.\n   */\n  @Input()\n  ctaHref: string;\n  /**\n   * Expects a space separated string\n   * of classes to be added to the\n   * component.\n   */\n  @Input()\n  additionalClasses: string;\n  /**\n   * Expects a space separated string\n   * of classes to be added to the\n   * call to action.\n   */\n  @Input()\n  additionalCtaClasses: string;\n  /**\n   * The value supplied will be assigned\n   * to the `data-id` attribute on the\n   * component. This is intended to be\n   * used as a selector for automated\n   * tools. This value should be unique\n   * per page.\n   */\n  @Input()\n  idString: string;\n\n  /**\n   * @ignore\n   */\n  getClassesCta(): string {\n    const ctaClassArray: string[] = [];\n\n    if (this.ctaType === 'button') {\n      ctaClassArray.push('sprk-c-Button');\n    } else {\n      ctaClassArray.push('sprk-b-Link');\n      if (this.ctaIcon) {\n        ctaClassArray.push('sprk-b-Link--simple');\n        ctaClassArray.push('sprk-b-Link--has-icon');\n      }\n    }\n\n    if (this.additionalCtaClasses) {\n      this.additionalCtaClasses.split(' ').forEach(className => {\n        ctaClassArray.push(className);\n      });\n    }\n\n    return ctaClassArray.join(' ');\n  }\n\n  /**\n   * @ignore\n   */\n  getClassesCard(): string {\n    const classArray: string[] = ['sprk-c-Card', 'sprk-o-Stack'];\n\n    if (this.additionalClasses) {\n      this.additionalClasses.split(' ').forEach(className => {\n        classArray.push(className);\n      });\n    }\n\n    return classArray.join(' ');\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { SprkLinkDirectiveModule } from '../../directives/sprk-link/sprk-link.module';\nimport { SprkIconModule } from '../sprk-icon/sprk-icon.module';\nimport { SprkCardComponent } from './sprk-card.component';\n\n@NgModule({\n  imports: [CommonModule, SprkIconModule, SprkLinkDirectiveModule],\n  declarations: [SprkCardComponent],\n  exports: [SprkCardComponent]\n})\nexport class SprkCardModule {}\n","import { Component, Input } from '@angular/core';\n\n@Component({\n  selector: 'sprk-dictionary',\n  template: `\n    <div [ngClass]=\"getClasses()\" [attr.data-id]=\"idString\">\n      <dl class=\"sprk-c-Dictionary__keyvaluepairs\">\n        <div\n          *ngFor=\"let key of objectKeys(data)\"\n          class=\"sprk-c-Dictionary__keyvaluepair\"\n        >\n          <dt\n            class=\"sprk-c-Dictionary__key sprk-b-Label sprk-b-Label--no-input\"\n          >\n            {{ key }}\n          </dt>\n          <dd class=\"sprk-c-Dictionary__value\">{{ data[key] }}</dd>\n        </div>\n      </dl>\n    </div>\n  `\n})\nexport class SprkDictionaryComponent {\n  /**\n   * The collection of key-value pairs to be rendered\n   * into the component.\n   */\n  @Input()\n  data: object = {};\n  /**\n   * Determines the variant of the dictionary component to render.\n   * The only available option is `striped`.\n   * Supplying no value will cause the base variant to be used.\n   */\n  @Input()\n  dictionaryType = 'base';\n  /**\n   * Expects a space separated string\n   * of classes to be added to the\n   * component.\n   */\n  @Input()\n  additionalClasses: string;\n  /**\n   * The value supplied will be assigned\n   * to the `data-id` attribute on the\n   * component. This is intended to be\n   * used as a selector for automated\n   * tools. This value should be unique\n   * per page.\n   */\n  @Input()\n  idString: string;\n  /**\n   * @ignore\n   * Used to grab all the keys from\n   * objects.\n   */\n  objectKeys = Object.keys;\n\n  /**\n   * @ignore\n   */\n  getClasses(): string {\n    const classArray: string[] = ['sprk-c-Dictionary'];\n\n    if (this.dictionaryType === 'striped') {\n      classArray.push('sprk-c-Dictionary--striped');\n    }\n\n    if (this.additionalClasses) {\n      this.additionalClasses.split(' ').forEach(className => {\n        classArray.push(className);\n      });\n    }\n\n    return classArray.join(' ');\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { SprkDictionaryComponent } from './sprk-dictionary.component';\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [SprkDictionaryComponent],\n  exports: [SprkDictionaryComponent]\n})\nexport class SprkDictionaryModule {}\n","import { Component, Input, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'sprk-highlight-board',\n  template: `\n    <div [ngClass]=\"getClasses()\" [attr.data-id]=\"idString\">\n      <img\n        *ngIf=\"type !== 'noImage'\"\n        class=\"sprk-c-HighlightBoard__image\"\n        src=\"{{ imgSrc }}\"\n        alt=\"{{ imgAlt }}\"\n      />\n\n      <sprk-stack\n        sprkStackItem\n        itemSpacing=\"large\"\n        additionalClasses=\"sprk-c-HighlightBoard__content\"\n      >\n        <h1\n          sprkStackItem\n          [ngClass]=\"{\n            'sprk-b-TypeDisplayTwo': type === 'noImage',\n            'sprk-b-TypeDisplayOne': type !== 'noImage',\n            'sprk-c-HighlightBoard__heading': true\n          }\"\n        >\n          {{ heading }}\n        </h1>\n\n        <sprk-stack\n          sprkStackItem\n          *ngIf=\"ctaText\"\n          itemSpacing=\"medium\"\n          splitAt=\"tiny\"\n          additionalClasses=\"sprk-o-Stack--center-column {{ centerBtns }}\"\n        >\n          <div sprkStackItem class=\"sprk-c-HighlightBoard__cta\">\n            <a\n              sprkLink\n              variant=\"unstyled\"\n              [attr.href]=\"ctaHref\"\n              class=\"sprk-c-Button sprk-c-Button--primary sprk-c-Button--full@sm\"\n              [analyticsString]=\"analyticsStringCta\"\n            >\n              {{ ctaText }}\n            </a>\n          </div>\n\n          <div\n            sprkStackItem\n            *ngIf=\"ctaText2\"\n            class=\"sprk-c-HighlightBoard__cta\"\n          >\n            <a\n              sprkLink\n              variant=\"unstyled\"\n              [attr.href]=\"ctaHref2\"\n              class=\"sprk-c-Button sprk-c-Button--secondary sprk-c-Button--full@sm\"\n              [analyticsString]=\"analyticsStringCta2\"\n            >\n              {{ ctaText2 }}\n            </a>\n          </div>\n        </sprk-stack>\n      </sprk-stack>\n    </div>\n  `\n})\nexport class SprkHighlightBoardComponent implements OnInit {\n  /**\n   * The value supplied will be rendered as the heading.\n   */\n  @Input()\n  heading: string;\n  /**\n   * The Highlight Board will use this as the\n   * source for the main image.\n   */\n  @Input()\n  imgSrc: string;\n  /**\n   * The Highlight Board will use this as\n   * the `alt` text for the main image.\n   */\n  @Input()\n  imgAlt: string;\n  /**\n   * The Highlight Board will use this as\n   * the text for the main call to action.\n   */\n  @Input()\n  ctaText: string;\n  /**\n   * The Highlight Board will use this as the\n   * `href` for the main call to action.\n   */\n  @Input()\n  ctaHref: string;\n  /**\n   * The Highlight Board will use this as\n   * the text for the secondary call to action.\n   */\n  @Input()\n  ctaText2: string;\n  /**\n   * The Highlight Board will use this\n   * as the `href` for the secondary\n   * call to action.\n   */\n  @Input()\n  ctaHref2: string;\n  /**\n   * The value supplied will be assigned to\n   * the `data-analytics` attribute on the call to action.\n   * Intended for an outside library to capture data.\n   */\n  @Input()\n  analyticsStringCta: string;\n  /**\n   * The value supplied will be assigned to the\n   * `data-analytics` attribute on the second\n   * call to action. Intended for an outside\n   * library to capture data.\n   */\n  @Input()\n  analyticsStringCta2: string;\n  /**\n   * Expects a space separated string\n   * of classes to be added to the\n   * component.\n   */\n  @Input()\n  additionalClasses: string;\n  /**\n   * The variation of the\n   * Highlight Board that is rendered.\n   * Can be `noImage`, `stacked` or not\n   * set at all. The default if not set\n   * is the default variation of the Highlight Board.\n   */\n  @Input()\n  type: string;\n  /**\n   * The value supplied will be assigned\n   * to the `data-id` attribute on the\n   * component. This is intended to be\n   * used as a selector for automated\n   * tools. This value should be unique\n   * per page.\n   */\n  @Input()\n  idString: string;\n\n  ngOnInit() {\n    if (!this.ctaText && this.ctaText2) {\n      console.warn(`\n        Spark Design System Warning - <sprk-highlight-board> Component:\n        A secondary call-to-action (CTA)\n        should not exist without a primary CTA.\n        If there is only one CTA, it must be set on\n        ctaText and ctaHref.\n      `);\n    }\n  }\n\n  /**\n   * @ignore\n   */\n  public centerBtns = '';\n  /**\n   * @ignore\n   */\n  getClasses(): string {\n    const classArray: string[] = ['sprk-c-HighlightBoard'];\n\n    switch (this.type) {\n      case 'noImage':\n        this.centerBtns = 'sprk-o-Stack--center-row';\n        break;\n      case 'stacked':\n        this.centerBtns = 'sprk-o-Stack--center-row';\n        classArray.push(\n          'sprk-c-HighlightBoard--has-image sprk-c-HighlightBoard--stacked'\n        );\n        break;\n      default:\n        classArray.push('sprk-c-HighlightBoard--has-image');\n        break;\n    }\n\n    if (this.additionalClasses) {\n      this.additionalClasses.split(' ').forEach(className => {\n        classArray.push(className);\n      });\n    }\n\n    return classArray.join(' ');\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { SprkStackModule } from '../sprk-stack/sprk-stack.module';\nimport { SprkStackItemModule } from '../../directives/sprk-stack-item/sprk-stack-item.module';\nimport { SprkLinkDirectiveModule } from '../../directives/sprk-link/sprk-link.module';\nimport { SprkHighlightBoardComponent } from './sprk-highlight-board.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    SprkStackModule,\n    SprkStackItemModule,\n    SprkLinkDirectiveModule\n  ],\n  declarations: [SprkHighlightBoardComponent],\n  exports: [SprkHighlightBoardComponent]\n})\nexport class SprkHighlightBoardModule {}\n","import { Directive, ElementRef, Input, HostBinding } from '@angular/core';\n\n@Directive({\n  selector: '[sprkBox]'\n})\nexport class SprkBoxDirective {\n  /**\n   * Padding inside of the box component.\n   * Defaults to medium sizing when not provided.\n   * Refer to Class Modifiers section for default pixel values.\n   */\n  @Input() spacing:\n    | 'flush'\n    | 'tiny'\n    | 'small'\n    | 'medium'\n    | 'large'\n    | 'huge'\n    | 'insetShortTiny'\n    | 'insetShortSmall'\n    | 'insetShortMedium'\n    | 'insetShortLarge'\n    | 'insetShortHuge'\n    | 'insetTallTiny'\n    | 'insetTallSmall'\n    | 'insetTallMedium'\n    | 'insetTallLarge'\n    | 'insetTallHuge'\n    | 'miscA'\n    | 'miscB'\n    | 'miscC'\n    | 'miscD';\n\n  @HostBinding('class.sprk-o-Box') true;\n\n  @HostBinding('class.sprk-o-Box--flush')\n  get flush() {\n    return this.spacing === 'flush';\n  }\n\n  @HostBinding('class.sprk-o-Box--tiny')\n  get tiny() {\n    return this.spacing === 'tiny';\n  }\n\n  @HostBinding('class.sprk-o-Box--small')\n  get small() {\n    return this.spacing === 'small';\n  }\n\n  @HostBinding('class.sprk-o-Box--medium')\n  get medium() {\n    return this.spacing === 'medium';\n  }\n\n  @HostBinding('class.sprk-o-Box--large')\n  get large() {\n    return this.spacing === 'large';\n  }\n\n  @HostBinding('class.sprk-o-Box--huge')\n  get huge() {\n    return this.spacing === 'huge';\n  }\n\n  @HostBinding('class.sprk-o-Box--inset-short-tiny')\n  get insetShortTiny() {\n    return this.spacing === 'insetShortTiny';\n  }\n\n  @HostBinding('class.sprk-o-Box--inset-short-small')\n  get insetShortSmall() {\n    return this.spacing === 'insetShortSmall';\n  }\n\n  @HostBinding('class.sprk-o-Box--inset-short-medium')\n  get insetShortMedium() {\n    return this.spacing === 'insetShortMedium';\n  }\n\n  @HostBinding('class.sprk-o-Box--inset-short-large')\n  get insetShortLarge() {\n    return this.spacing === 'insetShortLarge';\n  }\n\n  @HostBinding('class.sprk-o-Box--inset-short-huge')\n  get insetShortHuge() {\n    return this.spacing === 'insetShortHuge';\n  }\n\n  @HostBinding('class.sprk-o-Box--inset-tall-tiny')\n  get insetTallTiny() {\n    return this.spacing === 'insetTallTiny';\n  }\n\n  @HostBinding('class.sprk-o-Box--inset-tall-small')\n  get insetTallSmall() {\n    return this.spacing === 'insetTallSmall';\n  }\n\n  @HostBinding('class.sprk-o-Box--inset-tall-medium')\n  get insetTallMedium() {\n    return this.spacing === 'insetTallMedium';\n  }\n\n  @HostBinding('class.sprk-o-Box--inset-tall-large')\n  get insetTallLarge() {\n    return this.spacing === 'insetTallLarge';\n  }\n\n  @HostBinding('class.sprk-o-Box--inset-tall-huge')\n  get insetTallHuge() {\n    return this.spacing === 'insetTallHuge';\n  }\n\n  @HostBinding('class.sprk-o-Box--misc-a')\n  get miscA() {\n    return this.spacing === 'miscA';\n  }\n\n  @HostBinding('class.sprk-o-Box--misc-b')\n  get miscB() {\n    return this.spacing === 'miscB';\n  }\n\n  @HostBinding('class.sprk-o-Box--misc-c')\n  get miscC() {\n    return this.spacing === 'miscC';\n  }\n\n  @HostBinding('class.sprk-o-Box--misc-d')\n  get miscD() {\n    return this.spacing === 'miscD';\n  }\n\n  /**\n   * @ignore\n   */\n  constructor() {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { SprkBoxDirective } from './sprk-box.directive';\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [SprkBoxDirective],\n  exports: [SprkBoxDirective]\n})\nexport class SprkBoxModule {}\n","import {\n  Directive,\n  Input,\n  HostBinding\n} from '@angular/core';\n\n@Directive({\n  selector: '[sprkText]'\n})\n\nexport class SprkTextDirective {\n  /**\n   * @ignore\n   */\n  constructor() { }\n\n  @Input()\n  variant: 'bodyOne' |\n    'bodyTwo' | 'bodyThree' |\n    'bodyFour';\n\n  @HostBinding('class.sprk-b-TypeBodyOne')\n  get textOne() {\n    return this.variant === 'bodyOne';\n  }\n  @HostBinding('class.sprk-b-TypeBodyTwo')\n  get textTwo() {\n    return this.variant === 'bodyTwo';\n  }\n  @HostBinding('class.sprk-b-TypeBodyThree')\n  get textThree() {\n    return this.variant === 'bodyThree';\n  }\n  @HostBinding('class.sprk-b-TypeBodyFour')\n  get textFour() {\n    return this.variant === 'bodyFour';\n  }\n}\n\n\n","import { NgModule } from '@angular/core';\nimport { SprkTextDirective } from './sprk-text.directive';\n\n@NgModule({\n  declarations: [SprkTextDirective],\n  exports: [SprkTextDirective]\n})\nexport class SprkTextModule { }\n","import {\n  Directive,\n  Input,\n  HostBinding\n} from '@angular/core';\n\n@Directive({\n  selector: '[sprkHeading]'\n})\n\nexport class SprkHeadingDirective {\n  /**\n   * @ignore\n   */\n  constructor() { }\n\n  @Input()\n  variant: 'displayOne' |\n    'displayTwo' | 'displayThree' |\n    'displayFour' | 'displayFive' |\n    'displaySix' | 'displaySeven';\n\n  @HostBinding('class.sprk-b-TypeDisplayOne')\n  get headingOne() {\n    return this.variant === 'displayOne';\n  }\n  @HostBinding('class.sprk-b-TypeDisplayTwo')\n  get headingTwo() {\n    return this.variant === 'displayTwo';\n  }\n  @HostBinding('class.sprk-b-TypeDisplayThree')\n  get headingThree() {\n    return this.variant === 'displayThree';\n  }\n  @HostBinding('class.sprk-b-TypeDisplayFour')\n  get headingFour() {\n    return this.variant === 'displayFour';\n  }\n  @HostBinding('class.sprk-b-TypeDisplayFive')\n  get headingFive() {\n    return this.variant === 'displayFive';\n  }\n  @HostBinding('class.sprk-b-TypeDisplaySix')\n  get headingSix() {\n    return this.variant === 'displaySix';\n  }\n  @HostBinding('class.sprk-b-TypeDisplaySeven')\n  get headingSeven() {\n    return this.variant === 'displaySeven';\n  }\n\n  @HostBinding('class.sprk-b-PageTitle')\n  /**\n   * Value will be used to select\n   * the heading style.\n   */\n  @Input() isPageTitle = false;\n}\n","import { NgModule } from '@angular/core';\nimport { SprkHeadingDirective } from './sprk-heading.directive';\n\n@NgModule({\n  declarations: [SprkHeadingDirective],\n  exports: [SprkHeadingDirective]\n})\nexport class SprkHeadingModule { }\n","import { Component, Input } from '@angular/core';\n\n@Component({\n  selector: 'sprk-flag',\n  template: `\n    <div\n      [ngClass]=\"getClasses()\"\n      [attr.data-id]=\"idString\"\n    >\n      <div [ngClass]=\"getMediaClasses()\">\n        <ng-content select=\"[media-slot]\"></ng-content>\n      </div>\n      <div [ngClass]=\"getBodyClasses()\">\n        <ng-content select=\"[body-slot]\"></ng-content>\n      </div>\n    </div>\n  `\n})\n\nexport class SprkFlagComponent {\n  /**\n   * Expects a space separated string\n   * of classes to be added to the\n   * component container.\n   */\n  @Input()\n  additionalClasses: string;\n\n  /**\n   * Expects a space separated string\n   * of classes to be added to the\n   * container of the media-slot.\n   */\n  @Input()\n  additionalMediaClasses: string;\n\n  /**\n   * Expects a space separated string\n   * of classes to be added to the\n   * container of the body-slot.\n   */\n  @Input()\n  additionalBodyClasses: string;\n\n  /**\n   * The value supplied will be assigned\n   * to the `data-id` attribute on the\n   * component. This is intended to be\n   * used as a selector for automated\n   * tools. This value should be unique\n   * per page.\n   */\n  @Input()\n  idString: string;\n\n  /**\n   * The Flag component will use this to decide where\n   * the media-slot is rendered in relation to the\n   * body-slot. The default is the media-slot is on\n   * the left of the body-slot. isReversed=\"true\" places the\n   * media-slot on the right of the body-slot.\n   */\n  @Input()\n  isReversed = false;\n\n  /**\n   * The Flag component will use this to stack\n   * the element at the `$sprk-flag-stacked-breakpoint`\n   */\n  @Input()\n  isStacked = false;\n\n  /**\n   * Determines how much space between the\n   * media and the body.\n   */\n  @Input()\n  spacing: 'flush' | 'tiny' | 'small' | 'medium' | 'large' | 'huge' = 'medium';\n\n  /**\n   * Determines the vertical alignment of content.\n   */\n  @Input()\n  verticalAlignment: 'top' | 'middle' | 'bottom' = 'top';\n\n  /**\n   * @ignore\n   */\n  getClasses(): string {\n    const classArray: string[] = ['sprk-o-Flag'];\n\n    if (this.spacing !== 'medium') {\n      const spacingClasses = {\n        flush: 'sprk-o-Flag--flush',\n        tiny: 'sprk-o-Flag--tiny',\n        small: 'sprk-o-Flag--small',\n        large: 'sprk-o-Flag--large',\n        huge: 'sprk-o-Flag--huge',\n      };\n\n      classArray.push(spacingClasses[this.spacing]);\n    }\n\n    if (this.verticalAlignment !== 'top') {\n      const verticalAlignmentClasses = {\n        middle: 'sprk-o-Flag--middle',\n        bottom: 'sprk-o-Flag--bottom',\n      };\n\n      classArray.push(verticalAlignmentClasses[this.verticalAlignment]);\n    }\n\n    if (this.isReversed) {\n      classArray.push('sprk-o-Flag--rev');\n    }\n\n    if (this.isStacked) {\n      classArray.push('sprk-o-Flag--stacked');\n    }\n\n    if (this.additionalClasses) {\n      this.additionalClasses.split(' ').forEach(className => {\n        classArray.push(className);\n      });\n    }\n\n    return classArray.join(' ');\n  }\n  /**\n   * @ignore\n   */\n  getMediaClasses(): string {\n    const mediaClassArray: string[] = ['sprk-o-Flag__figure'];\n\n    if (this.additionalMediaClasses) {\n      this.additionalMediaClasses.split(' ').forEach(className => {\n        mediaClassArray.push(className);\n      });\n    }\n\n    return mediaClassArray.join(' ');\n  }\n  /**\n   * @ignore\n   */\n  getBodyClasses(): string {\n    const bodyClassArray: string[] = ['sprk-o-Flag__body'];\n\n    if (this.additionalBodyClasses) {\n      this.additionalBodyClasses.split(' ').forEach(className => {\n        bodyClassArray.push(className);\n      });\n    }\n\n    return bodyClassArray.join(' ');\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { SprkFlagComponent } from './sprk-flag.component';\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [SprkFlagComponent],\n  exports: [SprkFlagComponent]\n})\n\nexport class SprkFlagModule {}\n","import { Directive, Input, HostBinding } from '@angular/core';\n\n@Directive({\n  selector: '[sprkCenteredColumn]'\n})\nexport class SprkCenteredColumnDirective {\n\n  @HostBinding('class.sprk-o-CenteredColumn') true;\n\n  /**\n   * The value supplied will be assigned\n   * to the `data-id` attribute on the\n   * component. This is intended to be\n   * used as a selector for automated\n   * tools. This value should be unique\n   * per page.\n   */\n  @HostBinding('attr.data-id')\n  @Input() idString: string;\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { SprkCenteredColumnDirective } from './sprk-centered-column.directive';\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [SprkCenteredColumnDirective],\n  exports: [SprkCenteredColumnDirective]\n})\nexport class SprkCenteredColumnModule {}\n","import { environment } from '../environment/environment';\nif (typeof window !== 'undefined') {\n  window['sprk'] = { version: { angular: environment.version } } || {};\n}\n\nimport { NgModule } from '@angular/core';\nimport { SprkFormatterDateModule } from './directives/inputs/formatters/sprk-formatter-date/sprk-formatter-date.module';\nimport { SprkFormatterMonetaryModule } from './directives/inputs/formatters/sprk-formatter-monetary/sprk-formatter-monetary.module';\nimport {\n  SprkFormatterPhoneNumberModule\n} from './directives/inputs/formatters/sprk-formatter-phone-number/sprk-formatter-phone-number.module';\nimport { SprkFormatterSsnModule } from './directives/inputs/formatters/sprk-formatter-ssn/sprk-formatter-ssn.module';\nimport { SprkDatepickerModule } from './directives/inputs/sprk-datepicker/sprk-datepicker.module';\nimport { SprkFieldErrorModule } from './directives/inputs/sprk-field-error/sprk-field-error.module';\nimport { SprkHelperTextModule } from './directives/inputs/sprk-helper-text/sprk-helper-text.module';\nimport { SprkInputModule } from './directives/inputs/sprk-input/sprk-input.module';\nimport { SprkLabelModule } from './directives/inputs/sprk-label/sprk-label.module';\nimport { SprkSelectionInputModule } from './directives/inputs/sprk-selection-input/sprk-selection-input.module';\nimport { SprkSelectionLabelModule } from './directives/inputs/sprk-selection-label/sprk-selection-label.module';\nimport { SprkStackItemModule } from './directives/sprk-stack-item/sprk-stack-item.module';\nimport { SprkTableEmptyHeadingModule } from './directives/sprk-table-empty-heading/sprk-table-empty-heading.module';\nimport { SprkTableGroupedColumnModule } from './directives/sprk-table-grouped-column/sprk-table-grouped-column.module';\nimport { SprkTableHeadModule } from './directives/sprk-table-head/sprk-table-head.module';\nimport { SprkTableRowHeadingModule } from './directives/sprk-table-row-heading/sprk-table-row-heading.module';\nimport {\n  SprkTabbedNavigationPanelModule\n} from './directives/tabbed-navigation/sprk-tabbed-navigation-panel/sprk-tabbed-navigation-panel.module';\nimport { SprkTabbedNavigationTabModule } from './directives/tabbed-navigation/sprk-tabbed-navigation-tab/sprk-tabbed-navigation-tab.module';\nimport { SparkInputContainerModule } from './components/inputs/sprk-input-container/sprk-input-container.module';\nimport { SprkHugeInputContainerModule } from './components/inputs/sprk-huge-input-container/sprk-huge-input-container.module';\nimport { SprkTextareaContainerModule } from './components/inputs/sprk-textarea-container/sprk-textarea-container.module';\nimport { SprkIconInputContainerModule } from './components/inputs/sprk-icon-input-container/sprk-icon-input-container.module';\nimport { SprkSelectionContainerModule } from './components/inputs/sprk-selection-container/sprk-selection-container.module';\nimport { SprkSelectionItemContainerModule } from './components/inputs/sprk-selection-item-container/sprk-selection-item-container.module';\nimport { SprkAccordionItemModule } from './components/sprk-accordion-item/sprk-accordion-item.module';\nimport { SprkAccordionModule } from './components/sprk-accordion/sprk-accordion.module';\nimport { SprkAlertModule } from './components/sprk-alert/sprk-alert.module';\nimport { SprkDividerModule } from './components/sprk-divider/sprk-divider.module';\nimport { SprkDropdownModule } from './components/sprk-dropdown/sprk-dropdown.module';\nimport { SprkFooterModule } from './components/sprk-footer/sprk-footer.module';\nimport { SprkIconModule } from './components/sprk-icon/sprk-icon.module';\nimport { SprkLinkModule } from './components/sprk-link/sprk-link.module';\nimport { SprkListItemModule } from './components/sprk-list-item/sprk-list-item.module';\nimport { SprkMastheadModule } from './components/sprk-masthead/sprk-masthead.module';\nimport { SprkModalModule } from './components/sprk-modal/sprk-modal.module';\nimport { SprkOrderedListModule } from './components/sprk-ordered-list/sprk-ordered-list.module';\nimport { SprkPaginationModule } from './components/sprk-pagination/sprk-pagination.module';\nimport { SprkPromoModule } from './components/sprk-promo/sprk-promo.module';\nimport { SprkStackModule } from './components/sprk-stack/sprk-stack.module';\nimport { SprkTabbedNavigationModule } from './components/sprk-tabbed-navigation/sprk-tabbed-navigation.module';\nimport { SprkTableModule } from './components/sprk-table/sprk-table.module';\nimport { SprkToggleModule } from './components/sprk-toggle/sprk-toggle.module';\nimport { SprkUnorderedListModule } from './components/sprk-unordered-list/sprk-unordered-list.module';\nimport { SprkButtonModule } from './directives/inputs/sprk-button/sprk-button.module';\nimport { SprkAwardModule } from './components/sprk-award/sprk-award.module';\nimport { SprkCardModule } from './components/sprk-card/sprk-card.module';\nimport { SprkDictionaryModule } from './components/sprk-dictionary/sprk-dictionary.module';\nimport { SprkHighlightBoardModule } from './components/sprk-highlight-board/sprk-highlight-board.module';\nimport { SprkBoxModule } from './directives/sprk-box/sprk-box.module';\nimport { SprkTextModule } from './directives/sprk-text/sprk-text.module';\nimport { SprkHeadingModule } from './directives/sprk-heading/sprk-heading.module';\nimport { SprkLinkDirectiveModule } from './directives/sprk-link/sprk-link.module';\nimport { SprkFlagModule } from './components/sprk-flag/sprk-flag.module';\nimport { SprkCenteredColumnModule } from './directives/sprk-centered-column/sprk-centered-column.module';\n\n@NgModule({\n  exports: [\n    SprkAlertModule,\n    SprkAccordionModule,\n    SprkAccordionItemModule,\n    SprkAwardModule,\n    SprkButtonModule,\n    SprkCardModule,\n    SprkDictionaryModule,\n    SprkDividerModule,\n    SprkDropdownModule,\n    SprkLinkModule,\n    SprkHighlightBoardModule,\n    SprkModalModule,\n    SprkOrderedListModule,\n    SprkUnorderedListModule,\n    SprkListItemModule,\n    SparkInputContainerModule,\n    SprkHugeInputContainerModule,\n    SprkTextareaContainerModule,\n    SprkIconInputContainerModule,\n    SprkSelectionContainerModule,\n    SprkSelectionItemContainerModule,\n    SprkMastheadModule,\n    SprkInputModule,\n    SprkSelectionInputModule,\n    SprkHelperTextModule,\n    SprkLabelModule,\n    SprkSelectionLabelModule,\n    SprkFieldErrorModule,\n    SprkFormatterPhoneNumberModule,\n    SprkFormatterDateModule,\n    SprkFormatterMonetaryModule,\n    SprkFormatterSsnModule,\n    SprkDatepickerModule,\n    SprkPromoModule,\n    SprkTableModule,\n    SprkTableHeadModule,\n    SprkTableGroupedColumnModule,\n    SprkTableEmptyHeadingModule,\n    SprkTableRowHeadingModule,\n    SprkTabbedNavigationTabModule,\n    SprkTabbedNavigationPanelModule,\n    SprkPaginationModule,\n    SprkStackModule,\n    SprkStackItemModule,\n    SprkToggleModule,\n    SprkIconModule,\n    SprkFooterModule,\n    SprkTabbedNavigationModule,\n    SprkBoxModule,\n    SprkTextModule,\n    SprkHeadingModule,\n    SprkLinkDirectiveModule,\n    SprkFlagModule,\n    SprkCenteredColumnModule,\n  ]\n})\nexport class SparkAngularModule {}\n"]}